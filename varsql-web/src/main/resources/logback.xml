<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds">

	 <contextListener class="com.varsql.web.configuration.LoggerListener"/>

	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			<Pattern>
				%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{26}@%method:%line - %msg%n
			</Pattern>
		</layout>
	</appender>

	<appender name="FILEOUT" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_DIR}/varsql.log</file>
		<append>true</append>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_DIR}/old/varsql.%d{yyyy-MM-dd}.%i.log</fileNamePattern>

			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>30mb</maxFileSize> <!-- kb , mb , gb 로 설정 가능. -->
			</timeBasedFileNamingAndTriggeringPolicy>
			<maxHistory>30</maxHistory> <!-- 30일 이 자난 로그는 순서 대로 삭제.  -->
		</rollingPolicy>

		<layout class="ch.qos.logback.classic.PatternLayout">
			<Pattern>
				%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{26}@%method:%line - %msg%n
			</Pattern>
		</layout>
	</appender>

	<appender name="appErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_DIR}/error.log</file>
		<append>true</append>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_DIR}/old/error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>

			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>30mb</maxFileSize> <!-- kb , mb , gb 로 설정 가능. -->
			</timeBasedFileNamingAndTriggeringPolicy>
			<maxHistory>30</maxHistory> <!-- 30일 이 자난 로그는 순서 대로 삭제.  -->
		</rollingPolicy>

		<layout class="ch.qos.logback.classic.PatternLayout">
			<Pattern>
				%d{yyyy-MM-dd HH:mm:ss} %-5level %logger@%method:%line - %msg%n
			</Pattern>
		</layout>
	</appender>

	<appender name="sqlErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_DIR}/sqlError.log</file>
		<append>true</append>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_DIR}/old/sqlError.%d{yyyy-MM-dd}.%i.log</fileNamePattern>

			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>30mb</maxFileSize> <!-- kb , mb , gb 로 설정 가능. -->
			</timeBasedFileNamingAndTriggeringPolicy>
			<maxHistory>30</maxHistory> <!-- 30일 이 자난 로그는 순서 대로 삭제.  -->
		</rollingPolicy>

		<layout class="ch.qos.logback.classic.PatternLayout">
			<Pattern>
				%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{0}@%method:%line - %msg%n
			</Pattern>
		</layout>
	</appender>

	<logger name="appErrorLog" level="info" additivity="false" >
		<appender-ref ref="appErrorLog" />

		<if condition='"local".equals("${runtime}")'>
	        <then>
				<appender-ref ref="STDOUT" />
	        </then>
	    </if>
	</logger>

	<logger name="sqlErrorLog" level="info" additivity="false" >
		<appender-ref ref="sqlErrorLog" />

		<if condition='"local".equals("${runtime}")'>
	        <then>
				<appender-ref ref="STDOUT" />
	        </then>
	    </if>
	</logger>

	<logger name="org.springframework" level="info" additivity="false">
		<appender-ref ref="FILEOUT" />
		<if condition='"local".equals("${runtime}")'>
	        <then>
				<appender-ref ref="STDOUT" />
	        </then>
	    </if>
	</logger>
	
	<!-- 
		어플리케이션 구동시 handlermapping  log level
		debug 로 변경시 모든 컨트롤러의 mapping  정보가 확인 가능.  
	  -->
	<logger name="_org.springframework" level="info" additivity="false">
		<appender-ref ref="FILEOUT" />
		<if condition='"local".equals("${runtime}")'>
	        <then>
				<appender-ref ref="STDOUT" />
	        </then>
	    </if>
	</logger>

	<logger name="com.varsql" level="debug" additivity="false">
		<appender-ref ref="FILEOUT" />
		<if condition='"local".equals("${runtime}")'>
	        <then>
				<appender-ref ref="STDOUT" />
	        </then>
	    </if>
	</logger>

	<logger name="com.varsql_query" level="debug" additivity="false">
		<appender-ref ref="FILEOUT" />
		<if condition='"local".equals("${runtime}")'>
	        <then>
				<appender-ref ref="STDOUT" />
	        </then>
	    </if>
	</logger>

	<logger name="com.core.varsql_query" level="debug" additivity="false">
		<appender-ref ref="STDOUT" />
		<if condition='"local".equals("${runtime}")'>
	        <then>
				<appender-ref ref="STDOUT" />
	        </then>
	    </if>
	</logger>

	<!-- connection 정보 보기. -->
	<logger name="jdbc.connection" level="INFO" additivity="false">
		<appender-ref ref="FILEOUT" />
		<if condition='"local".equals("${runtime}")'>
	        <then>
				<appender-ref ref="STDOUT" />
	        </then>
	    </if>
	</logger>

	<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함-->
	<logger name="jdbc.sqltiming" level="debug" additivity="false">
		<appender-ref ref="FILEOUT" />
		<if condition='"local".equals("${runtime}")'>
	        <then>
				<appender-ref ref="STDOUT" />
	        </then>
	    </if>
	</logger>

	<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 출력 -->
	<logger name="jdbc.sqlonly" level="debug" additivity="false">
		<appender-ref ref="FILEOUT" />
		<if condition='"local".equals("${runtime}")'>
	        <then>
				<appender-ref ref="STDOUT" />
	        </then>
	    </if>
	</logger>

	<!-- ResultSet을 제외한 모든 JDBC 호출 정보 -->
	<logger name="jdbc.audit" level="debug" additivity="false">
		<appender-ref ref="FILEOUT" />
		<if condition='"local".equals("${runtime}")'>
	        <then>
				<appender-ref ref="STDOUT" />
	        </then>
	    </if>
	</logger>

	<!-- ResultSet을 포함한 모든 JDBC 호출 정보 -->
	<logger name="jdbc.resultset" level="error" additivity="false">
		<appender-ref ref="FILEOUT" />
		<if condition='"local".equals("${runtime}")'>
	        <then>
				<appender-ref ref="STDOUT" />
	        </then>
	    </if>
	</logger>

	<!-- result set 결과 보기. -->
	<logger name="jdbc.resultsettable" level="error" additivity="false">
		<appender-ref ref="FILEOUT" />
		<if condition='"local".equals("${runtime}")'>
	        <then>
				<appender-ref ref="STDOUT" />
	        </then>
	    </if>
	</logger>

	<!--\-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'varsql'
    |  |     |  |  |  \-[IDENT] Node: 'app'
    |  |     |  |  \-[IDENT] Node: 'model'
    |  |     |  \-[IDENT] Node: 'UserModel'
    |  |     \-[ALIAS] Node: 'generatedAlias0'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'generatedAlias0'
    hibernate 로그   -->
    <logger name="org.hibernate.hql.internal.ast" level="info" additivity="false"/>

    <!-- hibernate 설정 정보. -->
    <logger name="org.hibernate.cfg" level="info" additivity="false"/>

    <!--
        o.h.p.w.spi.MetamodelGraphWalker - Visiting attribute path : acceptYn
        model member 변수 보기.
	-->
    <logger name="org.hibernate.persister" level="info" additivity="false"/>

    <!--
    	DEBUG org.hibernate.loader.Loader - Result row: EntityKey[com.varsql.web.model.DBTypeModel#008]
		DEBUG org.hibernate.loader.Loader - Result set row: 8

		result log
     -->
    <logger name="org.hibernate.loader" level="info" additivity="false"/>

    <!--
	    DEBUG o.h.engine.internal.TwoPhaseLoad - Resolving attributes for [com.varsql.web.model.DBTypeModel#001]
		DEBUG o.h.engine.internal.TwoPhaseLoad - Processing attribute `langkey` : value = dbtype.db2

		sql result log
     -->
    <logger name="org.hibernate.engine.internal" level="info" additivity="false"/>

    <!--
        DEBUG o.h.i.f.i.DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]

		id IDGenerator view
	-->
    <logger name="org.hibernate.id.factory.internal" level="info" additivity="false"/>

    <logger name="org.hibernate" level="info"/>
	<logger name="org.hibernate.type.descriptor" level="error"/>
	<logger name="org.hibernate.type.descriptor.sql" level="trace" additivity="false"/>
	<logger name="org.hibernate.type.descriptor.sql.BasicExtractor" level="error" additivity="false"/>
    <logger name="org.hibernate.SQL" level="DEBUG"/>

	<!-- apache log // start -->
    <logger name="org.apache.tiles" level="info" additivity="false"/>
    <logger name="org.apache" level="info" additivity="false"/>
	<!-- apache log // end  -->

    <logger name="com.varsql.web.configuration" level="info" additivity="false"/>

   <if condition='"local".equals("${runtime}")'>
        <then>
			<root level="debug">
				<appender-ref ref="FILEOUT" />
				<appender-ref ref="STDOUT" />
			</root>
        </then>
        <else>
            <root level="error">
				<appender-ref ref="FILEOUT" />
			</root>
        </else>
    </if>
</configuration>