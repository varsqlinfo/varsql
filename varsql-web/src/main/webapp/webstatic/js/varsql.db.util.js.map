{"version":3,"file":"varsql.db.util.js","mappings":"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","sources":["webpack://VARSQLUtils/webpack/universalModuleDefinition","webpack://VARSQLUtils/./src/constants.ts","webpack://VARSQLUtils/./src/core/sql/db/standard.splitter.ts","webpack://VARSQLUtils/./src/core/sql/split/DefaultChecker.ts","webpack://VARSQLUtils/./src/core/sql/split/EndCheckTokenInfo.ts","webpack://VARSQLUtils/./src/core/sql/split/Splitter.ts","webpack://VARSQLUtils/./src/core/sql/split/TextCheckTokenInfo.ts","webpack://VARSQLUtils/./src/core/sql/split/create/CreateChecker.ts","webpack://VARSQLUtils/./src/core/sql/split/create/CreateFunctionChecker.ts","webpack://VARSQLUtils/./src/core/sql/split/create/CreateProcedureChecker.ts","webpack://VARSQLUtils/./src/core/sql/split/create/CreateTriggerCheckerr.ts","webpack://VARSQLUtils/./src/core/utils.ts","webpack://VARSQLUtils/./src/index.ts","webpack://VARSQLUtils/./src/splitOptions.ts","webpack://VARSQLUtils/./src/sqlParamChecker.ts","webpack://VARSQLUtils/./src/sqlSplitter.ts","webpack://VARSQLUtils/webpack/bootstrap","webpack://VARSQLUtils/webpack/before-startup","webpack://VARSQLUtils/webpack/startup","webpack://VARSQLUtils/webpack/after-startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VARSQLUtils\"] = factory();\n\telse\n\t\troot[\"VARSQLUtils\"] = factory();\n})(self, () => {\nreturn ","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DEFAULT_END_SPLITTER = exports.CREATE_END_CHECK_KEYWORD = exports.DEFAULT_TEXT_CHECK_TOKEN = exports.TAB_CHAR = exports.LINE_CHAR = void 0;\r\nconst CreateChecker_1 = __importDefault(require(\"./core/sql/split/create/CreateChecker\"));\r\nconst CreateFunctionChecker_1 = __importDefault(require(\"./core/sql/split/create/CreateFunctionChecker\"));\r\nconst CreateTriggerCheckerr_1 = __importDefault(require(\"./core/sql/split/create/CreateTriggerCheckerr\"));\r\nconst CreateProcedureChecker_1 = __importDefault(require(\"./core/sql/split/create/CreateProcedureChecker\"));\r\nconst DefaultChecker_1 = __importDefault(require(\"./core/sql/split/DefaultChecker\"));\r\n// line char\r\nexports.LINE_CHAR = '\\n';\r\n// tab char\r\nexports.TAB_CHAR = '\\t';\r\nexports.DEFAULT_TEXT_CHECK_TOKEN = {\r\n    \"'\": {\r\n        keepWord: true,\r\n        checkEnd(beforeCh1, c1, c2) {\r\n            return beforeCh1 != \"\\\\\" && c1 == \"'\";\r\n        },\r\n    },\r\n    '\"': {\r\n        keepWord: true,\r\n        checkEnd(beforeCh1, c1, c2) {\r\n            return beforeCh1 != \"\\\\\" && c1 == '\"';\r\n        },\r\n    },\r\n    \"--\": {\r\n        keepWord: true,\r\n        endToken: exports.LINE_CHAR,\r\n    },\r\n    \"/*\": {\r\n        keepWord: true,\r\n        endToken: \"*/\",\r\n    },\r\n    \"#{\": {\r\n        keepWord: true,\r\n        endToken: \"}\",\r\n    },\r\n    \"${\": {\r\n        keepWord: true,\r\n        endToken: \"}\",\r\n    },\r\n};\r\nexports.CREATE_END_CHECK_KEYWORD = {\r\n    'if': {\r\n        end: 'if'\r\n    },\r\n    'loop': {\r\n        end: 'loop'\r\n    },\r\n    'case': {\r\n        end: ''\r\n    }\r\n};\r\nexports.DEFAULT_END_SPLITTER = {\r\n    'default': new DefaultChecker_1.default(),\r\n    'create': new CreateChecker_1.default(),\r\n    'create_function': new CreateFunctionChecker_1.default(exports.CREATE_END_CHECK_KEYWORD),\r\n    'create_trigger': new CreateTriggerCheckerr_1.default(exports.CREATE_END_CHECK_KEYWORD),\r\n    'create_procedure': new CreateProcedureChecker_1.default(exports.CREATE_END_CHECK_KEYWORD)\r\n};\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst constants_1 = require(\"../../../constants\");\r\nconst Splitter_1 = __importDefault(require(\"../split/Splitter\"));\r\nconst TextCheckTokenInfo_1 = require(\"../split/TextCheckTokenInfo\");\r\nconst EndCheckTokenInfo_1 = require(\"../split/EndCheckTokenInfo\");\r\nclass StandardSplitter extends Splitter_1.default {\r\n    checker() {\r\n        return {\r\n            textChecker: new TextCheckTokenInfo_1.TextCheckTokenInfo(constants_1.DEFAULT_TEXT_CHECK_TOKEN),\r\n            endChecker: new EndCheckTokenInfo_1.EndCheckTokenInfo(constants_1.DEFAULT_END_SPLITTER),\r\n        };\r\n    }\r\n}\r\nexports.default = StandardSplitter;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst constants_1 = require(\"../../../constants\");\r\n// create function check token\r\nclass DefaultChecker {\r\n    constructor() {\r\n        this.lineCount = 0;\r\n    }\r\n    init() {\r\n        this.lineCount = 0;\r\n    }\r\n    checkEnd(word, beforeWord, c1, beforeCh1, i, sql) {\r\n        if (/\\s/.test(c1)) {\r\n            if (this.lineCount > 0 && c1 == constants_1.LINE_CHAR) {\r\n                this.lineCount += 1;\r\n            }\r\n            else if (c1 == constants_1.LINE_CHAR) {\r\n                this.lineCount = 1;\r\n            }\r\n            return this.lineCount > 1 ? true : false; // 공백 2줄 이상이면 분리\r\n        }\r\n        this.lineCount = 0;\r\n        if (beforeCh1 == constants_1.LINE_CHAR && beforeCh1 == c1) {\r\n            return true;\r\n        }\r\n        return c1 == \";\";\r\n    }\r\n}\r\nexports.default = DefaultChecker;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EndCheckTokenInfo = void 0;\r\nclass EndCheckTokenInfo {\r\n    constructor(tokens) {\r\n        this.tokens = {};\r\n        this.tokens = tokens;\r\n    }\r\n    put(key, value) {\r\n        this.tokens[key] = value;\r\n        return this;\r\n    }\r\n    hasKey(key) {\r\n        return this.tokens.hasOwnProperty(key);\r\n    }\r\n    get(key) {\r\n        let endCheck = this.tokens[key];\r\n        endCheck.init();\r\n        return endCheck;\r\n    }\r\n}\r\nexports.EndCheckTokenInfo = EndCheckTokenInfo;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils_1 = require(\"../../utils\");\r\nconst constants_1 = require(\"../../../constants\");\r\nclass Splitter {\r\n    constructor(cfg) {\r\n        this.cfg = cfg;\r\n        let checker = this.checker();\r\n        this.textChecker = checker.textChecker;\r\n        this.endChecker = checker.endChecker;\r\n    }\r\n    checker() {\r\n        throw new Error(\"checker() not implemented by subclass\");\r\n    }\r\n    split(sql, findLine, findCharPos) {\r\n        findLine = typeof findLine == \"undefined\" ? 0 : findLine - 1;\r\n        findCharPos = typeof findCharPos == \"undefined\" ? 0 : findCharPos - 1;\r\n        findLine = findLine < 1 ? 0 : findLine;\r\n        findCharPos = findCharPos < 1 ? 0 : findCharPos;\r\n        let statementList = [];\r\n        let statement = [];\r\n        let g_idx = 0;\r\n        let sqlLen = sql.length;\r\n        let lineIdx = 0;\r\n        let startLine = 0;\r\n        let startCharPos = 0;\r\n        let emptyLineCount = 0;\r\n        let c1 = \"\", c2 = \"\";\r\n        let beforeCh1;\r\n        let orginCh;\r\n        let startCommand = false;\r\n        let command = \"\";\r\n        let word = \"\";\r\n        let beforeWord = \"\";\r\n        let endCheckerInter = null;\r\n        let textCheckerInter = null;\r\n        let currentEndTokenKey = \"\";\r\n        let lineStartCharIdx = 0;\r\n        let overflowFlag = false; //찾는 문자 영역을 벋어 났는지 여부\r\n        let overflowNextSplitChk = false; // 찾는 문자 라인에 쿼리가 있는지 여부\r\n        let lineStr = \"\";\r\n        let lineStrLength = 0;\r\n        for (let i = 0; i < sqlLen; i++) {\r\n            beforeCh1 = c1; // 이전 값 넣기.\r\n            orginCh = sql.charAt(i);\r\n            c1 = orginCh.toLowerCase();\r\n            c2 = c1 + (i + 1 < sqlLen ? sql.charAt(i + 1) : \"0\");\r\n            c2 = c2.toLowerCase();\r\n            if (c1 == constants_1.LINE_CHAR) {\r\n                lineStartCharIdx = i;\r\n                ++lineIdx;\r\n                let newLineIdx = sql.indexOf(constants_1.LINE_CHAR, i + 1);\r\n                lineStr = sql.substring(i + 1, newLineIdx > -1 ? newLineIdx : sqlLen);\r\n                lineStr = (0, utils_1.trim)(lineStr);\r\n                if (lineStr == \"\") {\r\n                    emptyLineCount += 1;\r\n                }\r\n                else {\r\n                    emptyLineCount = 0;\r\n                    lineStrLength = lineStr.length;\r\n                }\r\n            }\r\n            if (c1 == beforeCh1) {\r\n                g_idx++;\r\n                if (g_idx > 1000) {\r\n                    return [\r\n                        {\r\n                            command: \"error\",\r\n                            startLine: -1,\r\n                            startCharPos: -1,\r\n                            endLine: -1,\r\n                            endCharPos: -1,\r\n                            statement: \"split error\",\r\n                        },\r\n                    ];\r\n                }\r\n            }\r\n            else {\r\n                g_idx = 0;\r\n            }\r\n            if (textCheckerInter == null) {\r\n                if (this.textChecker.hasKey(c2) || this.textChecker.hasKey(c1)) {\r\n                    textCheckerInter =\r\n                        this.textChecker.get(c2) || this.textChecker.get(c1);\r\n                    if (textCheckerInter.keepWord !== false)\r\n                        statement.push(orginCh);\r\n                    continue;\r\n                }\r\n            }\r\n            else {\r\n                let check = false;\r\n                if (textCheckerInter.checkEnd &&\r\n                    textCheckerInter.checkEnd(beforeCh1, c1, c2)) {\r\n                    check = true;\r\n                }\r\n                else if (textCheckerInter.endToken == c2 ||\r\n                    textCheckerInter.endToken == c1) {\r\n                    check = true;\r\n                }\r\n                if (check) {\r\n                    if (textCheckerInter.keepWord === false) {\r\n                        i += textCheckerInter.endToken\r\n                            ? textCheckerInter.endToken.length - 1\r\n                            : 0;\r\n                    }\r\n                    else {\r\n                        statement.push(orginCh);\r\n                    }\r\n                    textCheckerInter = null;\r\n                }\r\n                else {\r\n                    if (textCheckerInter.keepWord !== false)\r\n                        statement.push(orginCh);\r\n                }\r\n                continue;\r\n            }\r\n            statement.push(orginCh);\r\n            /*\r\n              if(/[(),]/.test(c1)){\r\n                  continue;\r\n              }\r\n              */\r\n            // 공백체크. ( 체크\r\n            if (/[\\s(]/.test(c1)) {\r\n                if (startCommand)\r\n                    startCommand = false;\r\n                beforeWord = word;\r\n                word = \"\";\r\n            }\r\n            else {\r\n                if (command == \"\") {\r\n                    if (/[;/!@#$%^&()+=?\\-]/.test(c1)) {\r\n                        // command 시작 문자가 특수 문자면 command로 처리 안함.\r\n                        continue;\r\n                    }\r\n                    startLine = lineIdx;\r\n                    statement = [];\r\n                    statement.push(orginCh);\r\n                    startCharPos = i - lineStartCharIdx;\r\n                    startCommand = true;\r\n                }\r\n                if (startCommand) {\r\n                    command += c1;\r\n                }\r\n                word += c1;\r\n            }\r\n            if (startCommand === false && endCheckerInter == null && command != \"\") {\r\n                currentEndTokenKey = command;\r\n                if (this.endChecker.hasKey(command)) {\r\n                    endCheckerInter = this.endChecker.get(command);\r\n                }\r\n                else {\r\n                    endCheckerInter = this.endChecker.get(\"default\");\r\n                }\r\n            }\r\n            else {\r\n                if (this.endChecker.hasKey(currentEndTokenKey + \"_\" + word)) {\r\n                    currentEndTokenKey = currentEndTokenKey + \"_\" + word;\r\n                    endCheckerInter = this.endChecker.get(currentEndTokenKey);\r\n                }\r\n            }\r\n            if (!overflowNextSplitChk &&\r\n                !overflowFlag &&\r\n                findLine != 0 &&\r\n                lineIdx >= findLine) {\r\n                overflowFlag = true;\r\n                if (command.trim() == \"\" && statementList.length > 0) {\r\n                    // 라인 끝 체크, 체크 해서 문자가 있으면 다음 query 리턴하게 처리.\r\n                    let firstChar = lineStr.charAt(0);\r\n                    if (lineStr != \"\" && !/[;/!@#$%^&()+=?\\-]/.test(firstChar)) {\r\n                        overflowNextSplitChk = true;\r\n                        continue;\r\n                    }\r\n                    if ((0, utils_1.trim)(lineStr) == \"\") {\r\n                        return [statementList[statementList.length - 1]];\r\n                    }\r\n                }\r\n            }\r\n            if ((endCheckerInter &&\r\n                endCheckerInter.checkEnd(word, beforeWord, c1, beforeCh1, i, sql)) ||\r\n                i + 1 == sqlLen) {\r\n                let sqlSplitInfo = {\r\n                    command: command,\r\n                    startLine: startLine,\r\n                    startCharPos: startCharPos,\r\n                    endLine: lineIdx - emptyLineCount,\r\n                    endCharPos: lineStrLength,\r\n                    statement: statement.join(\"\"),\r\n                };\r\n                if (overflowFlag) {\r\n                    return [sqlSplitInfo];\r\n                }\r\n                if (findLine != 0) {\r\n                    if (startLine <= findLine && findLine <= lineIdx) {\r\n                        // 라인이 다를경우\r\n                        if (startLine == lineIdx && findLine == lineIdx) {\r\n                            if (startCharPos <= findCharPos &&\r\n                                findCharPos <= sqlSplitInfo.endCharPos) {\r\n                                return [sqlSplitInfo];\r\n                            }\r\n                        }\r\n                        else {\r\n                            return [sqlSplitInfo];\r\n                        }\r\n                    }\r\n                }\r\n                statementList.push(sqlSplitInfo);\r\n                command = \"\";\r\n                word == \"\";\r\n                statement = [];\r\n                endCheckerInter = null;\r\n                startCommand = false;\r\n            }\r\n        }\r\n        return statementList;\r\n    }\r\n}\r\nexports.default = Splitter;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TextCheckTokenInfo = void 0;\r\nclass TextCheckTokenInfo {\r\n    constructor(tokens) {\r\n        this.tokens = tokens;\r\n    }\r\n    put(key, value) {\r\n        this.tokens[key] = value;\r\n        return this;\r\n    }\r\n    hasKey(key) {\r\n        return this.tokens.hasOwnProperty(key);\r\n    }\r\n    get(key) {\r\n        return this.tokens[key];\r\n    }\r\n}\r\nexports.TextCheckTokenInfo = TextCheckTokenInfo;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// create check token\r\nclass CreateChecker {\r\n    constructor() {\r\n        this.idx = 0;\r\n    }\r\n    init() {\r\n        this.idx = 0;\r\n    }\r\n    checkEnd(word, beforeWord, c1, beforeCh1, i, sql) {\r\n        return c1 == '/' || c1 == ';';\r\n    }\r\n}\r\nexports.default = CreateChecker;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// create function check token\r\nclass CreateFunctionChecker {\r\n    constructor(endCheckKeywords) {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n        this.endCheckKeywords = endCheckKeywords;\r\n    }\r\n    init() {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n    }\r\n    checkEnd(word, beforeWord, c1, beforeCh1, i, sql) {\r\n        if ('begin' == word) {\r\n            this.begin = true;\r\n        }\r\n        else if (this.endCheckKeywords.hasOwnProperty(word)) {\r\n            if ('end' == beforeWord) {\r\n                this.tokenStack.pop();\r\n            }\r\n            else {\r\n                this.tokenStack.push(this.endCheckKeywords[word]);\r\n            }\r\n        }\r\n        else if ('end' == word) {\r\n            let popItem = this.tokenStack[this.tokenStack.length - 1];\r\n            if (popItem && popItem.end == '') {\r\n                this.tokenStack.pop();\r\n            }\r\n            this.endFlag = this.tokenStack.length == 0;\r\n        }\r\n        if (this.begin && this.endFlag && c1 == ';') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexports.default = CreateFunctionChecker;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// create function check token\r\nclass CreateProcedureChecker {\r\n    constructor(endCheckKeywords) {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n        this.endCheckKeywords = endCheckKeywords;\r\n    }\r\n    init() {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n    }\r\n    checkEnd(word, beforeWord, c1, beforeCh1, i, sql) {\r\n        if ('begin' == word) {\r\n            this.begin = true;\r\n        }\r\n        else if (this.endCheckKeywords.hasOwnProperty(word)) {\r\n            if ('end' == beforeWord) {\r\n                this.tokenStack.pop();\r\n            }\r\n            else {\r\n                this.tokenStack.push(this.endCheckKeywords[word]);\r\n            }\r\n        }\r\n        else if ('end' == word) {\r\n            var popItem = this.tokenStack[this.tokenStack.length - 1];\r\n            if (popItem && popItem.end == '') {\r\n                this.tokenStack.pop();\r\n            }\r\n            this.endFlag = this.tokenStack.length == 0;\r\n        }\r\n        if (this.begin && this.endFlag && c1 == ';') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexports.default = CreateProcedureChecker;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// create function check token\r\nclass CreateTriggerCheckerr {\r\n    constructor(endCheckKeywords) {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n        this.endCheckKeywords = endCheckKeywords;\r\n    }\r\n    init() {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n    }\r\n    checkEnd(word, beforeWord, c1, beforeCh1, i, sql) {\r\n        if ('begin' == word) {\r\n            this.begin = true;\r\n        }\r\n        else if (this.endCheckKeywords.hasOwnProperty(word)) {\r\n            if ('end' == beforeWord) {\r\n                this.tokenStack.pop();\r\n            }\r\n            else {\r\n                this.tokenStack.push(this.endCheckKeywords[word]);\r\n            }\r\n        }\r\n        else if ('end' == word) {\r\n            var popItem = this.tokenStack[this.tokenStack.length - 1];\r\n            if (popItem && popItem.end == '') {\r\n                this.tokenStack.pop();\r\n            }\r\n            this.endFlag = this.tokenStack.length == 0;\r\n        }\r\n        if (this.begin && this.endFlag && c1 == ';') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexports.default = CreateTriggerCheckerr;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.millitimeToFormat = exports.removeAllComment = exports.removeComment = exports.removeMultilineComment = exports.equalizeWhitespace = exports.isNewline = exports.trim = exports.isNumber = void 0;\r\nconst isNumber = (value) => typeof value === 'number';\r\nexports.isNumber = isNumber;\r\n// string trim\r\nconst trim = (s) => {\r\n    return s.replace(/^\\s+|\\s+$/g, \"\");\r\n};\r\nexports.trim = trim;\r\nconst isNewline = (s) => {\r\n    return /\\r|\\n/.test(s);\r\n};\r\nexports.isNewline = isNewline;\r\n// space -> ' '\r\nconst equalizeWhitespace = (s) => {\r\n    return (0, exports.trim)(s).replace(/\\s+/gu, ' ');\r\n};\r\nexports.equalizeWhitespace = equalizeWhitespace;\r\n// multi line comment remove (/* */)\r\nconst removeMultilineComment = (s) => {\r\n    return s.replace(/\\/\\*(.|[\\r\\n])*?\\\\*\\//gm, '');\r\n};\r\nexports.removeMultilineComment = removeMultilineComment;\r\n// comment remove (--)\r\nconst removeComment = (s) => {\r\n    return s.replace(/--.*\\n/gm, '');\r\n};\r\nexports.removeComment = removeComment;\r\n// comment all remove (--, /**/)\r\nconst removeAllComment = (s) => {\r\n    return (0, exports.removeComment)((0, exports.removeMultilineComment)(s));\r\n};\r\nexports.removeAllComment = removeAllComment;\r\nconst millitimeToFormat = (milliTime, format) => {\r\n    var inDate = new Date(milliTime);\r\n    var z = {\r\n        M: inDate.getMonth() + 1,\r\n        d: inDate.getDate(),\r\n        h: inDate.getHours(),\r\n        m: inDate.getMinutes(),\r\n        s: inDate.getSeconds()\r\n    };\r\n    format = format.replace(/(M+|d+|h+|m+|s+)/g, function (v) {\r\n        return ((v.length > 1 ? \"0\" : \"\") + eval('z.' + v.slice(-1))).slice(-2);\r\n    });\r\n    return format.replace(/(y+)/g, function (v) {\r\n        return inDate.getFullYear().toString().slice(-v.length);\r\n    });\r\n};\r\nexports.millitimeToFormat = millitimeToFormat;\r\n","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./sqlSplitter\"), exports);\r\n__exportStar(require(\"./splitOptions\"), exports);\r\n__exportStar(require(\"./sqlParamChecker\"), exports);\r\n__exportStar(require(\"./core/utils\"), exports);\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getSqlParam = void 0;\r\nconst utils_1 = require(\"./core/utils\");\r\n// split function\r\nconst getSqlParam = (sql) => {\r\n    if (typeof sql !== \"string\") {\r\n        throw new Error(\"Invalid sql argument. Expected string, instead got \" + typeof sql);\r\n    }\r\n    sql = (0, utils_1.removeAllComment)(sql);\r\n    var sqlParam = {};\r\n    var matchArr = sql.match(/[#|$]{(.+?)}/gi);\r\n    if (matchArr) {\r\n        for (var i = 0; i < matchArr.length; i++) {\r\n            var propertyVal = matchArr[i].replace(/[$|#|{|}]/gi, '');\r\n            propertyVal = propertyVal.replace(/\\s/g, ''); // 공백 제거\r\n            const allProperty = propertyVal.split(',');\r\n            let propertyKey = '';\r\n            let propertyMode = '';\r\n            for (var j = 0; j < allProperty.length; j++) {\r\n                var propSplitArr = allProperty[j].split(\"=\");\r\n                var key = propSplitArr[0];\r\n                if (propSplitArr.length > 1) {\r\n                    var val = propSplitArr[1];\r\n                    if (\"MODE\" == key.toUpperCase()) {\r\n                        propertyMode = propSplitArr[1];\r\n                    }\r\n                }\r\n                else {\r\n                    propertyKey = key;\r\n                }\r\n            }\r\n            if (!sqlParam.hasOwnProperty(propertyKey)) {\r\n                let sqlParamInfo = {\r\n                    key: propertyKey,\r\n                    mode: propertyMode\r\n                };\r\n                sqlParam[propertyKey] = sqlParamInfo;\r\n            }\r\n        }\r\n    }\r\n    return sqlParam;\r\n};\r\nexports.getSqlParam = getSqlParam;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.split = void 0;\r\nconst standard_splitter_1 = __importDefault(require(\"./core/sql/db/standard.splitter\"));\r\nlet splitters = {\r\n    standard: standard_splitter_1.default,\r\n};\r\n// default option\r\nconst defaultOptions = {\r\n    language: \"standard\",\r\n    keepComment: true,\r\n    findLine: -1,\r\n    findCharPos: -1,\r\n};\r\n// split function\r\nconst split = (sql, cfg = {}) => {\r\n    if (typeof sql !== \"string\") {\r\n        throw new Error(\"Invalid sql argument. Expected string, instead got \" + typeof sql);\r\n    }\r\n    const options = Object.assign(Object.assign({}, defaultOptions), cfg);\r\n    const Splitter = splitters[options.language];\r\n    return new Splitter(options).split(sql, cfg.findLine, cfg.findCharPos);\r\n};\r\nexports.split = split;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.ts\");\n",""],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","DEFAULT_END_SPLITTER","CREATE_END_CHECK_KEYWORD","DEFAULT_TEXT_CHECK_TOKEN","TAB_CHAR","LINE_CHAR","CreateChecker_1","require","CreateFunctionChecker_1","CreateTriggerCheckerr_1","CreateProcedureChecker_1","DefaultChecker_1","keepWord","checkEnd","beforeCh1","c1","c2","endToken","end","constants_1","Splitter_1","TextCheckTokenInfo_1","EndCheckTokenInfo_1","StandardSplitter","textChecker","TextCheckTokenInfo","endChecker","EndCheckTokenInfo","DefaultChecker","lineCount","word","beforeWord","i","sql","test","tokens","key","hasOwnProperty","endCheck","init","utils_1","Splitter","cfg","checker","Error","findLine","findCharPos","statementList","statement","g_idx","sqlLen","length","lineIdx","startLine","startCharPos","emptyLineCount","orginCh","startCommand","command","endCheckerInter","textCheckerInter","currentEndTokenKey","lineStartCharIdx","overflowFlag","overflowNextSplitChk","lineStr","lineStrLength","charAt","toLowerCase","newLineIdx","indexOf","substring","trim","endLine","endCharPos","hasKey","get","push","check","firstChar","sqlSplitInfo","join","CreateChecker","idx","CreateFunctionChecker","endCheckKeywords","begin","endFlag","tokenStack","pop","popItem","CreateProcedureChecker","CreateTriggerCheckerr","millitimeToFormat","removeAllComment","removeComment","removeMultilineComment","equalizeWhitespace","isNewline","isNumber","s","replace","milliTime","format","inDate","Date","z","M","getMonth","d","getDate","h","getHours","m","getMinutes","getSeconds","v","eval","slice","getFullYear","toString","__createBinding","create","o","k","k2","undefined","desc","getOwnPropertyDescriptor","writable","configurable","enumerable","__exportStar","p","prototype","call","getSqlParam","sqlParam","matchArr","match","propertyVal","allProperty","split","propertyKey","propertyMode","j","propSplitArr","val","toUpperCase","sqlParamInfo","mode","standard_splitter_1","splitters","standard","defaultOptions","language","keepComment","options","assign"],"sourceRoot":""}