{"version":3,"file":"varsql.db.util.min.js","mappings":"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","sources":["webpack://VARSQLUtils/webpack/universalModuleDefinition","webpack://VARSQLUtils/./src/constants.ts","webpack://VARSQLUtils/./src/core/sql/db/standard.splitter.ts","webpack://VARSQLUtils/./src/core/sql/split/DefaultChecker.ts","webpack://VARSQLUtils/./src/core/sql/split/EndCheckTokenInfo.ts","webpack://VARSQLUtils/./src/core/sql/split/Splitter.ts","webpack://VARSQLUtils/./src/core/sql/split/TextCheckTokenInfo.ts","webpack://VARSQLUtils/./src/core/sql/split/create/CreateChecker.ts","webpack://VARSQLUtils/./src/core/sql/split/create/CreateFunctionChecker.ts","webpack://VARSQLUtils/./src/core/sql/split/create/CreateProcedureChecker.ts","webpack://VARSQLUtils/./src/core/sql/split/create/CreateTriggerCheckerr.ts","webpack://VARSQLUtils/./src/core/utils.ts","webpack://VARSQLUtils/./src/index.ts","webpack://VARSQLUtils/./src/splitOptions.ts","webpack://VARSQLUtils/./src/sqlParamChecker.ts","webpack://VARSQLUtils/./src/sqlSplitter.ts","webpack://VARSQLUtils/webpack/bootstrap","webpack://VARSQLUtils/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VARSQLUtils\"] = factory();\n\telse\n\t\troot[\"VARSQLUtils\"] = factory();\n})(self, () => {\nreturn ","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DEFAULT_END_SPLITTER = exports.CREATE_END_CHECK_KEYWORD = exports.DEFAULT_TEXT_CHECK_TOKEN = exports.TAB_CHAR = exports.LINE_CHAR = void 0;\r\nconst CreateChecker_1 = __importDefault(require(\"./core/sql/split/create/CreateChecker\"));\r\nconst CreateFunctionChecker_1 = __importDefault(require(\"./core/sql/split/create/CreateFunctionChecker\"));\r\nconst CreateTriggerCheckerr_1 = __importDefault(require(\"./core/sql/split/create/CreateTriggerCheckerr\"));\r\nconst CreateProcedureChecker_1 = __importDefault(require(\"./core/sql/split/create/CreateProcedureChecker\"));\r\nconst DefaultChecker_1 = __importDefault(require(\"./core/sql/split/DefaultChecker\"));\r\n// line char\r\nexports.LINE_CHAR = '\\n';\r\n// tab char\r\nexports.TAB_CHAR = '\\t';\r\nexports.DEFAULT_TEXT_CHECK_TOKEN = {\r\n    \"'\": {\r\n        keepWord: true,\r\n        checkEnd(beforeCh1, c1, c2) {\r\n            return beforeCh1 != \"\\\\\" && c1 == \"'\";\r\n        },\r\n    },\r\n    '\"': {\r\n        keepWord: true,\r\n        checkEnd(beforeCh1, c1, c2) {\r\n            return beforeCh1 != \"\\\\\" && c1 == '\"';\r\n        },\r\n    },\r\n    \"--\": {\r\n        keepWord: true,\r\n        endToken: exports.LINE_CHAR,\r\n    },\r\n    \"/*\": {\r\n        keepWord: true,\r\n        endToken: \"*/\",\r\n    },\r\n    \"#{\": {\r\n        keepWord: true,\r\n        endToken: \"}\",\r\n    },\r\n    \"${\": {\r\n        keepWord: true,\r\n        endToken: \"}\",\r\n    },\r\n};\r\nexports.CREATE_END_CHECK_KEYWORD = {\r\n    'if': {\r\n        end: 'if'\r\n    },\r\n    'loop': {\r\n        end: 'loop'\r\n    },\r\n    'case': {\r\n        end: ''\r\n    }\r\n};\r\nexports.DEFAULT_END_SPLITTER = {\r\n    'default': new DefaultChecker_1.default(),\r\n    'create': new CreateChecker_1.default(),\r\n    'create_function': new CreateFunctionChecker_1.default(exports.CREATE_END_CHECK_KEYWORD),\r\n    'create_trigger': new CreateTriggerCheckerr_1.default(exports.CREATE_END_CHECK_KEYWORD),\r\n    'create_procedure': new CreateProcedureChecker_1.default(exports.CREATE_END_CHECK_KEYWORD)\r\n};\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst constants_1 = require(\"../../../constants\");\r\nconst Splitter_1 = __importDefault(require(\"../split/Splitter\"));\r\nconst TextCheckTokenInfo_1 = require(\"../split/TextCheckTokenInfo\");\r\nconst EndCheckTokenInfo_1 = require(\"../split/EndCheckTokenInfo\");\r\nclass StandardSplitter extends Splitter_1.default {\r\n    checker() {\r\n        return {\r\n            textChecker: new TextCheckTokenInfo_1.TextCheckTokenInfo(constants_1.DEFAULT_TEXT_CHECK_TOKEN),\r\n            endChecker: new EndCheckTokenInfo_1.EndCheckTokenInfo(constants_1.DEFAULT_END_SPLITTER),\r\n        };\r\n    }\r\n}\r\nexports.default = StandardSplitter;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst constants_1 = require(\"../../../constants\");\r\n// create function check token\r\nclass DefaultChecker {\r\n    constructor() {\r\n        this.lineCount = 0;\r\n    }\r\n    init() {\r\n        this.lineCount = 0;\r\n    }\r\n    checkEnd(word, beforeWord, c1, beforeCh1, i, sql) {\r\n        if (/\\s/.test(c1)) {\r\n            if (this.lineCount > 0 && c1 == constants_1.LINE_CHAR) {\r\n                this.lineCount += 1;\r\n            }\r\n            else if (c1 == constants_1.LINE_CHAR) {\r\n                this.lineCount = 1;\r\n            }\r\n            return this.lineCount > 1 ? true : false; // 공백 2줄 이상이면 분리\r\n        }\r\n        this.lineCount = 0;\r\n        if (beforeCh1 == constants_1.LINE_CHAR && beforeCh1 == c1) {\r\n            return true;\r\n        }\r\n        return c1 == \";\";\r\n    }\r\n}\r\nexports.default = DefaultChecker;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EndCheckTokenInfo = void 0;\r\nclass EndCheckTokenInfo {\r\n    constructor(tokens) {\r\n        this.tokens = {};\r\n        this.tokens = tokens;\r\n    }\r\n    put(key, value) {\r\n        this.tokens[key] = value;\r\n        return this;\r\n    }\r\n    hasKey(key) {\r\n        return this.tokens.hasOwnProperty(key);\r\n    }\r\n    get(key) {\r\n        let endCheck = this.tokens[key];\r\n        endCheck.init();\r\n        return endCheck;\r\n    }\r\n}\r\nexports.EndCheckTokenInfo = EndCheckTokenInfo;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils_1 = require(\"../../utils\");\r\nconst constants_1 = require(\"../../../constants\");\r\nclass Splitter {\r\n    constructor(cfg) {\r\n        this.cfg = cfg;\r\n        let checker = this.checker();\r\n        this.textChecker = checker.textChecker;\r\n        this.endChecker = checker.endChecker;\r\n    }\r\n    checker() {\r\n        throw new Error(\"checker() not implemented by subclass\");\r\n    }\r\n    split(sql, findLine, findCharPos) {\r\n        findLine = typeof findLine == \"undefined\" ? 0 : findLine - 1;\r\n        findCharPos = typeof findCharPos == \"undefined\" ? 0 : findCharPos - 1;\r\n        findLine = findLine < 1 ? 0 : findLine;\r\n        findCharPos = findCharPos < 1 ? 0 : findCharPos;\r\n        let statementList = [];\r\n        let statement = [];\r\n        let g_idx = 0;\r\n        let sqlLen = sql.length;\r\n        let lineIdx = 0;\r\n        let startLine = 0;\r\n        let startCharPos = 0;\r\n        let emptyLineCount = 0;\r\n        let c1 = \"\", c2 = \"\";\r\n        let beforeCh1;\r\n        let orginCh;\r\n        let startCommand = false;\r\n        let command = \"\";\r\n        let word = \"\";\r\n        let beforeWord = \"\";\r\n        let endCheckerInter = null;\r\n        let textCheckerInter = null;\r\n        let currentEndTokenKey = \"\";\r\n        let lineStartCharIdx = 0;\r\n        let overflowFlag = false; //찾는 문자 영역을 벋어 났는지 여부\r\n        let overflowNextSplitChk = false; // 찾는 문자 라인에 쿼리가 있는지 여부\r\n        let lineStr = \"\";\r\n        let lineStrLength = 0;\r\n        for (let i = 0; i < sqlLen; i++) {\r\n            beforeCh1 = c1; // 이전 값 넣기.\r\n            orginCh = sql.charAt(i);\r\n            c1 = orginCh.toLowerCase();\r\n            c2 = c1 + (i + 1 < sqlLen ? sql.charAt(i + 1) : \"0\");\r\n            c2 = c2.toLowerCase();\r\n            if (c1 == constants_1.LINE_CHAR) {\r\n                lineStartCharIdx = i;\r\n                ++lineIdx;\r\n                let newLineIdx = sql.indexOf(constants_1.LINE_CHAR, i + 1);\r\n                lineStr = sql.substring(i + 1, newLineIdx > -1 ? newLineIdx : sqlLen);\r\n                lineStr = (0, utils_1.trim)(lineStr);\r\n                if (lineStr == \"\") {\r\n                    emptyLineCount += 1;\r\n                }\r\n                else {\r\n                    emptyLineCount = 0;\r\n                    lineStrLength = lineStr.length;\r\n                }\r\n            }\r\n            if (c1 == beforeCh1) {\r\n                g_idx++;\r\n                if (g_idx > 1000) {\r\n                    return [\r\n                        {\r\n                            command: \"error\",\r\n                            startLine: -1,\r\n                            startCharPos: -1,\r\n                            endLine: -1,\r\n                            endCharPos: -1,\r\n                            statement: \"split error\",\r\n                        },\r\n                    ];\r\n                }\r\n            }\r\n            else {\r\n                g_idx = 0;\r\n            }\r\n            if (textCheckerInter == null) {\r\n                if (this.textChecker.hasKey(c2) || this.textChecker.hasKey(c1)) {\r\n                    textCheckerInter =\r\n                        this.textChecker.get(c2) || this.textChecker.get(c1);\r\n                    if (textCheckerInter.keepWord !== false)\r\n                        statement.push(orginCh);\r\n                    continue;\r\n                }\r\n            }\r\n            else {\r\n                let check = false;\r\n                if (textCheckerInter.checkEnd &&\r\n                    textCheckerInter.checkEnd(beforeCh1, c1, c2)) {\r\n                    check = true;\r\n                }\r\n                else if (textCheckerInter.endToken == c2 ||\r\n                    textCheckerInter.endToken == c1) {\r\n                    check = true;\r\n                }\r\n                if (check) {\r\n                    if (textCheckerInter.keepWord === false) {\r\n                        i += textCheckerInter.endToken\r\n                            ? textCheckerInter.endToken.length - 1\r\n                            : 0;\r\n                    }\r\n                    else {\r\n                        statement.push(orginCh);\r\n                    }\r\n                    textCheckerInter = null;\r\n                }\r\n                else {\r\n                    if (textCheckerInter.keepWord !== false)\r\n                        statement.push(orginCh);\r\n                }\r\n                continue;\r\n            }\r\n            statement.push(orginCh);\r\n            /*\r\n              if(/[(),]/.test(c1)){\r\n                  continue;\r\n              }\r\n              */\r\n            // 공백체크. ( 체크\r\n            if (/[\\s(]/.test(c1)) {\r\n                if (startCommand)\r\n                    startCommand = false;\r\n                beforeWord = word;\r\n                word = \"\";\r\n            }\r\n            else {\r\n                if (command == \"\") {\r\n                    if (/[;/!@#$%^&()+=?\\-]/.test(c1)) {\r\n                        // command 시작 문자가 특수 문자면 command로 처리 안함.\r\n                        continue;\r\n                    }\r\n                    startLine = lineIdx;\r\n                    statement = [];\r\n                    statement.push(orginCh);\r\n                    startCharPos = i - lineStartCharIdx;\r\n                    startCommand = true;\r\n                }\r\n                if (startCommand) {\r\n                    command += c1;\r\n                }\r\n                word += c1;\r\n            }\r\n            if (startCommand === false && endCheckerInter == null && command != \"\") {\r\n                currentEndTokenKey = command;\r\n                if (this.endChecker.hasKey(command)) {\r\n                    endCheckerInter = this.endChecker.get(command);\r\n                }\r\n                else {\r\n                    endCheckerInter = this.endChecker.get(\"default\");\r\n                }\r\n            }\r\n            else {\r\n                if (this.endChecker.hasKey(currentEndTokenKey + \"_\" + word)) {\r\n                    currentEndTokenKey = currentEndTokenKey + \"_\" + word;\r\n                    endCheckerInter = this.endChecker.get(currentEndTokenKey);\r\n                }\r\n            }\r\n            if (!overflowNextSplitChk &&\r\n                !overflowFlag &&\r\n                findLine != 0 &&\r\n                lineIdx >= findLine) {\r\n                overflowFlag = true;\r\n                if (command.trim() == \"\" && statementList.length > 0) {\r\n                    // 라인 끝 체크, 체크 해서 문자가 있으면 다음 query 리턴하게 처리.\r\n                    let firstChar = lineStr.charAt(0);\r\n                    if (lineStr != \"\" && !/[;/!@#$%^&()+=?\\-]/.test(firstChar)) {\r\n                        overflowNextSplitChk = true;\r\n                        continue;\r\n                    }\r\n                    if ((0, utils_1.trim)(lineStr) == \"\") {\r\n                        return [statementList[statementList.length - 1]];\r\n                    }\r\n                }\r\n            }\r\n            if ((endCheckerInter &&\r\n                endCheckerInter.checkEnd(word, beforeWord, c1, beforeCh1, i, sql)) ||\r\n                i + 1 == sqlLen) {\r\n                let sqlSplitInfo = {\r\n                    command: command,\r\n                    startLine: startLine,\r\n                    startCharPos: startCharPos,\r\n                    endLine: lineIdx - emptyLineCount,\r\n                    endCharPos: lineStrLength,\r\n                    statement: statement.join(\"\"),\r\n                };\r\n                if (overflowFlag) {\r\n                    return [sqlSplitInfo];\r\n                }\r\n                if (findLine != 0) {\r\n                    if (startLine <= findLine && findLine <= lineIdx) {\r\n                        // 라인이 다를경우\r\n                        if (startLine == lineIdx && findLine == lineIdx) {\r\n                            if (startCharPos <= findCharPos &&\r\n                                findCharPos <= sqlSplitInfo.endCharPos) {\r\n                                return [sqlSplitInfo];\r\n                            }\r\n                        }\r\n                        else {\r\n                            return [sqlSplitInfo];\r\n                        }\r\n                    }\r\n                }\r\n                statementList.push(sqlSplitInfo);\r\n                command = \"\";\r\n                word == \"\";\r\n                statement = [];\r\n                endCheckerInter = null;\r\n                startCommand = false;\r\n            }\r\n        }\r\n        return statementList;\r\n    }\r\n}\r\nexports.default = Splitter;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TextCheckTokenInfo = void 0;\r\nclass TextCheckTokenInfo {\r\n    constructor(tokens) {\r\n        this.tokens = tokens;\r\n    }\r\n    put(key, value) {\r\n        this.tokens[key] = value;\r\n        return this;\r\n    }\r\n    hasKey(key) {\r\n        return this.tokens.hasOwnProperty(key);\r\n    }\r\n    get(key) {\r\n        return this.tokens[key];\r\n    }\r\n}\r\nexports.TextCheckTokenInfo = TextCheckTokenInfo;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// create check token\r\nclass CreateChecker {\r\n    constructor() {\r\n        this.idx = 0;\r\n    }\r\n    init() {\r\n        this.idx = 0;\r\n    }\r\n    checkEnd(word, beforeWord, c1, beforeCh1, i, sql) {\r\n        return c1 == '/' || c1 == ';';\r\n    }\r\n}\r\nexports.default = CreateChecker;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// create function check token\r\nclass CreateFunctionChecker {\r\n    constructor(endCheckKeywords) {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n        this.endCheckKeywords = endCheckKeywords;\r\n    }\r\n    init() {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n    }\r\n    checkEnd(word, beforeWord, c1, beforeCh1, i, sql) {\r\n        if ('begin' == word) {\r\n            this.begin = true;\r\n        }\r\n        else if (this.endCheckKeywords.hasOwnProperty(word)) {\r\n            if ('end' == beforeWord) {\r\n                this.tokenStack.pop();\r\n            }\r\n            else {\r\n                this.tokenStack.push(this.endCheckKeywords[word]);\r\n            }\r\n        }\r\n        else if ('end' == word) {\r\n            let popItem = this.tokenStack[this.tokenStack.length - 1];\r\n            if (popItem && popItem.end == '') {\r\n                this.tokenStack.pop();\r\n            }\r\n            this.endFlag = this.tokenStack.length == 0;\r\n        }\r\n        if (this.begin && this.endFlag && c1 == ';') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexports.default = CreateFunctionChecker;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// create function check token\r\nclass CreateProcedureChecker {\r\n    constructor(endCheckKeywords) {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n        this.endCheckKeywords = endCheckKeywords;\r\n    }\r\n    init() {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n    }\r\n    checkEnd(word, beforeWord, c1, beforeCh1, i, sql) {\r\n        if ('begin' == word) {\r\n            this.begin = true;\r\n        }\r\n        else if (this.endCheckKeywords.hasOwnProperty(word)) {\r\n            if ('end' == beforeWord) {\r\n                this.tokenStack.pop();\r\n            }\r\n            else {\r\n                this.tokenStack.push(this.endCheckKeywords[word]);\r\n            }\r\n        }\r\n        else if ('end' == word) {\r\n            var popItem = this.tokenStack[this.tokenStack.length - 1];\r\n            if (popItem && popItem.end == '') {\r\n                this.tokenStack.pop();\r\n            }\r\n            this.endFlag = this.tokenStack.length == 0;\r\n        }\r\n        if (this.begin && this.endFlag && c1 == ';') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexports.default = CreateProcedureChecker;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// create function check token\r\nclass CreateTriggerCheckerr {\r\n    constructor(endCheckKeywords) {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n        this.endCheckKeywords = endCheckKeywords;\r\n    }\r\n    init() {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n    }\r\n    checkEnd(word, beforeWord, c1, beforeCh1, i, sql) {\r\n        if ('begin' == word) {\r\n            this.begin = true;\r\n        }\r\n        else if (this.endCheckKeywords.hasOwnProperty(word)) {\r\n            if ('end' == beforeWord) {\r\n                this.tokenStack.pop();\r\n            }\r\n            else {\r\n                this.tokenStack.push(this.endCheckKeywords[word]);\r\n            }\r\n        }\r\n        else if ('end' == word) {\r\n            var popItem = this.tokenStack[this.tokenStack.length - 1];\r\n            if (popItem && popItem.end == '') {\r\n                this.tokenStack.pop();\r\n            }\r\n            this.endFlag = this.tokenStack.length == 0;\r\n        }\r\n        if (this.begin && this.endFlag && c1 == ';') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexports.default = CreateTriggerCheckerr;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.millitimeToFormat = exports.removeAllComment = exports.removeComment = exports.removeMultilineComment = exports.equalizeWhitespace = exports.isNewline = exports.trim = exports.isNumber = void 0;\r\nconst isNumber = (value) => typeof value === 'number';\r\nexports.isNumber = isNumber;\r\n// string trim\r\nconst trim = (s) => {\r\n    return s.replace(/^\\s+|\\s+$/g, \"\");\r\n};\r\nexports.trim = trim;\r\nconst isNewline = (s) => {\r\n    return /\\r|\\n/.test(s);\r\n};\r\nexports.isNewline = isNewline;\r\n// space -> ' '\r\nconst equalizeWhitespace = (s) => {\r\n    return (0, exports.trim)(s).replace(/\\s+/gu, ' ');\r\n};\r\nexports.equalizeWhitespace = equalizeWhitespace;\r\n// multi line comment remove (/* */)\r\nconst removeMultilineComment = (s) => {\r\n    return s.replace(/\\/\\*(.|[\\r\\n])*?\\\\*\\//gm, '');\r\n};\r\nexports.removeMultilineComment = removeMultilineComment;\r\n// comment remove (--)\r\nconst removeComment = (s) => {\r\n    return s.replace(/--.*\\n/gm, '');\r\n};\r\nexports.removeComment = removeComment;\r\n// comment all remove (--, /**/)\r\nconst removeAllComment = (s) => {\r\n    return (0, exports.removeComment)((0, exports.removeMultilineComment)(s));\r\n};\r\nexports.removeAllComment = removeAllComment;\r\nconst millitimeToFormat = (milliTime, format) => {\r\n    var inDate = new Date(milliTime);\r\n    var z = {\r\n        M: inDate.getMonth() + 1,\r\n        d: inDate.getDate(),\r\n        h: inDate.getHours(),\r\n        m: inDate.getMinutes(),\r\n        s: inDate.getSeconds()\r\n    };\r\n    format = format.replace(/(M+|d+|h+|m+|s+)/g, function (v) {\r\n        return ((v.length > 1 ? \"0\" : \"\") + eval('z.' + v.slice(-1))).slice(-2);\r\n    });\r\n    return format.replace(/(y+)/g, function (v) {\r\n        return inDate.getFullYear().toString().slice(-v.length);\r\n    });\r\n};\r\nexports.millitimeToFormat = millitimeToFormat;\r\n","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./sqlSplitter\"), exports);\r\n__exportStar(require(\"./splitOptions\"), exports);\r\n__exportStar(require(\"./sqlParamChecker\"), exports);\r\n__exportStar(require(\"./core/utils\"), exports);\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getSqlParam = void 0;\r\nconst utils_1 = require(\"./core/utils\");\r\n// split function\r\nconst getSqlParam = (sql) => {\r\n    if (typeof sql !== \"string\") {\r\n        throw new Error(\"Invalid sql argument. Expected string, instead got \" + typeof sql);\r\n    }\r\n    sql = (0, utils_1.removeAllComment)(sql);\r\n    var sqlParam = {};\r\n    var matchArr = sql.match(/[#|$]{(.+?)}/gi);\r\n    if (matchArr) {\r\n        for (var i = 0; i < matchArr.length; i++) {\r\n            var propertyVal = matchArr[i].replace(/[$|#|{|}]/gi, '');\r\n            propertyVal = propertyVal.replace(/\\s/g, ''); // 공백 제거\r\n            const allProperty = propertyVal.split(',');\r\n            let propertyKey = '';\r\n            let propertyMode = '';\r\n            for (var j = 0; j < allProperty.length; j++) {\r\n                var propSplitArr = allProperty[j].split(\"=\");\r\n                var key = propSplitArr[0];\r\n                if (propSplitArr.length > 1) {\r\n                    var val = propSplitArr[1];\r\n                    if (\"MODE\" == key.toUpperCase()) {\r\n                        propertyMode = propSplitArr[1];\r\n                    }\r\n                }\r\n                else {\r\n                    propertyKey = key;\r\n                }\r\n            }\r\n            if (!sqlParam.hasOwnProperty(propertyKey)) {\r\n                let sqlParamInfo = {\r\n                    key: propertyKey,\r\n                    mode: propertyMode\r\n                };\r\n                sqlParam[propertyKey] = sqlParamInfo;\r\n            }\r\n        }\r\n    }\r\n    return sqlParam;\r\n};\r\nexports.getSqlParam = getSqlParam;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.split = void 0;\r\nconst standard_splitter_1 = __importDefault(require(\"./core/sql/db/standard.splitter\"));\r\nlet splitters = {\r\n    standard: standard_splitter_1.default,\r\n};\r\n// default option\r\nconst defaultOptions = {\r\n    language: \"standard\",\r\n    keepComment: true,\r\n    findLine: -1,\r\n    findCharPos: -1,\r\n};\r\n// split function\r\nconst split = (sql, cfg = {}) => {\r\n    if (typeof sql !== \"string\") {\r\n        throw new Error(\"Invalid sql argument. Expected string, instead got \" + typeof sql);\r\n    }\r\n    const options = Object.assign(Object.assign({}, defaultOptions), cfg);\r\n    const Splitter = splitters[options.language];\r\n    return new Splitter(options).split(sql, cfg.findLine, cfg.findCharPos);\r\n};\r\nexports.split = split;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(820);\n"],"names":["root","factory","exports","module","define","amd","self","__importDefault","this","mod","__esModule","Object","defineProperty","value","DEFAULT_END_SPLITTER","CREATE_END_CHECK_KEYWORD","DEFAULT_TEXT_CHECK_TOKEN","TAB_CHAR","LINE_CHAR","CreateChecker_1","require","CreateFunctionChecker_1","CreateTriggerCheckerr_1","CreateProcedureChecker_1","DefaultChecker_1","keepWord","checkEnd","beforeCh1","c1","c2","endToken","end","constants_1","Splitter_1","TextCheckTokenInfo_1","EndCheckTokenInfo_1","StandardSplitter","textChecker","TextCheckTokenInfo","endChecker","EndCheckTokenInfo","DefaultChecker","lineCount","word","beforeWord","i","sql","test","tokens","key","hasOwnProperty","endCheck","init","utils_1","Splitter","cfg","checker","Error","findLine","findCharPos","orginCh","statementList","statement","g_idx","sqlLen","length","lineIdx","startLine","startCharPos","emptyLineCount","startCommand","command","endCheckerInter","textCheckerInter","currentEndTokenKey","lineStartCharIdx","overflowFlag","overflowNextSplitChk","lineStr","lineStrLength","charAt","toLowerCase","newLineIdx","indexOf","substring","trim","endLine","endCharPos","hasKey","get","push","firstChar","sqlSplitInfo","join","check","CreateChecker","idx","CreateFunctionChecker","endCheckKeywords","begin","endFlag","tokenStack","pop","popItem","CreateProcedureChecker","CreateTriggerCheckerr","millitimeToFormat","removeAllComment","removeComment","removeMultilineComment","equalizeWhitespace","isNewline","isNumber","s","replace","milliTime","format","inDate","Date","z","M","getMonth","d","getDate","h","getHours","m","getMinutes","getSeconds","v","eval","slice","getFullYear","toString","__createBinding","create","o","k","k2","undefined","desc","getOwnPropertyDescriptor","writable","configurable","enumerable","__exportStar","p","prototype","call","getSqlParam","sqlParam","matchArr","match","propertyVal","allProperty","split","propertyKey","propertyMode","j","propSplitArr","toUpperCase","sqlParamInfo","mode","splitters","standard","defaultOptions","language","keepComment","options","assign","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","__webpack_exports__"],"sourceRoot":""}