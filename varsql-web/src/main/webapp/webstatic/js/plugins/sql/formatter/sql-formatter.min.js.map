{"version":3,"sources":["webpack://sqlFormatter/webpack/universalModuleDefinition","webpack://sqlFormatter/webpack/bootstrap","webpack://sqlFormatter/./src/core/tokenTypes.js","webpack://sqlFormatter/./src/utils.js","webpack://sqlFormatter/./src/core/Indentation.js","webpack://sqlFormatter/./src/core/InlineBlock.js","webpack://sqlFormatter/./src/core/Params.js","webpack://sqlFormatter/./src/core/token.js","webpack://sqlFormatter/./src/core/Formatter.js","webpack://sqlFormatter/./src/core/regexFactory.js","webpack://sqlFormatter/./src/core/Tokenizer.js","webpack://sqlFormatter/./src/languages/Db2Formatter.js","webpack://sqlFormatter/./src/languages/MariaDbFormatter.js","webpack://sqlFormatter/./src/languages/MySqlFormatter.js","webpack://sqlFormatter/./src/languages/N1qlFormatter.js","webpack://sqlFormatter/./src/languages/PlSqlFormatter.js","webpack://sqlFormatter/./src/languages/PostgreSqlFormatter.js","webpack://sqlFormatter/./src/languages/RedshiftFormatter.js","webpack://sqlFormatter/./src/languages/SparkSqlFormatter.js","webpack://sqlFormatter/./src/languages/StandardSqlFormatter.js","webpack://sqlFormatter/./src/languages/TSqlFormatter.js","webpack://sqlFormatter/./src/sqlFormatter.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","WORD","STRING","RESERVED","RESERVED_TOP_LEVEL","RESERVED_TOP_LEVEL_NO_INDENT","RESERVED_NEWLINE","OPERATOR","OPEN_PAREN","CLOSE_PAREN","LINE_COMMENT","BLOCK_COMMENT","NUMBER","PLACEHOLDER","trimSpacesEnd","str","replace","escapeRegExp","string","sortByLengthDesc","strings","sort","a","b","length","localeCompare","Indentation","indent","this","indentTypes","repeat","push","arr","pop","InlineBlock","level","tokens","index","isInlineBlock","token","type","tokenTypes","isForbiddenToken","COMMENT","Params","params","isToken","regex","test","isAnd","isBetween","isLimit","isSet","isBy","isWindow","isEnd","Formatter","cfg","indentation","inlineBlock","previousReservedToken","Error","query","tokenizer","tokenize","getFormattedQueryFromTokens","trim","formattedQuery","forEach","tokenOverride","formatLineComment","formatBlockComment","formatTopLevelReservedWord","formatTopLevelReservedWordNoIndent","formatNewlineReservedWord","formatWithSpaces","formatOpeningParentheses","formatClosingParentheses","formatPlaceholder","formatComma","formatWithSpaceAfter","formatWithoutSpaces","formatQuerySeparator","addNewline","show","indentComment","comment","getIndent","decreaseTopLevel","equalizeWhitespace","increaseTopLevel","tokenLookBehind","preserveWhitespaceFor","whitespaceBefore","beginIfPossible","isActive","increaseBlockLevel","end","decreaseBlockLevel","resetIndentation","linesBetweenQueries","uppercase","toUpperCase","endsWith","createReservedWordRegex","reservedWords","RegExp","reservedWordsPattern","join","createStringPattern","stringTypes","patterns","$$","map","createParenRegex","parens","escapeParen","paren","createPlaceholderRegex","types","pattern","Array","isArray","typesRegex","Tokenizer","multiLetterOperators","lineCommentTypes","WHITESPACE_REGEX","NUMBER_REGEX","OPERATOR_REGEX","operators","BLOCK_COMMENT_REGEX","LINE_COMMENT_REGEX","RESERVED_TOP_LEVEL_REGEX","regexFactory","reservedTopLevelWords","RESERVED_TOP_LEVEL_NO_INDENT_REGEX","reservedTopLevelWordsNoIndent","RESERVED_NEWLINE_REGEX","reservedNewlineWords","RESERVED_PLAIN_REGEX","WORD_REGEX","specialChars","specialWordChars","STRING_REGEX","OPEN_PAREN_REGEX","openParens","CLOSE_PAREN_REGEX","closeParens","INDEXED_PLACEHOLDER_REGEX","indexedPlaceholderTypes","IDENT_NAMED_PLACEHOLDER_REGEX","namedPlaceholderTypes","STRING_NAMED_PLACEHOLDER_REGEX","input","getWhitespace","substring","getNextToken","matches","match","previousToken","getCommentToken","getStringToken","getOpenParenToken","getCloseParenToken","getPlaceholderToken","getNumberToken","getReservedWordToken","getWordToken","getOperatorToken","getLineCommentToken","getBlockCommentToken","getTokenOnFirstMatch","getIdentNamedPlaceholderToken","getStringNamedPlaceholderToken","getIndexedPlaceholderToken","getPlaceholderTokenWithKey","parseKey","v","slice","getEscapedPlaceholderKey","quoteChar","getTopLevelReservedToken","getNewlineReservedToken","getTopLevelReservedTokenNoIndent","getPlainReservedToken","undefined","Db2Formatter","MariaDbFormatter","MySqlFormatter","N1qlFormatter","PlSqlFormatter","PostgreSqlFormatter","RedshiftFormatter","SparkSqlFormatter","aheadToken","tokenLookAhead","backToken","StandardSqlFormatter","formatters","db2","mariadb","mysql","n1ql","plsql","postgresql","redshift","spark","sql","tsql","format","language","supportedDialects","keys"],"mappings":"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J,qBAAqB,CAC/BlB,QACAlH,KAAMC,EAAWnC,iBACjByC,MAAOnB,KAAK8G,2B,uDAIiBgB,GAC/B,OAAO9H,KAAKgJ,qBAAqB,CAC/BlB,QACAlH,KAAMC,EAAWpC,6BACjB0C,MAAOnB,KAAK4G,uC,4CAIMkB,GACpB,OAAO9H,KAAKgJ,qBAAqB,CAC/BlB,QACAlH,KAAMC,EAAWtC,SACjB4C,MAAOnB,KAAKgH,yB,mCAIHc,GACX,OAAO9H,KAAKgJ,qBAAqB,CAC/BlB,QACAlH,KAAMC,EAAWxC,KACjB8C,MAAOnB,KAAKiH,e,8CAI6B,IAAtBa,EAAsB,EAAtBA,MAAOlH,EAAe,EAAfA,KAAMO,EAAS,EAATA,MAC5B+G,EAAUJ,EAAMK,MAAMhH,GAE5B,OAAO+G,EAAU,CAAEtH,OAAMtD,MAAO4K,EAAQ,SAAO4B,O,u0CCjRnD,IAAMjF,EAAgB,CACpB,MACA,WACA,QACA,MACA,WACA,QACA,QACA,MACA,MACA,QACA,KACA,MACA,aACA,YACA,UACA,aACA,KACA,SACA,aACA,QACA,gBACA,MACA,YACA,MACA,SACA,QACA,UACA,SACA,SACA,OACA,UACA,OACA,aACA,KACA,QACA,OACA,SACA,UACA,cACA,WACA,OACA,OACA,QACA,OACA,UACA,OACA,YACA,mBACA,cACA,QACA,OACA,QACA,QACA,UACA,WACA,UACA,UACA,aACA,SACA,SACA,UACA,SACA,SACA,YACA,UACA,aACA,aACA,WACA,WACA,UACA,OACA,gBACA,QACA,YACA,YACA,aACA,SACA,QACA,OACA,YACA,UACA,eACA,kCACA,mBACA,eACA,eACA,iBACA,iBACA,eACA,oBACA,mBACA,mCACA,eACA,SACA,QACA,OACA,WACA,oBACA,mBACA,OACA,MACA,OACA,aACA,WACA,SACA,SACA,kBACA,iBACA,aACA,MACA,UACA,UACA,UACA,WACA,aACA,SACA,YACA,aACA,QACA,WACA,aACA,gBACA,cACA,UACA,WACA,aACA,WACA,KACA,WACA,SACA,OACA,SACA,UACA,OACA,WACA,UACA,OACA,SACA,SACA,WACA,aACA,MACA,WACA,SACA,QACA,SACA,QACA,YACA,YACA,YACA,OACA,UACA,SACA,OACA,MACA,UACA,WACA,WACA,UACA,QACA,SACA,QACA,YACA,OACA,SACA,QACA,QACA,QACA,QACA,MACA,UACA,OACA,OACA,WACA,SACA,UACA,YACA,MACA,SACA,OACA,QACA,UACA,QACA,WACA,UACA,OACA,eACA,OACA,OACA,OACA,QACA,WACA,KACA,YACA,KACA,YACA,YACA,YACA,QACA,YACA,aACA,MACA,WACA,UACA,QACA,QACA,cACA,SACA,MACA,UACA,YACA,eACA,WACA,OACA,KACA,SACA,YACA,UACA,MACA,OACA,OACA,MACA,QACA,WACA,QACA,UACA,WACA,UACA,QACA,OACA,OACA,WACA,KACA,QACA,YACA,SACA,YACA,iBACA,UACA,WACA,OACA,UACA,WACA,OACA,OACA,QACA,aACA,QACA,eACA,MACA,WACA,SACA,QACA,SACA,cACA,eACA,MACA,SACA,UACA,WACA,MACA,OACA,WACA,SACA,QACA,SACA,WACA,MACA,WACA,UACA,QACA,QACA,MACA,YACA,UACA,KACA,UACA,UACA,WACA,aACA,aACA,aACA,OACA,UACA,YACA,aACA,MACA,OACA,SACA,QACA,UACA,WACA,OACA,eACA,KACA,SACA,MACA,YACA,KACA,OACA,OACA,eACA,WACA,SACA,QACA,MACA,QACA,OACA,WACA,UACA,aACA,UACA,SACA,WACA,YACA,OACA,YACA,cACA,eACA,aACA,WACA,OACA,kBACA,kBACA,eACA,YACA,OACA,WACA,QACA,YACA,UACA,UACA,UACA,SACA,aACA,YACA,UACA,OACA,SACA,QACA,UACA,QACA,OACA,OACA,QACA,OACA,WACA,YACA,MACA,aACA,cACA,UACA,YACA,YACA,aACA,iBACA,UACA,aACA,WACA,WACA,WACA,UACA,SACA,SACA,QACA,WACA,UACA,WACA,SACA,qBACA,SACA,UACA,SACA,QACA,OACA,WACA,SACA,gBACA,aACA,cACA,kBACA,kBACA,gBACA,WACA,UACA,MACA,YACA,OACA,SACA,aACA,MACA,MACA,YACA,SACA,QACA,aACA,SACA,SACA,SACA,UACA,SACA,WACA,YACA,WACA,UACA,eACA,SACA,UACA,SACA,WACA,OACA,OACA,SACA,WACA,eACA,MACA,eACA,QACA,WACA,aACA,OACA,UACA,WACA,QACA,WACA,YACA,SACA,WACA,OACA,aACA,cACA,WACA,SACA,QACA,cACA,YACA,MACA,UACA,YACA,UACA,SACA,SACA,UACA,SACA,cACA,QACA,cACA,aACA,OACA,OACA,YACA,gBACA,kBACA,KACA,WACA,cACA,YACA,cACA,QACA,UACA,OACA,OACA,WACA,OACA,UACA,OACA,SACA,UACA,SACA,QACA,QACA,QACA,OACA,QACA,YACA,QACA,UACA,WACA,UACA,UACA,UACA,WACA,OACA,UACA,OACA,WACA,UACA,OACA,WACA,QACA,eACA,SACA,OACA,SACA,UACA,MACA,QACA,aACA,YACA,gBACA,OACA,SAGI8B,EAAwB,CAC5B,MACA,QACA,eACA,cACA,cACA,SACA,cACA,OACA,WACA,KACA,SACA,cACA,YACA,QACA,WACA,SACA,qBACA,aACA,MACA,SACA,SACA,SAGIE,EAAgC,CAAC,YAAa,gBAAiB,QAAS,QAAS,aAEjFE,EAAuB,CAC3B,MACA,KAEA,OACA,aACA,YACA,kBACA,aACA,mBACA,YACA,kBACA,aACA,gBAImBgD,E,6WAEjB,OAAO,IAAI/D,EAAU,CACnBnB,gBACA8B,wBACAI,uBACAF,gCACA3B,YAAa,CAAC,KAAM,KAAM,KAAM,MAChCoC,WAAY,CAAC,KACbE,YAAa,CAAC,KACdE,wBAAyB,CAAC,KAC1BE,sBAAuB,CAAC,KACxB1B,iBAAkB,CAAC,MACnBiB,iBAAkB,CAAC,IAAK,KACxBb,UAAW,CAAC,KAAM,KAAM,KAAM,KAAM,a,8BAdA1E,G,2yCCriB1C,IAAMiD,GAAgB,CACpB,aACA,MACA,MACA,QACA,UACA,MACA,KACA,MACA,aACA,SACA,UACA,SACA,SACA,OACA,OACA,KACA,OACA,UACA,OACA,SACA,OACA,YACA,QACA,UACA,SACA,YACA,aACA,WACA,UACA,SACA,QACA,eACA,eACA,eACA,oBACA,eACA,SACA,WACA,YACA,WACA,kBACA,aACA,aACA,MACA,UACA,UACA,UACA,UACA,SACA,OACA,WACA,gBACA,WACA,cACA,MACA,gBACA,SACA,OACA,OACA,OACA,OACA,SACA,WACA,UACA,SACA,SACA,OACA,UACA,QACA,QACA,QACA,SACA,SACA,MACA,QACA,UACA,OACA,WACA,UACA,QACA,QACA,SACA,gBACA,mBACA,cACA,cACA,KACA,SACA,oBACA,oBACA,KACA,QACA,SACA,QACA,QACA,cACA,SACA,MACA,OACA,OACA,OACA,OACA,OACA,UACA,YACA,WACA,OACA,KACA,UACA,OACA,MACA,OACA,OACA,UACA,QACA,OACA,OACA,QACA,SACA,QACA,OACA,YACA,iBACA,OACA,OACA,WACA,WACA,OACA,eACA,0BACA,gCACA,QACA,WACA,aACA,YACA,aACA,YACA,qBACA,gBACA,MACA,WACA,UACA,MACA,qBACA,OACA,UACA,KACA,WACA,SACA,aACA,KACA,QACA,MACA,QACA,UACA,OACA,gBACA,kBACA,YACA,WACA,YACA,UACA,YACA,QACA,QACA,OACA,QACA,aACA,OACA,YACA,gBACA,aACA,SACA,UACA,SACA,SACA,UACA,UACA,WACA,WACA,SACA,YACA,SACA,QACA,QACA,OACA,SACA,UACA,qBACA,SACA,YACA,YACA,MACA,OACA,SACA,OACA,WACA,UACA,WACA,MACA,eACA,WACA,aACA,iBACA,sBACA,mBACA,MACA,WACA,oBACA,mBACA,qBACA,gBACA,QACA,aACA,OACA,WACA,UACA,WACA,KACA,WACA,UACA,OACA,OACA,QACA,SACA,SACA,WACA,SACA,QACA,MACA,QACA,WACA,WACA,gBACA,SACA,YACA,UACA,eACA,UACA,OACA,QACA,QACA,SACA,OACA,QACA,MACA,aACA,YAGI8B,GAAwB,CAC5B,MACA,eACA,cACA,cACA,SACA,OACA,WACA,SACA,cACA,SACA,QACA,WACA,SACA,MACA,SACA,SACA,SAGIE,GAAgC,CAAC,YAAa,gBAAiB,QAAS,aAExEE,GAAuB,CAC3B,MACA,OACA,KACA,OAEA,OACA,aACA,YACA,kBACA,aACA,mBACA,aACA,eAEA,gBACA,oBACA,0BACA,qBACA,4BAImBiD,G,6WAEjB,OAAO,IAAIhE,EAAU,CACnBnB,iBACA8B,yBACAI,wBACAF,iCACA3B,YAAa,CAAC,KAAM,KAAM,MAC1BoC,WAAY,CAAC,IAAK,QAClBE,YAAa,CAAC,IAAK,OACnBE,wBAAyB,CAAC,KAC1BE,sBAAuB,GACvB1B,iBAAkB,CAAC,KAAM,KACzBiB,iBAAkB,CAAC,KACnBb,UAAW,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,a,8BAdf1E,G,qzCCxS9C,IAAMiD,GAAgB,CACpB,aACA,MACA,MACA,QACA,UACA,MACA,KACA,MACA,aACA,SACA,UACA,SACA,SACA,OACA,OACA,KACA,OACA,UACA,OACA,SACA,OACA,YACA,QACA,UACA,SACA,YACA,aACA,WACA,UACA,SACA,QACA,OACA,YACA,eACA,eACA,oBACA,eACA,SACA,WACA,YACA,WACA,kBACA,aACA,aACA,MACA,UACA,UACA,UACA,UACA,SACA,aACA,OACA,WACA,gBACA,WACA,cACA,MACA,SACA,OACA,OACA,OACA,OACA,SACA,QACA,WACA,UACA,SACA,SACA,OACA,UACA,QACA,QACA,cACA,QACA,SACA,SACA,MACA,QACA,UACA,OACA,WACA,WACA,YACA,MACA,QACA,QACA,WACA,SACA,SACA,gBACA,mBACA,cACA,cACA,KACA,SACA,KACA,QACA,SACA,QACA,QACA,cACA,SACA,MACA,OACA,OACA,OACA,OACA,OACA,UACA,WACA,OACA,iBACA,kBACA,KACA,UACA,OACA,aACA,MACA,OACA,OACA,MACA,aACA,UACA,OACA,UACA,QACA,OACA,OACA,QACA,SACA,QACA,OACA,YACA,iBACA,OACA,OACA,WACA,WACA,OACA,eACA,cACA,gCACA,QACA,WACA,aACA,YACA,aACA,YACA,qBACA,gBACA,MACA,WACA,UACA,MACA,qBACA,YACA,QACA,OACA,UACA,KACA,KACA,WACA,kBACA,SACA,aACA,KACA,QACA,MACA,QACA,UACA,OACA,YACA,eACA,YACA,UACA,YACA,QACA,QACA,OACA,OACA,QACA,aACA,OACA,YACA,aACA,SACA,UACA,SACA,SACA,UACA,UACA,WACA,WACA,SACA,SACA,QACA,QACA,MACA,OACA,aACA,SACA,UACA,qBACA,SACA,YACA,YACA,MACA,OACA,SACA,WACA,UACA,WACA,MACA,eACA,WACA,aACA,iBACA,sBACA,mBACA,MACA,WACA,SACA,gBACA,SACA,QACA,aACA,OACA,WACA,UACA,WACA,KACA,WACA,UACA,OACA,OACA,QACA,SACA,SACA,WACA,SACA,QACA,MACA,QACA,WACA,WACA,gBACA,SACA,YACA,UACA,eACA,UACA,UACA,OACA,QACA,QACA,SACA,OACA,QACA,MACA,aACA,YAGI8B,GAAwB,CAC5B,MACA,eACA,cACA,cACA,SACA,OACA,WACA,SACA,cACA,SACA,QACA,WACA,SACA,MACA,SACA,SACA,SAGIE,GAAgC,CAAC,YAAa,gBAAiB,QAAS,aAExEE,GAAuB,CAC3B,MACA,OACA,KACA,OAEA,OACA,aACA,YACA,kBACA,aACA,mBACA,aACA,eAEA,gBACA,oBACA,0BACA,qBACA,4BAGmBkD,G,gXAEjB,OAAO,IAAIjE,EAAU,CACnBnB,iBACA8B,yBACAI,wBACAF,iCACA3B,YAAa,CAAC,KAAM,KAAM,MAC1BoC,WAAY,CAAC,IAAK,QAClBE,YAAa,CAAC,IAAK,OACnBE,wBAAyB,CAAC,KAC1BE,sBAAuB,GACvB1B,iBAAkB,CAAC,KAAM,KACzBiB,iBAAkB,CAAC,KACnBb,UAAW,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,c,gCAd7B1E,G,qzCCpT5C,IAAMiD,GAAgB,CACpB,MACA,QACA,UACA,MACA,MACA,QACA,KACA,MACA,QACA,UACA,SACA,UACA,QACA,SACA,QACA,KACA,OACA,OACA,OACA,UACA,UACA,aACA,SACA,UACA,WACA,YACA,QACA,SACA,WACA,UACA,YACA,UACA,YACA,SACA,UACA,OACA,WACA,WACA,KACA,OACA,OACA,UACA,OACA,MACA,QACA,SACA,UACA,UACA,SACA,UACA,QACA,QACA,QACA,UACA,MACA,QACA,OACA,WACA,QACA,QACA,MACA,SACA,KACA,SACA,QACA,KACA,UACA,YACA,QACA,QACA,SACA,QACA,SACA,YACA,OACA,KACA,OACA,MACA,OACA,WACA,QACA,OACA,OACA,MACA,UACA,OACA,QACA,MACA,MACA,UACA,UACA,eACA,QACA,UACA,YACA,OACA,MACA,OACA,SACA,SACA,SACA,KACA,SACA,KACA,QACA,QACA,OACA,QACA,YACA,WACA,OACA,OACA,UACA,UACA,UACA,YACA,YACA,SACA,MACA,QACA,SACA,SACA,SACA,YACA,SACA,QACA,OACA,WACA,YACA,SACA,SACA,OACA,OACA,MACA,OACA,OACA,QACA,aACA,SACA,SACA,OACA,KACA,cACA,UACA,OACA,WACA,QACA,QACA,SACA,UACA,SACA,QACA,SACA,SACA,MACA,OACA,QACA,WACA,QACA,SACA,SACA,MACA,OACA,OACA,QACA,QACA,OACA,SACA,OACA,OAGI8B,GAAwB,CAC5B,cACA,aACA,SACA,sBACA,iBACA,iBACA,OACA,WACA,SACA,QACA,cACA,MACA,QACA,QACA,OACA,WACA,UACA,SACA,qBACA,aACA,MACA,SACA,SACA,SACA,WACA,SACA,SAGIE,GAAgC,CAAC,YAAa,gBAAiB,QAAS,QAAS,aAEjFE,GAAuB,CAC3B,MACA,KACA,MAEA,OACA,aACA,YACA,kBACA,aACA,oBAImBmD,G,gXAEjB,OAAO,IAAIlE,EAAU,CACnBnB,iBACA8B,yBACAI,wBACAF,iCACA3B,YAAa,CAAC,KAAM,KAAM,MAC1BoC,WAAY,CAAC,IAAK,IAAK,KACvBE,YAAa,CAAC,IAAK,IAAK,KACxBI,sBAAuB,CAAC,KACxB1B,iBAAkB,CAAC,IAAK,MACxBI,UAAW,CAAC,KAAM,a,gCAZmB1E,G,qzCCzN3C,IAAMiD,GAAgB,CACpB,IACA,aACA,QACA,YACA,MACA,QACA,MACA,QACA,KACA,MACA,KACA,YACA,SACA,MACA,UACA,aACA,iBACA,SACA,YACA,QACA,OACA,UACA,OACA,QACA,UACA,OACA,KACA,OACA,IACA,OACA,UACA,UACA,OACA,YACA,OACA,YACA,UACA,cACA,YACA,QACA,YACA,QACA,QACA,UACA,WACA,WACA,UACA,UACA,UACA,UACA,SACA,YACA,WACA,WACA,UACA,WACA,cACA,UACA,WACA,UACA,QACA,QACA,SACA,aACA,UACA,UACA,SACA,cACA,WACA,OACA,YACA,OACA,MACA,UACA,UACA,SACA,SACA,QACA,OACA,gBACA,YACA,WACA,KACA,SACA,OACA,WACA,UACA,QACA,QACA,MACA,SACA,aACA,YACA,UACA,SACA,OACA,UACA,WACA,UACA,QACA,QACA,QACA,QACA,QACA,QACA,MACA,SACA,QACA,OACA,WACA,UACA,OACA,QACA,QACA,OACA,OACA,SACA,OACA,aACA,KACA,YACA,KACA,YACA,QACA,UACA,YACA,UACA,WACA,eACA,MACA,UACA,YACA,WACA,OACA,aACA,KACA,YACA,OACA,WACA,QACA,UACA,SACA,QACA,UACA,OACA,QACA,QACA,QACA,UACA,QACA,OACA,OACA,MACA,MACA,SACA,SACA,QACA,MACA,SACA,WACA,MACA,OACA,QACA,WACA,OACA,MACA,WACA,SACA,UACA,WACA,QACA,MACA,UACA,aACA,SACA,MACA,SACA,OACA,SACA,cACA,SACA,SACA,UACA,UACA,cACA,cACA,cACA,gBACA,YACA,SACA,SACA,eACA,WACA,YACA,UACA,KACA,MACA,KACA,OACA,SACA,OACA,WACA,SACA,SACA,UACA,QACA,eACA,SACA,UACA,SACA,MACA,WACA,aACA,UACA,kBACA,YACA,aACA,SACA,YACA,SACA,UACA,OACA,YACA,cACA,YACA,WACA,YACA,SACA,YACA,QACA,UACA,YACA,SACA,QACA,QACA,MACA,OACA,OACA,SACA,MACA,YACA,UACA,YACA,MACA,YACA,SACA,WACA,eACA,SACA,SACA,YACA,UACA,SACA,WACA,MACA,QACA,SACA,UACA,SACA,OACA,YACA,MACA,MACA,MACA,SACA,SACA,UACA,OACA,WACA,WACA,eACA,QACA,QACA,SACA,OACA,WACA,OACA,QACA,SACA,MACA,UACA,UACA,UACA,UACA,WACA,WACA,QACA,SACA,SACA,SACA,SACA,SACA,QACA,cACA,eACA,gBACA,UACA,aACA,MACA,UACA,UACA,UACA,QACA,MACA,MACA,OACA,OACA,YACA,gBACA,gBACA,kBACA,kBACA,KACA,WACA,cACA,gBACA,UACA,OACA,UACA,OACA,MACA,MACA,MACA,MACA,QACA,SACA,SACA,WACA,YACA,MACA,OACA,QACA,WACA,SACA,QACA,UACA,WACA,WACA,WACA,SACA,UACA,OACA,QACA,OACA,WACA,QACA,OACA,OACA,UACA,QACA,OACA,QAGI8B,GAAwB,CAC5B,MACA,eACA,cACA,QACA,aACA,UACA,cACA,SACA,MACA,SACA,YACA,cACA,OACA,WACA,SACA,cACA,SACA,QACA,OACA,SACA,WACA,SACA,qBACA,aACA,MACA,aACA,SACA,SACA,SAGIE,GAAgC,CAAC,YAAa,gBAAiB,QAAS,QAAS,aAEjFE,GAAuB,CAC3B,MACA,cACA,OACA,MACA,KACA,cACA,OACA,MAEA,OACA,aACA,YACA,kBACA,aACA,mBACA,YACA,kBACA,aACA,gBAGmBoD,G,gXAEjB,OAAO,IAAInE,EAAU,CACnBnB,iBACA8B,yBACAI,wBACAF,iCACA3B,YAAa,CAAC,KAAM,MAAO,KAAM,MACjCoC,WAAY,CAAC,IAAK,QAClBE,YAAa,CAAC,IAAK,OACnBE,wBAAyB,CAAC,KAC1BE,sBAAuB,CAAC,KACxB1B,iBAAkB,CAAC,MACnBiB,iBAAkB,CAAC,IAAK,IAAK,IAAK,IAAK,KACvCb,UAAW,CAAC,KAAM,KAAM,KAAM,U,oCAIpB3F,GACZ,OAAIa,EAAMb,IAAUc,EAAKzB,KAAKgC,uBACrB,CAAEpB,KAAMC,EAAWtC,SAAUjB,MAAOqD,EAAMrD,OAE5CqD,O,gCAtBiCiB,G,qzCC7Z5C,IAAMiD,GAAgB,CACpB,QACA,WACA,SACA,SACA,MACA,QACA,QACA,YACA,MACA,OACA,QACA,SACA,UACA,UACA,MACA,MACA,QACA,KACA,MACA,YACA,aACA,aACA,KACA,SACA,YACA,gBACA,WACA,SACA,QACA,UACA,SACA,SACA,MACA,UACA,OACA,KACA,QACA,OACA,SACA,UACA,WACA,OACA,OACA,UACA,QACA,OACA,YACA,kBACA,QACA,aACA,QACA,QACA,UACA,WACA,UACA,YACA,SACA,UACA,UACA,WACA,SACA,YACA,eACA,gBACA,WACA,aACA,aACA,cACA,UACA,WACA,aACA,OACA,OACA,SACA,QACA,MACA,OACA,UACA,kBACA,eACA,eACA,iBACA,eACA,oBACA,eACA,SACA,QACA,OACA,WACA,MACA,aACA,MACA,UACA,UACA,UACA,WACA,aACA,WACA,UACA,SACA,YACA,aACA,UACA,OACA,SACA,aACA,UACA,UACA,WACA,KACA,WACA,SACA,SACA,OACA,OACA,OACA,SACA,WACA,YACA,MACA,OACA,SACA,QACA,SACA,UACA,YACA,YACA,UACA,SACA,UACA,aACA,YACA,WACA,UACA,QACA,SACA,QACA,SACA,QACA,QACA,YACA,MACA,QACA,UACA,UACA,SACA,OACA,OACA,WACA,YACA,YACA,SACA,QACA,UACA,WACA,QACA,WACA,SACA,UACA,SACA,SACA,OACA,OACA,WACA,KACA,QACA,YACA,YACA,WACA,SACA,KACA,UACA,YACA,YACA,QACA,UACA,UACA,WACA,YACA,SACA,QACA,QACA,QACA,cACA,SACA,UACA,MACA,UACA,YACA,WACA,OACA,UACA,KACA,SACA,YACA,OACA,MACA,QACA,WACA,QACA,OACA,UACA,UACA,YACA,QACA,OACA,QACA,OACA,QACA,SACA,OACA,QACA,YACA,iBACA,WACA,OACA,SACA,SACA,UACA,QACA,eACA,WACA,SACA,SACA,WACA,OACA,QACA,OACA,OACA,QACA,WACA,UACA,QACA,MACA,OACA,MACA,MACA,OACA,OACA,KACA,OACA,YACA,aACA,MACA,UACA,SACA,UACA,SACA,OACA,SACA,QACA,UACA,SACA,KACA,MACA,SACA,OACA,MACA,KACA,OACA,WACA,SACA,UACA,KACA,QACA,aACA,SACA,MACA,QACA,OACA,WACA,UACA,aACA,QACA,QACA,WACA,SACA,UACA,YACA,UACA,WACA,UACA,QACA,SACA,WACA,YACA,YACA,UACA,WACA,WACA,UACA,QACA,aACA,aACA,YACA,aACA,UACA,cACA,QACA,QACA,OACA,OACA,WACA,UACA,YACA,MACA,aACA,cACA,UACA,UACA,WACA,UACA,SACA,aACA,UACA,UACA,QACA,UACA,WACA,YACA,UACA,SACA,QACA,OACA,WACA,SACA,UACA,WACA,MACA,OACA,OACA,YACA,SACA,UACA,SACA,SACA,SACA,WACA,SACA,WACA,YACA,eACA,SACA,UACA,eACA,MACA,QACA,OACA,QACA,OACA,UACA,SACA,OACA,WACA,WACA,OACA,MACA,SACA,aACA,QACA,YACA,aACA,QACA,SACA,UACA,SACA,SACA,QACA,eACA,YACA,UACA,YACA,QACA,SACA,QACA,SACA,cACA,aACA,OACA,WACA,YACA,OACA,OACA,OACA,OACA,YACA,KACA,WACA,cACA,YACA,QACA,UACA,OACA,OACA,WACA,UACA,OACA,QACA,UACA,YACA,cACA,cACA,QACA,SACA,UACA,WACA,WACA,QACA,SACA,OACA,QACA,SACA,QACA,WACA,YACA,QACA,SACA,UACA,WACA,UACA,UACA,UACA,OACA,QACA,WACA,OACA,QACA,aACA,SACA,OACA,SACA,UACA,OACA,UACA,QACA,MACA,gBACA,YACA,aACA,YACA,YACA,gBACA,WACA,QACA,UACA,eACA,WACA,OACA,MACA,QAGI8B,GAAwB,CAC5B,MACA,QACA,eACA,cACA,OACA,cACA,MACA,SACA,cACA,OACA,WACA,SACA,cACA,SACA,QACA,WACA,SACA,qBACA,aACA,MACA,SACA,SACA,SAGIE,GAAgC,CAAC,YAAa,gBAAiB,QAAS,aAExEE,GAAuB,CAC3B,MACA,OACA,KACA,OAEA,OACA,aACA,YACA,kBACA,aACA,mBACA,YACA,kBACA,aACA,gBAGmBqD,G,gXAEjB,OAAO,IAAIpE,EAAU,CACnBnB,iBACA8B,yBACAI,wBACAF,iCACA3B,YAAa,CAAC,KAAM,KAAM,OAAQ,OAAQ,MAC1CoC,WAAY,CAAC,IAAK,QAClBE,YAAa,CAAC,IAAK,OACnBE,wBAAyB,CAAC,KAC1BE,sBAAuB,CAAC,KACxB1B,iBAAkB,CAAC,MACnBI,UAAW,CACT,KACA,KACA,KACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,OACA,MACA,KACA,MACA,KACA,a,gCA7ByC1E,G,qzCCnfjD,IAAMiD,GAAgB,CACpB,SACA,SACA,iBACA,UACA,QACA,KACA,MACA,gBACA,SACA,SACA,eACA,OACA,WACA,QACA,OACA,QACA,UACA,SACA,aACA,SACA,cACA,eACA,eACA,oBACA,eACA,kBACA,UACA,aACA,UACA,SACA,QACA,WACA,OACA,UACA,WACA,KACA,OACA,cACA,SACA,SACA,UACA,aACA,MACA,WACA,QACA,MACA,UACA,SACA,OACA,gBACA,gBACA,QACA,OACA,WACA,SACA,QACA,YACA,OACA,UACA,YACA,iBACA,MACA,OACA,MACA,OACA,QACA,WACA,WACA,UACA,UACA,MACA,QACA,MACA,UACA,SACA,MACA,KACA,OACA,OACA,QACA,WACA,WACA,YACA,UACA,cACA,UACA,UACA,MACA,YACA,UACA,aACA,YACA,SACA,UACA,eACA,UACA,UACA,SACA,QACA,MACA,OACA,UACA,UACA,OACA,YACA,KACA,MACA,WACA,OACA,kBACA,SACA,OACA,QACA,UACA,SACA,OACA,OACA,UACA,YACA,UACA,WACA,cACA,OACA,SACA,YACA,aACA,OACA,OACA,YACA,QACA,OACA,OACA,UACA,MACA,gBACA,iBACA,eACA,aACA,cACA,WACA,SACA,eACA,aACA,mBACA,eACA,UACA,eACA,UACA,aACA,aACA,kBACA,WACA,aACA,WACA,SACA,aACA,WACA,SACA,WACA,uBACA,MACA,gBACA,iBACA,gBACA,oBACA,OACA,eACA,QACA,WACA,aACA,cACA,aACA,YACA,cACA,WACA,YACA,SACA,eACA,aACA,aACA,SACA,WACA,OACA,mBACA,eACA,OACA,OACA,WACA,uBACA,WACA,SACA,UACA,YACA,SACA,eACA,UACA,MACA,aACA,aACA,gBACA,aACA,kBACA,WACA,eACA,iBACA,eACA,SACA,OACA,SACA,OACA,OAGI8B,GAAwB,CAC5B,MACA,QACA,eACA,cACA,cACA,SACA,OACA,WACA,SACA,cACA,SACA,YACA,MACA,QACA,SACA,WACA,SACA,qBACA,aACA,MACA,YACA,QACA,SACA,SACA,QACA,SACA,OACA,SACA,UACA,UACA,UACA,UACA,WACA,cACA,SACA,YACA,aACA,OACA,OACA,YACA,QACA,OACA,OACA,UACA,MACA,gBACA,iBACA,eACA,aACA,cACA,WACA,SACA,eACA,aACA,mBACA,eACA,UACA,eACA,UACA,aACA,aACA,kBACA,WACA,aACA,WACA,SACA,aACA,WACA,SACA,WACA,uBACA,MACA,gBACA,iBACA,gBACA,oBACA,OACA,eACA,QACA,WACA,aACA,cACA,aACA,YACA,cACA,WACA,YACA,SACA,eACA,aACA,aACA,SACA,WACA,OACA,mBACA,eACA,OACA,OACA,WACA,uBACA,WACA,SACA,UACA,YACA,SACA,eACA,UACA,MACA,aACA,aACA,gBACA,aACA,kBACA,WACA,eACA,iBACA,gBAGIE,GAAgC,GAEhCE,GAAuB,CAC3B,MACA,OACA,KACA,cACA,OACA,SACA,OACA,SACA,UACA,UACA,UACA,UACA,WACA,cAEA,OACA,aACA,YACA,kBACA,aACA,mBACA,YACA,kBACA,aACA,gBAGmBsD,G,gXAEjB,OAAO,IAAIrE,EAAU,CACnBnB,iBACA8B,yBACAI,wBACAF,iCACA3B,YAAa,CAAC,KAAM,KAAM,MAC1BoC,WAAY,CAAC,KACbE,YAAa,CAAC,KACdE,wBAAyB,CAAC,KAC1BE,sBAAuB,CAAC,IAAK,IAAK,KAClC1B,iBAAkB,CAAC,MACnBI,UAAW,CAAC,KAAM,MAAO,KAAM,KAAM,KAAM,a,gCAbF1E,G,qzCC1W/C,IAAMiD,GAAgB,CACpB,MACA,QACA,UACA,UACA,YACA,QACA,KACA,MACA,MACA,UACA,UACA,OACA,OACA,WACA,eACA,cACA,SACA,UACA,UACA,aACA,WACA,UACA,QACA,YACA,cACA,eACA,oBACA,WACA,YACA,WACA,WACA,aACA,WACA,aACA,aACA,MACA,OACA,SACA,UACA,SACA,aACA,OACA,WACA,WACA,cACA,MACA,OACA,OACA,SACA,MACA,SACA,UACA,gBACA,UACA,SACA,cACA,QACA,QACA,UACA,YACA,gBACA,OACA,WACA,eACA,cACA,cACA,OACA,QACA,KACA,SACA,KACA,SACA,WACA,OACA,KACA,MACA,aACA,OACA,OACA,UACA,QACA,QACA,OACA,MACA,QACA,MACA,gBACA,SACA,QACA,UACA,MACA,QACA,QACA,OACA,SACA,SACA,YACA,YACA,KACA,OACA,WACA,OACA,eACA,YACA,QACA,OACA,SACA,SACA,QACA,MACA,OACA,SACA,YACA,WACA,OACA,SACA,SACA,MACA,QACA,SACA,YACA,OACA,UACA,UACA,KACA,WACA,YACA,OACA,WACA,OACA,QACA,YACA,SACA,iBACA,SACA,WACA,QACA,YACA,OACA,OACA,OACA,cAGI8B,GAAwB,CAC5B,MACA,QACA,eACA,iBACA,eACA,cACA,aACA,eACA,cACA,gBACA,OACA,WACA,SACA,cACA,SACA,QACA,UACA,WACA,eACA,iBACA,QACA,OACA,SACA,qBACA,aACA,MACA,gBACA,SACA,QACA,SACA,QACA,UAGIE,GAAgC,CACpC,aACA,SACA,gBACA,YACA,YACA,SAGIE,GAAuB,CAC3B,MACA,YACA,SACA,OACA,eACA,KACA,cACA,OACA,MAEA,OACA,aACA,YACA,kBACA,aACA,mBACA,YACA,kBACA,aACA,eAEA,YACA,YACA,iBACA,iBACA,mBACA,kBACA,oBACA,0BACA,qBACA,yBACA,0BACA,yBACA,qBACA,2BACA,0BACA,qBAGmBuD,G,gXAEjB,OAAO,IAAItE,EAAU,CACnBnB,iBACA8B,yBACAI,wBACAF,iCACA3B,YAAa,CAAC,KAAM,KAAM,KAAM,MAChCoC,WAAY,CAAC,IAAK,QAClBE,YAAa,CAAC,IAAK,OACnBE,wBAAyB,CAAC,KAC1BE,sBAAuB,CAAC,KACxB1B,iBAAkB,CAAC,MACnBI,UAAW,CAAC,KAAM,MAAO,KAAM,KAAM,U,oCAI3B3F,GAEZ,GAAIe,EAASf,GAAQ,CACnB,IAAM4J,EAAavK,KAAKwK,iBACxB,GAAID,GAAcA,EAAW3J,OAASC,EAAWjC,WAE/C,MAAO,CAAEgC,KAAMC,EAAWtC,SAAUjB,MAAOqD,EAAMrD,OAKrD,GAAIqE,EAAMhB,GAAQ,CAChB,IAAM8J,EAAYzK,KAAK+D,kBACvB,GAAI0G,GAAaA,EAAU7J,OAASC,EAAWlC,UAAgC,MAApB8L,EAAUnN,MAEnE,MAAO,CAAEsD,KAAMC,EAAWxC,KAAMf,MAAOqD,EAAMrD,OAIjD,OAAOqD,O,gCApCoCiB,G,qzCCtO/C,IAAMiD,GAAgB,CACpB,MACA,MACA,WACA,QACA,MACA,MACA,MACA,QACA,KACA,aACA,aACA,KACA,SACA,gBACA,MACA,QACA,UACA,SACA,SACA,OACA,UACA,OACA,KACA,OACA,SACA,cACA,WACA,OACA,OACA,OACA,UACA,OACA,cACA,YACA,mBACA,QACA,OACA,QACA,WACA,UACA,UACA,SACA,SACA,YACA,UACA,aACA,UACA,OACA,gBACA,QACA,YACA,aACA,SACA,QACA,OACA,YACA,UACA,kBACA,eACA,kCACA,eACA,eACA,iBACA,eACA,oBACA,mCACA,eACA,SACA,QACA,OACA,MACA,aACA,MACA,UACA,UACA,UACA,SACA,aACA,QACA,WACA,gBACA,aACA,WACA,SACA,OACA,UACA,OACA,UACA,OACA,MACA,WACA,SACA,QACA,SACA,OACA,UACA,SACA,MACA,WACA,UACA,QACA,QACA,SACA,QACA,QACA,MACA,UACA,OACA,OACA,OACA,WACA,SACA,MACA,SACA,QACA,QACA,WACA,SACA,OACA,OACA,WACA,KACA,YACA,QACA,QACA,cACA,SACA,MACA,UACA,YACA,eACA,WACA,OACA,KACA,OACA,WACA,QACA,UACA,UACA,OACA,OACA,aACA,KACA,QACA,YACA,iBACA,QACA,QACA,MACA,SACA,QACA,SACA,MACA,SACA,MACA,WACA,SACA,QACA,WACA,WACA,UACA,QACA,QACA,MACA,KACA,OACA,YACA,MACA,OACA,SACA,UACA,eACA,oBACA,KACA,MACA,KACA,OACA,OACA,KACA,QACA,MACA,QACA,OACA,WACA,UACA,YACA,YACA,eACA,kBACA,kBACA,WACA,iBACA,QACA,YACA,UACA,UACA,YACA,QACA,OACA,QACA,OACA,YACA,MACA,aACA,cACA,YACA,YACA,aACA,iBACA,UACA,aACA,WACA,WACA,WACA,UACA,SACA,SACA,UACA,SACA,QACA,WACA,SACA,MACA,aACA,OACA,YACA,QACA,SACA,SACA,SACA,SACA,YACA,eACA,MACA,UACA,WACA,OACA,WACA,eACA,MACA,eACA,WACA,aACA,OACA,QACA,SACA,aACA,cACA,cACA,YACA,kBACA,MACA,YACA,SACA,cACA,QACA,cACA,OACA,OACA,YACA,gBACA,kBACA,KACA,WACA,YACA,kBACA,cACA,QACA,UACA,OACA,OACA,UACA,QACA,SACA,UACA,SACA,SACA,QACA,OACA,QACA,QACA,SACA,UACA,WACA,YACA,UACA,UACA,OACA,WACA,QACA,eACA,SACA,OACA,SACA,UACA,QAGI8B,GAAwB,CAC5B,MACA,eACA,cACA,OACA,cACA,MACA,cACA,aACA,cACA,aACA,iBACA,iBACA,OACA,WACA,SACA,cACA,QACA,WACA,SACA,aACA,MACA,SACA,SACA,SAGIE,GAAgC,CACpC,YACA,gBACA,qBACA,QACA,YACA,iBACA,SACA,aACA,mBAGIE,GAAuB,CAC3B,MACA,OACA,KACA,OAEA,OACA,aACA,YACA,kBACA,aACA,mBACA,YACA,kBACA,aACA,gBAGmB2D,G,gXAEjB,OAAO,IAAI1E,EAAU,CACnBnB,iBACA8B,yBACAI,wBACAF,iCACA3B,YAAa,CAAC,KAAM,MACpBoC,WAAY,CAAC,IAAK,QAClBE,YAAa,CAAC,IAAK,OACnBE,wBAAyB,CAAC,KAC1BE,sBAAuB,GACvB1B,iBAAkB,CAAC,a,gCAZyBtE,G,qzCCrWlD,IAAMiD,GAAgB,CACpB,MACA,WACA,YACA,MACA,QACA,SACA,QACA,OACA,YACA,MACA,aACA,OACA,MACA,MACA,WACA,KACA,UACA,cACA,MACA,WACA,aACA,gBACA,gBACA,cACA,SACA,OACA,UACA,QACA,OACA,WACA,UACA,WACA,SACA,QACA,OACA,SACA,SACA,QACA,SACA,OACA,QACA,QACA,KACA,SACA,WACA,UACA,WACA,WACA,OACA,WACA,aACA,QACA,kBACA,OACA,aACA,cACA,OACA,QACA,KACA,SACA,YACA,KACA,gBACA,WACA,QACA,SACA,UACA,QACA,yBACA,SACA,SACA,iCACA,SACA,YACA,0BACA,UACA,OACA,eACA,aACA,KACA,MACA,WACA,OACA,UACA,gBACA,MACA,WACA,WACA,OACA,OACA,UACA,OACA,aACA,SACA,OACA,cACA,QACA,SACA,QACA,UACA,OACA,cACA,eACA,QACA,WACA,eACA,WACA,OACA,oBACA,UACA,KACA,eACA,eACA,MACA,SACA,MACA,OACA,WACA,OACA,cACA,OACA,SACA,UACA,aACA,KACA,WACA,UACA,MACA,cACA,UACA,UACA,UACA,SACA,KACA,QACA,OACA,OACA,SACA,OACA,iBACA,UACA,OACA,YACA,SACA,WACA,aACA,aACA,cACA,UACA,MACA,SACA,SACA,OACA,OACA,KACA,SACA,OACA,QACA,UACA,OACA,QACA,OACA,MACA,OACA,UACA,SACA,UACA,OACA,SACA,QACA,QACA,SACA,OACA,QACA,OACA,YACA,OACA,UACA,UACA,eACA,SACA,QACA,YACA,OACA,QAGI8B,GAAwB,CAC5B,MACA,eACA,cACA,OACA,cACA,MACA,SACA,OACA,WACA,SACA,cACA,SACA,QACA,WACA,SACA,qBACA,aACA,MACA,SACA,SACA,SAGIE,GAAgC,CAAC,YAAa,gBAAiB,QAAS,QAAS,aAEjFE,GAAuB,CAC3B,MACA,OACA,KACA,OAEA,OACA,aACA,YACA,kBACA,aACA,mBACA,YACA,kBACA,c,uOC5NF,IAAM4D,GAAa,CACjBC,IAAKb,EACLc,QAASb,GACTc,MAAOb,GACPc,KAAMb,GACNc,MAAOb,GACPc,WAAYb,GACZc,SAAUb,GACVc,MAAOb,GACPc,IAAKV,GACLW,K,gXDuNE,OAAO,IAAIrF,EAAU,CACnBnB,iBACA8B,yBACAI,wBACAF,iCACA3B,YAAa,CAAC,KAAM,MAAO,KAAM,MACjCoC,WAAY,CAAC,IAAK,QAClBE,YAAa,CAAC,IAAK,OACnBE,wBAAyB,GACzBE,sBAAuB,CAAC,KACxB1B,iBAAkB,CAAC,MACnBiB,iBAAkB,CAAC,IAAK,KACxBb,UAAW,CACT,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,a,gCA7BmC1E,ICtM9B0J,GAAS,SAACpJ,GAAoB,IAAbL,EAAa,uDAAP,GAClC,GAAqB,iBAAVK,EACT,MAAM,IAAID,MAAM,wDAA0D,GAAOC,IAGnF,IAAIN,EAAY8I,GAIhB,QAHqBZ,IAAjBjI,EAAI0J,WACN3J,EAAY+I,GAAW9I,EAAI0J,gBAEXzB,IAAdlI,EACF,MAAMK,MAAM,4BAAD,OAA6BJ,EAAI0J,WAE9C,OAAO,IAAI3J,EAAUC,GAAKyJ,OAAOpJ,IAGtBsJ,GAAoBzO,OAAO0O,KAAKd","file":"sql-formatter.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sqlFormatter\"] = factory();\n\telse\n\t\troot[\"sqlFormatter\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Constants for token types\n */\nexport default {\n  WORD: 'word',\n  STRING: 'string',\n  RESERVED: 'reserved',\n  RESERVED_TOP_LEVEL: 'reserved-top-level',\n  RESERVED_TOP_LEVEL_NO_INDENT: 'reserved-top-level-no-indent',\n  RESERVED_NEWLINE: 'reserved-newline',\n  OPERATOR: 'operator',\n  OPEN_PAREN: 'open-paren',\n  CLOSE_PAREN: 'close-paren',\n  LINE_COMMENT: 'line-comment',\n  BLOCK_COMMENT: 'block-comment',\n  NUMBER: 'number',\n  PLACEHOLDER: 'placeholder',\n};\n","// Only removes spaces, not newlines\nexport const trimSpacesEnd = (str) => str.replace(/[ \\t]+$/u, '');\n\n// Last element from array\nexport const last = (arr) => arr[arr.length - 1];\n\n// True array is empty, or it's not an array at all\nexport const isEmpty = (arr) => !Array.isArray(arr) || arr.length === 0;\n\n// Escapes regex special chars\nexport const escapeRegExp = (string) => string.replace(/[.*+?^${}()|[\\]\\\\]/gu, '\\\\$&');\n\n// Sorts strings by length, so that longer ones are first\n// Also sorts alphabetically after sorting by length.\nexport const sortByLengthDesc = (strings) =>\n  strings.sort((a, b) => {\n    return b.length - a.length || a.localeCompare(b);\n  });\n","import { last } from '../utils';\n\nconst INDENT_TYPE_TOP_LEVEL = 'top-level';\nconst INDENT_TYPE_BLOCK_LEVEL = 'block-level';\n\n/**\n * Manages indentation levels.\n *\n * There are two types of indentation levels:\n *\n * - BLOCK_LEVEL : increased by open-parenthesis\n * - TOP_LEVEL : increased by RESERVED_TOP_LEVEL words\n */\nexport default class Indentation {\n  /**\n   * @param {String} indent Indent value, default is \"  \" (2 spaces)\n   */\n  constructor(indent) {\n    this.indent = indent || '  ';\n    this.indentTypes = [];\n  }\n\n  /**\n   * Returns current indentation string.\n   * @return {String}\n   */\n  getIndent() {\n    return this.indent.repeat(this.indentTypes.length);\n  }\n\n  /**\n   * Increases indentation by one top-level indent.\n   */\n  increaseTopLevel() {\n    this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);\n  }\n\n  /**\n   * Increases indentation by one block-level indent.\n   */\n  increaseBlockLevel() {\n    this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);\n  }\n\n  /**\n   * Decreases indentation by one top-level indent.\n   * Does nothing when the previous indent is not top-level.\n   */\n  decreaseTopLevel() {\n    if (this.indentTypes.length > 0 && last(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {\n      this.indentTypes.pop();\n    }\n  }\n\n  /**\n   * Decreases indentation by one block-level indent.\n   * If there are top-level indents within the block-level indent,\n   * throws away these as well.\n   */\n  decreaseBlockLevel() {\n    while (this.indentTypes.length > 0) {\n      const type = this.indentTypes.pop();\n      if (type !== INDENT_TYPE_TOP_LEVEL) {\n        break;\n      }\n    }\n  }\n\n  resetIndentation() {\n    this.indentTypes = [];\n  }\n}\n","import tokenTypes from './tokenTypes';\n\nconst INLINE_MAX_LENGTH = 50;\n\n/**\n * Bookkeeper for inline blocks.\n *\n * Inline blocks are parenthized expressions that are shorter than INLINE_MAX_LENGTH.\n * These blocks are formatted on a single line, unlike longer parenthized\n * expressions where open-parenthesis causes newline and increase of indentation.\n */\nexport default class InlineBlock {\n  constructor() {\n    this.level = 0;\n  }\n\n  /**\n   * Begins inline block when lookahead through upcoming tokens determines\n   * that the block would be smaller than INLINE_MAX_LENGTH.\n   * @param  {Object[]} tokens Array of all tokens\n   * @param  {Number} index Current token position\n   */\n  beginIfPossible(tokens, index) {\n    if (this.level === 0 && this.isInlineBlock(tokens, index)) {\n      this.level = 1;\n    } else if (this.level > 0) {\n      this.level++;\n    } else {\n      this.level = 0;\n    }\n  }\n\n  /**\n   * Finishes current inline block.\n   * There might be several nested ones.\n   */\n  end() {\n    this.level--;\n  }\n\n  /**\n   * True when inside an inline block\n   * @return {Boolean}\n   */\n  isActive() {\n    return this.level > 0;\n  }\n\n  // Check if this should be an inline parentheses block\n  // Examples are \"NOW()\", \"COUNT(*)\", \"int(10)\", key(`somecolumn`), DECIMAL(7,2)\n  isInlineBlock(tokens, index) {\n    let length = 0;\n    let level = 0;\n\n    for (let i = index; i < tokens.length; i++) {\n      const token = tokens[i];\n      length += token.value.length;\n\n      // Overran max length\n      if (length > INLINE_MAX_LENGTH) {\n        return false;\n      }\n\n      if (token.type === tokenTypes.OPEN_PAREN) {\n        level++;\n      } else if (token.type === tokenTypes.CLOSE_PAREN) {\n        level--;\n        if (level === 0) {\n          return true;\n        }\n      }\n\n      if (this.isForbiddenToken(token)) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n  // Reserved words that cause newlines, comments and semicolons\n  // are not allowed inside inline parentheses block\n  isForbiddenToken({ type, value }) {\n    return (\n      type === tokenTypes.RESERVED_TOP_LEVEL ||\n      type === tokenTypes.RESERVED_NEWLINE ||\n      type === tokenTypes.COMMENT ||\n      type === tokenTypes.BLOCK_COMMENT ||\n      value === ';'\n    );\n  }\n}\n","/**\n * Handles placeholder replacement with given params.\n */\nexport default class Params {\n  /**\n   * @param {Object} params\n   */\n  constructor(params) {\n    this.params = params;\n    this.index = 0;\n  }\n\n  /**\n   * Returns param value that matches given placeholder with param key.\n   * @param {Object} token\n   *   @param {String} token.key Placeholder key\n   *   @param {String} token.value Placeholder value\n   * @return {String} param or token.value when params are missing\n   */\n  get({ key, value }) {\n    if (!this.params) {\n      return value;\n    }\n    if (key) {\n      return this.params[key];\n    }\n    return this.params[this.index++];\n  }\n}\n","import tokenTypes from './tokenTypes';\n\nconst isToken = (type, regex) => (token) => token?.type === type && regex.test(token?.value);\n\nexport const isAnd = isToken(tokenTypes.RESERVED_NEWLINE, /^AND$/iu);\n\nexport const isBetween = isToken(tokenTypes.RESERVED, /^BETWEEN$/iu);\n\nexport const isLimit = isToken(tokenTypes.RESERVED_TOP_LEVEL, /^LIMIT$/iu);\n\nexport const isSet = isToken(tokenTypes.RESERVED_TOP_LEVEL, /^SET$/iu);\n\nexport const isBy = isToken(tokenTypes.RESERVED, /^BY$/iu);\n\nexport const isWindow = isToken(tokenTypes.RESERVED_TOP_LEVEL, /^WINDOW$/iu);\n\nexport const isEnd = isToken(tokenTypes.CLOSE_PAREN, /^END$/iu);\n","import tokenTypes from './tokenTypes';\nimport Indentation from './Indentation';\nimport InlineBlock from './InlineBlock';\nimport Params from './Params';\nimport { trimSpacesEnd } from '../utils';\nimport { isAnd, isBetween, isLimit } from './token';\n\nexport default class Formatter {\n  /**\n   * @param {Object} cfg\n   *  @param {String} cfg.language\n   *  @param {String} cfg.indent\n   *  @param {Boolean} cfg.uppercase\n   *  @param {Integer} cfg.linesBetweenQueries\n   *  @param {Object} cfg.params\n   */\n  constructor(cfg) {\n    this.cfg = cfg;\n    this.indentation = new Indentation(this.cfg.indent);\n    this.inlineBlock = new InlineBlock();\n    this.params = new Params(this.cfg.params);\n    this.previousReservedToken = {};\n    this.tokens = [];\n    this.index = 0;\n  }\n\n  /**\n   * SQL Tokenizer for this formatter, provided by subclasses.\n   */\n  tokenizer() {\n    throw new Error('tokenizer() not implemented by subclass');\n  }\n\n  /**\n   * Reprocess and modify a token based on parsed context.\n   *\n   * @param {Object} token The token to modify\n   *  @param {String} token.type\n   *  @param {String} token.value\n   * @return {Object} new token or the original\n   *  @return {String} token.type\n   *  @return {String} token.value\n   */\n  tokenOverride(token) {\n    // subclasses can override this to modify tokens during formatting\n    return token;\n  }\n\n  /**\n   * Formats whitespace in a SQL string to make it easier to read.\n   *\n   * @param {String} query The SQL query string\n   * @return {String} formatted query\n   */\n  format(query) {\n    this.tokens = this.tokenizer().tokenize(query);\n    const formattedQuery = this.getFormattedQueryFromTokens();\n\n    return formattedQuery.trim();\n  }\n\n  getFormattedQueryFromTokens() {\n    let formattedQuery = '';\n\n    this.tokens.forEach((token, index) => {\n      this.index = index;\n\n      token = this.tokenOverride(token);\n\n      if (token.type === tokenTypes.LINE_COMMENT) {\n        formattedQuery = this.formatLineComment(token, formattedQuery);\n      } else if (token.type === tokenTypes.BLOCK_COMMENT) {\n        formattedQuery = this.formatBlockComment(token, formattedQuery);\n      } else if (token.type === tokenTypes.RESERVED_TOP_LEVEL) {\n        formattedQuery = this.formatTopLevelReservedWord(token, formattedQuery);\n        this.previousReservedToken = token;\n      } else if (token.type === tokenTypes.RESERVED_TOP_LEVEL_NO_INDENT) {\n        formattedQuery = this.formatTopLevelReservedWordNoIndent(token, formattedQuery);\n        this.previousReservedToken = token;\n      } else if (token.type === tokenTypes.RESERVED_NEWLINE) {\n        formattedQuery = this.formatNewlineReservedWord(token, formattedQuery);\n        this.previousReservedToken = token;\n      } else if (token.type === tokenTypes.RESERVED) {\n        formattedQuery = this.formatWithSpaces(token, formattedQuery);\n        this.previousReservedToken = token;\n      } else if (token.type === tokenTypes.OPEN_PAREN) {\n        formattedQuery = this.formatOpeningParentheses(token, formattedQuery);\n      } else if (token.type === tokenTypes.CLOSE_PAREN) {\n        formattedQuery = this.formatClosingParentheses(token, formattedQuery);\n      } else if (token.type === tokenTypes.PLACEHOLDER) {\n        formattedQuery = this.formatPlaceholder(token, formattedQuery);\n      } else if (token.value === ',') {\n        formattedQuery = this.formatComma(token, formattedQuery);\n      } else if (token.value === ':') {\n        formattedQuery = this.formatWithSpaceAfter(token, formattedQuery);\n      } else if (token.value === '.') {\n        formattedQuery = this.formatWithoutSpaces(token, formattedQuery);\n      } else if (token.value === ';') {\n        formattedQuery = this.formatQuerySeparator(token, formattedQuery);\n      } else {\n        formattedQuery = this.formatWithSpaces(token, formattedQuery);\n      }\n    });\n    return formattedQuery;\n  }\n\n  formatLineComment(token, query) {\n    return this.addNewline(query + this.show(token));\n  }\n\n  formatBlockComment(token, query) {\n    return this.addNewline(this.addNewline(query) + this.indentComment(token.value));\n  }\n\n  indentComment(comment) {\n    return comment.replace(/\\n[ \\t]*/gu, '\\n' + this.indentation.getIndent() + ' ');\n  }\n\n  formatTopLevelReservedWordNoIndent(token, query) {\n    this.indentation.decreaseTopLevel();\n    query = this.addNewline(query) + this.equalizeWhitespace(this.show(token));\n    return this.addNewline(query);\n  }\n\n  formatTopLevelReservedWord(token, query) {\n    this.indentation.decreaseTopLevel();\n\n    query = this.addNewline(query);\n\n    this.indentation.increaseTopLevel();\n\n    query += this.equalizeWhitespace(this.show(token));\n    return this.addNewline(query);\n  }\n\n  formatNewlineReservedWord(token, query) {\n    if (isAnd(token) && isBetween(this.tokenLookBehind(2))) {\n      return this.formatWithSpaces(token, query);\n    }\n    return this.addNewline(query) + this.equalizeWhitespace(this.show(token)) + ' ';\n  }\n\n  // Replace any sequence of whitespace characters with single space\n  equalizeWhitespace(string) {\n    return string.replace(/\\s+/gu, ' ');\n  }\n\n  // Opening parentheses increase the block indent level and start a new line\n  formatOpeningParentheses(token, query) {\n    // Take out the preceding space unless there was whitespace there in the original query\n    // or another opening parens or line comment\n    const preserveWhitespaceFor = {\n      [tokenTypes.OPEN_PAREN]: true,\n      [tokenTypes.LINE_COMMENT]: true,\n      [tokenTypes.OPERATOR]: true,\n    };\n    if (\n      token.whitespaceBefore.length === 0 &&\n      !preserveWhitespaceFor[this.tokenLookBehind()?.type]\n    ) {\n      query = trimSpacesEnd(query);\n    }\n    query += this.show(token);\n\n    this.inlineBlock.beginIfPossible(this.tokens, this.index);\n\n    if (!this.inlineBlock.isActive()) {\n      this.indentation.increaseBlockLevel();\n      query = this.addNewline(query);\n    }\n    return query;\n  }\n\n  // Closing parentheses decrease the block indent level\n  formatClosingParentheses(token, query) {\n    if (this.inlineBlock.isActive()) {\n      this.inlineBlock.end();\n      return this.formatWithSpaceAfter(token, query);\n    } else {\n      this.indentation.decreaseBlockLevel();\n      return this.formatWithSpaces(token, this.addNewline(query));\n    }\n  }\n\n  formatPlaceholder(token, query) {\n    return query + this.params.get(token) + ' ';\n  }\n\n  // Commas start a new line (unless within inline parentheses or SQL \"LIMIT\" clause)\n  formatComma(token, query) {\n    query = trimSpacesEnd(query) + this.show(token) + ' ';\n\n    if (this.inlineBlock.isActive()) {\n      return query;\n    } else if (isLimit(this.previousReservedToken)) {\n      return query;\n    } else {\n      return this.addNewline(query);\n    }\n  }\n\n  formatWithSpaceAfter(token, query) {\n    return trimSpacesEnd(query) + this.show(token) + ' ';\n  }\n\n  formatWithoutSpaces(token, query) {\n    return trimSpacesEnd(query) + this.show(token);\n  }\n\n  formatWithSpaces(token, query) {\n    return query + this.show(token) + ' ';\n  }\n\n  formatQuerySeparator(token, query) {\n    this.indentation.resetIndentation();\n    return trimSpacesEnd(query) + this.show(token) + '\\n'.repeat(this.cfg.linesBetweenQueries || 1);\n  }\n\n  // Converts token to string (uppercasing it if needed)\n  show({ type, value }) {\n    if (\n      this.cfg.uppercase &&\n      (type === tokenTypes.RESERVED ||\n        type === tokenTypes.RESERVED_TOP_LEVEL ||\n        type === tokenTypes.RESERVED_TOP_LEVEL_NO_INDENT ||\n        type === tokenTypes.RESERVED_NEWLINE ||\n        type === tokenTypes.OPEN_PAREN ||\n        type === tokenTypes.CLOSE_PAREN)\n    ) {\n      return value.toUpperCase();\n    } else {\n      return value;\n    }\n  }\n\n  addNewline(query) {\n    query = trimSpacesEnd(query);\n    if (!query.endsWith('\\n')) {\n      query += '\\n';\n    }\n    return query + this.indentation.getIndent();\n  }\n\n  tokenLookBehind(n = 1) {\n    return this.tokens[this.index - n];\n  }\n\n  tokenLookAhead(n = 1) {\n    return this.tokens[this.index + n];\n  }\n}\n","import { escapeRegExp, isEmpty, sortByLengthDesc } from '../utils';\n\nexport function createOperatorRegex(multiLetterOperators) {\n  return new RegExp(\n    `^(${sortByLengthDesc(multiLetterOperators).map(escapeRegExp).join('|')}|.)`,\n    'u'\n  );\n}\n\nexport function createLineCommentRegex(lineCommentTypes) {\n  return new RegExp(\n    `^((?:${lineCommentTypes.map((c) => escapeRegExp(c)).join('|')}).*?)(?:\\r\\n|\\r|\\n|$)`,\n    'u'\n  );\n}\n\nexport function createReservedWordRegex(reservedWords) {\n  if (reservedWords.length === 0) {\n    return new RegExp(`^\\b$`, 'u');\n  }\n  const reservedWordsPattern = sortByLengthDesc(reservedWords).join('|').replace(/ /gu, '\\\\s+');\n  return new RegExp(`^(${reservedWordsPattern})\\\\b`, 'iu');\n}\n\nexport function createWordRegex(specialChars = []) {\n  return new RegExp(\n    `^([\\\\p{Alphabetic}\\\\p{Mark}\\\\p{Decimal_Number}\\\\p{Connector_Punctuation}\\\\p{Join_Control}${specialChars.join(\n      ''\n    )}]+)`,\n    'u'\n  );\n}\n\nexport function createStringRegex(stringTypes) {\n  return new RegExp('^(' + createStringPattern(stringTypes) + ')', 'u');\n}\n\n// This enables the following string patterns:\n// 1. backtick quoted string using `` to escape\n// 2. square bracket quoted string (SQL Server) using ]] to escape\n// 3. double quoted string using \"\" or \\\" to escape\n// 4. single quoted string using '' or \\' to escape\n// 5. national character quoted string using N'' or N\\' to escape\n// 6. Unicode single-quoted string using \\' to escape\n// 7. Unicode double-quoted string using \\\" to escape\n// 8. PostgreSQL dollar-quoted strings\nexport function createStringPattern(stringTypes) {\n  const patterns = {\n    '``': '((`[^`]*($|`))+)',\n    '{}': '((\\\\{[^\\\\}]*($|\\\\}))+)',\n    '[]': '((\\\\[[^\\\\]]*($|\\\\]))(\\\\][^\\\\]]*($|\\\\]))*)',\n    '\"\"': '((\"[^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*(\"|$))+)',\n    \"''\": \"(('[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*('|$))+)\",\n    \"N''\": \"((N'[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*('|$))+)\",\n    \"U&''\": \"((U&'[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*('|$))+)\",\n    'U&\"\"': '((U&\"[^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*(\"|$))+)',\n    $$: '((?<tag>\\\\$\\\\w*\\\\$)[\\\\s\\\\S]*?(?:\\\\k<tag>|$))',\n  };\n\n  return stringTypes.map((t) => patterns[t]).join('|');\n}\n\nexport function createParenRegex(parens) {\n  return new RegExp('^(' + parens.map(escapeParen).join('|') + ')', 'iu');\n}\n\nfunction escapeParen(paren) {\n  if (paren.length === 1) {\n    // A single punctuation character\n    return escapeRegExp(paren);\n  } else {\n    // longer word\n    return '\\\\b' + paren + '\\\\b';\n  }\n}\n\nexport function createPlaceholderRegex(types, pattern) {\n  if (isEmpty(types)) {\n    return false;\n  }\n  const typesRegex = types.map(escapeRegExp).join('|');\n\n  return new RegExp(`^((?:${typesRegex})(?:${pattern}))`, 'u');\n}\n","import tokenTypes from './tokenTypes';\nimport * as regexFactory from './regexFactory';\nimport { escapeRegExp } from '../utils';\n\nexport default class Tokenizer {\n  /**\n   * @param {Object} cfg\n   *  @param {String[]} cfg.reservedWords Reserved words in SQL\n   *  @param {String[]} cfg.reservedTopLevelWords Words that are set to new line separately\n   *  @param {String[]} cfg.reservedNewlineWords Words that are set to newline\n   *  @param {String[]} cfg.reservedTopLevelWordsNoIndent Words that are top level but have no indentation\n   *  @param {String[]} cfg.stringTypes String types to enable: \"\", '', ``, [], N''\n   *  @param {String[]} cfg.openParens Opening parentheses to enable, like (, [\n   *  @param {String[]} cfg.closeParens Closing parentheses to enable, like ), ]\n   *  @param {String[]} cfg.indexedPlaceholderTypes Prefixes for indexed placeholders, like ?\n   *  @param {String[]} cfg.namedPlaceholderTypes Prefixes for named placeholders, like @ and :\n   *  @param {String[]} cfg.lineCommentTypes Line comments to enable, like # and --\n   *  @param {String[]} cfg.specialWordChars Special chars that can be found inside of words, like @ and #\n   *  @param {String[]} [cfg.operator] Additional operators to recognize\n   */\n  constructor(cfg) {\n    this.WHITESPACE_REGEX = /^(\\s+)/u;\n    this.NUMBER_REGEX = /^((-\\s*)?[0-9]+(\\.[0-9]+)?([eE]-?[0-9]+(\\.[0-9]+)?)?|0x[0-9a-fA-F]+|0b[01]+)\\b/u;\n\n    this.OPERATOR_REGEX = regexFactory.createOperatorRegex([\n      '<>',\n      '<=',\n      '>=',\n      ...(cfg.operators || []),\n    ]);\n\n    this.BLOCK_COMMENT_REGEX = /^(\\/\\*[^]*?(?:\\*\\/|$))/u;\n    this.LINE_COMMENT_REGEX = regexFactory.createLineCommentRegex(cfg.lineCommentTypes);\n\n    this.RESERVED_TOP_LEVEL_REGEX = regexFactory.createReservedWordRegex(cfg.reservedTopLevelWords);\n    this.RESERVED_TOP_LEVEL_NO_INDENT_REGEX = regexFactory.createReservedWordRegex(\n      cfg.reservedTopLevelWordsNoIndent\n    );\n    this.RESERVED_NEWLINE_REGEX = regexFactory.createReservedWordRegex(cfg.reservedNewlineWords);\n    this.RESERVED_PLAIN_REGEX = regexFactory.createReservedWordRegex(cfg.reservedWords);\n\n    this.WORD_REGEX = regexFactory.createWordRegex(cfg.specialWordChars);\n    this.STRING_REGEX = regexFactory.createStringRegex(cfg.stringTypes);\n\n    this.OPEN_PAREN_REGEX = regexFactory.createParenRegex(cfg.openParens);\n    this.CLOSE_PAREN_REGEX = regexFactory.createParenRegex(cfg.closeParens);\n\n    this.INDEXED_PLACEHOLDER_REGEX = regexFactory.createPlaceholderRegex(\n      cfg.indexedPlaceholderTypes,\n      '[0-9]*'\n    );\n    this.IDENT_NAMED_PLACEHOLDER_REGEX = regexFactory.createPlaceholderRegex(\n      cfg.namedPlaceholderTypes,\n      '[a-zA-Z0-9._$]+'\n    );\n    this.STRING_NAMED_PLACEHOLDER_REGEX = regexFactory.createPlaceholderRegex(\n      cfg.namedPlaceholderTypes,\n      regexFactory.createStringPattern(cfg.stringTypes)\n    );\n  }\n\n  /**\n   * Takes a SQL string and breaks it into tokens.\n   * Each token is an object with type and value.\n   *\n   * @param {String} input The SQL string\n   * @return {Object[]} tokens An array of tokens.\n   *  @return {String} token.type\n   *  @return {String} token.value\n   *  @return {String} token.whitespaceBefore Preceding whitespace\n   */\n  tokenize(input) {\n    const tokens = [];\n    let token;\n\n    // Keep processing the string until it is empty\n    while (input.length) {\n      // grab any preceding whitespace\n      const whitespaceBefore = this.getWhitespace(input);\n      input = input.substring(whitespaceBefore.length);\n\n      if (input.length) {\n        // Get the next token and the token type\n        token = this.getNextToken(input, token);\n        // Advance the string\n        input = input.substring(token.value.length);\n\n        tokens.push({ ...token, whitespaceBefore });\n      }\n    }\n    return tokens;\n  }\n\n  getWhitespace(input) {\n    const matches = input.match(this.WHITESPACE_REGEX);\n    return matches ? matches[1] : '';\n  }\n\n  getNextToken(input, previousToken) {\n    return (\n      this.getCommentToken(input) ||\n      this.getStringToken(input) ||\n      this.getOpenParenToken(input) ||\n      this.getCloseParenToken(input) ||\n      this.getPlaceholderToken(input) ||\n      this.getNumberToken(input) ||\n      this.getReservedWordToken(input, previousToken) ||\n      this.getWordToken(input) ||\n      this.getOperatorToken(input)\n    );\n  }\n\n  getCommentToken(input) {\n    return this.getLineCommentToken(input) || this.getBlockCommentToken(input);\n  }\n\n  getLineCommentToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.LINE_COMMENT,\n      regex: this.LINE_COMMENT_REGEX,\n    });\n  }\n\n  getBlockCommentToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.BLOCK_COMMENT,\n      regex: this.BLOCK_COMMENT_REGEX,\n    });\n  }\n\n  getStringToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.STRING,\n      regex: this.STRING_REGEX,\n    });\n  }\n\n  getOpenParenToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.OPEN_PAREN,\n      regex: this.OPEN_PAREN_REGEX,\n    });\n  }\n\n  getCloseParenToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.CLOSE_PAREN,\n      regex: this.CLOSE_PAREN_REGEX,\n    });\n  }\n\n  getPlaceholderToken(input) {\n    return (\n      this.getIdentNamedPlaceholderToken(input) ||\n      this.getStringNamedPlaceholderToken(input) ||\n      this.getIndexedPlaceholderToken(input)\n    );\n  }\n\n  getIdentNamedPlaceholderToken(input) {\n    return this.getPlaceholderTokenWithKey({\n      input,\n      regex: this.IDENT_NAMED_PLACEHOLDER_REGEX,\n      parseKey: (v) => v.slice(1),\n    });\n  }\n\n  getStringNamedPlaceholderToken(input) {\n    return this.getPlaceholderTokenWithKey({\n      input,\n      regex: this.STRING_NAMED_PLACEHOLDER_REGEX,\n      parseKey: (v) =>\n        this.getEscapedPlaceholderKey({ key: v.slice(2, -1), quoteChar: v.slice(-1) }),\n    });\n  }\n\n  getIndexedPlaceholderToken(input) {\n    return this.getPlaceholderTokenWithKey({\n      input,\n      regex: this.INDEXED_PLACEHOLDER_REGEX,\n      parseKey: (v) => v.slice(1),\n    });\n  }\n\n  getPlaceholderTokenWithKey({ input, regex, parseKey }) {\n    const token = this.getTokenOnFirstMatch({ input, regex, type: tokenTypes.PLACEHOLDER });\n    if (token) {\n      token.key = parseKey(token.value);\n    }\n    return token;\n  }\n\n  getEscapedPlaceholderKey({ key, quoteChar }) {\n    return key.replace(new RegExp(escapeRegExp('\\\\' + quoteChar), 'gu'), quoteChar);\n  }\n\n  // Decimal, binary, or hex numbers\n  getNumberToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.NUMBER,\n      regex: this.NUMBER_REGEX,\n    });\n  }\n\n  // Punctuation and symbols\n  getOperatorToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.OPERATOR,\n      regex: this.OPERATOR_REGEX,\n    });\n  }\n\n  getReservedWordToken(input, previousToken) {\n    // A reserved word cannot be preceded by a \".\"\n    // this makes it so in \"mytable.from\", \"from\" is not considered a reserved word\n    if (previousToken && previousToken.value && previousToken.value === '.') {\n      return undefined;\n    }\n    return (\n      this.getTopLevelReservedToken(input) ||\n      this.getNewlineReservedToken(input) ||\n      this.getTopLevelReservedTokenNoIndent(input) ||\n      this.getPlainReservedToken(input)\n    );\n  }\n\n  getTopLevelReservedToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.RESERVED_TOP_LEVEL,\n      regex: this.RESERVED_TOP_LEVEL_REGEX,\n    });\n  }\n\n  getNewlineReservedToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.RESERVED_NEWLINE,\n      regex: this.RESERVED_NEWLINE_REGEX,\n    });\n  }\n\n  getTopLevelReservedTokenNoIndent(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.RESERVED_TOP_LEVEL_NO_INDENT,\n      regex: this.RESERVED_TOP_LEVEL_NO_INDENT_REGEX,\n    });\n  }\n\n  getPlainReservedToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.RESERVED,\n      regex: this.RESERVED_PLAIN_REGEX,\n    });\n  }\n\n  getWordToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.WORD,\n      regex: this.WORD_REGEX,\n    });\n  }\n\n  getTokenOnFirstMatch({ input, type, regex }) {\n    const matches = input.match(regex);\n\n    return matches ? { type, value: matches[1] } : undefined;\n  }\n}\n","import Formatter from '../core/Formatter';\nimport Tokenizer from '../core/Tokenizer';\n\nconst reservedWords = [\n  'ABS',\n  'ACTIVATE',\n  'ALIAS',\n  'ALL',\n  'ALLOCATE',\n  'ALLOW',\n  'ALTER',\n  'ANY',\n  'ARE',\n  'ARRAY',\n  'AS',\n  'ASC',\n  'ASENSITIVE',\n  'ASSOCIATE',\n  'ASUTIME',\n  'ASYMMETRIC',\n  'AT',\n  'ATOMIC',\n  'ATTRIBUTES',\n  'AUDIT',\n  'AUTHORIZATION',\n  'AUX',\n  'AUXILIARY',\n  'AVG',\n  'BEFORE',\n  'BEGIN',\n  'BETWEEN',\n  'BIGINT',\n  'BINARY',\n  'BLOB',\n  'BOOLEAN',\n  'BOTH',\n  'BUFFERPOOL',\n  'BY',\n  'CACHE',\n  'CALL',\n  'CALLED',\n  'CAPTURE',\n  'CARDINALITY',\n  'CASCADED',\n  'CASE',\n  'CAST',\n  'CCSID',\n  'CEIL',\n  'CEILING',\n  'CHAR',\n  'CHARACTER',\n  'CHARACTER_LENGTH',\n  'CHAR_LENGTH',\n  'CHECK',\n  'CLOB',\n  'CLONE',\n  'CLOSE',\n  'CLUSTER',\n  'COALESCE',\n  'COLLATE',\n  'COLLECT',\n  'COLLECTION',\n  'COLLID',\n  'COLUMN',\n  'COMMENT',\n  'COMMIT',\n  'CONCAT',\n  'CONDITION',\n  'CONNECT',\n  'CONNECTION',\n  'CONSTRAINT',\n  'CONTAINS',\n  'CONTINUE',\n  'CONVERT',\n  'CORR',\n  'CORRESPONDING',\n  'COUNT',\n  'COUNT_BIG',\n  'COVAR_POP',\n  'COVAR_SAMP',\n  'CREATE',\n  'CROSS',\n  'CUBE',\n  'CUME_DIST',\n  'CURRENT',\n  'CURRENT_DATE',\n  'CURRENT_DEFAULT_TRANSFORM_GROUP',\n  'CURRENT_LC_CTYPE',\n  'CURRENT_PATH',\n  'CURRENT_ROLE',\n  'CURRENT_SCHEMA',\n  'CURRENT_SERVER',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_TIMEZONE',\n  'CURRENT_TRANSFORM_GROUP_FOR_TYPE',\n  'CURRENT_USER',\n  'CURSOR',\n  'CYCLE',\n  'DATA',\n  'DATABASE',\n  'DATAPARTITIONNAME',\n  'DATAPARTITIONNUM',\n  'DATE',\n  'DAY',\n  'DAYS',\n  'DB2GENERAL',\n  'DB2GENRL',\n  'DB2SQL',\n  'DBINFO',\n  'DBPARTITIONNAME',\n  'DBPARTITIONNUM',\n  'DEALLOCATE',\n  'DEC',\n  'DECIMAL',\n  'DECLARE',\n  'DEFAULT',\n  'DEFAULTS',\n  'DEFINITION',\n  'DELETE',\n  'DENSERANK',\n  'DENSE_RANK',\n  'DEREF',\n  'DESCRIBE',\n  'DESCRIPTOR',\n  'DETERMINISTIC',\n  'DIAGNOSTICS',\n  'DISABLE',\n  'DISALLOW',\n  'DISCONNECT',\n  'DISTINCT',\n  'DO',\n  'DOCUMENT',\n  'DOUBLE',\n  'DROP',\n  'DSSIZE',\n  'DYNAMIC',\n  'EACH',\n  'EDITPROC',\n  'ELEMENT',\n  'ELSE',\n  'ELSEIF',\n  'ENABLE',\n  'ENCODING',\n  'ENCRYPTION',\n  'END',\n  'END-EXEC',\n  'ENDING',\n  'ERASE',\n  'ESCAPE',\n  'EVERY',\n  'EXCEPTION',\n  'EXCLUDING',\n  'EXCLUSIVE',\n  'EXEC',\n  'EXECUTE',\n  'EXISTS',\n  'EXIT',\n  'EXP',\n  'EXPLAIN',\n  'EXTENDED',\n  'EXTERNAL',\n  'EXTRACT',\n  'FALSE',\n  'FENCED',\n  'FETCH',\n  'FIELDPROC',\n  'FILE',\n  'FILTER',\n  'FINAL',\n  'FIRST',\n  'FLOAT',\n  'FLOOR',\n  'FOR',\n  'FOREIGN',\n  'FREE',\n  'FULL',\n  'FUNCTION',\n  'FUSION',\n  'GENERAL',\n  'GENERATED',\n  'GET',\n  'GLOBAL',\n  'GOTO',\n  'GRANT',\n  'GRAPHIC',\n  'GROUP',\n  'GROUPING',\n  'HANDLER',\n  'HASH',\n  'HASHED_VALUE',\n  'HINT',\n  'HOLD',\n  'HOUR',\n  'HOURS',\n  'IDENTITY',\n  'IF',\n  'IMMEDIATE',\n  'IN',\n  'INCLUDING',\n  'INCLUSIVE',\n  'INCREMENT',\n  'INDEX',\n  'INDICATOR',\n  'INDICATORS',\n  'INF',\n  'INFINITY',\n  'INHERIT',\n  'INNER',\n  'INOUT',\n  'INSENSITIVE',\n  'INSERT',\n  'INT',\n  'INTEGER',\n  'INTEGRITY',\n  'INTERSECTION',\n  'INTERVAL',\n  'INTO',\n  'IS',\n  'ISOBID',\n  'ISOLATION',\n  'ITERATE',\n  'JAR',\n  'JAVA',\n  'KEEP',\n  'KEY',\n  'LABEL',\n  'LANGUAGE',\n  'LARGE',\n  'LATERAL',\n  'LC_CTYPE',\n  'LEADING',\n  'LEAVE',\n  'LEFT',\n  'LIKE',\n  'LINKTYPE',\n  'LN',\n  'LOCAL',\n  'LOCALDATE',\n  'LOCALE',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOCATOR',\n  'LOCATORS',\n  'LOCK',\n  'LOCKMAX',\n  'LOCKSIZE',\n  'LONG',\n  'LOOP',\n  'LOWER',\n  'MAINTAINED',\n  'MATCH',\n  'MATERIALIZED',\n  'MAX',\n  'MAXVALUE',\n  'MEMBER',\n  'MERGE',\n  'METHOD',\n  'MICROSECOND',\n  'MICROSECONDS',\n  'MIN',\n  'MINUTE',\n  'MINUTES',\n  'MINVALUE',\n  'MOD',\n  'MODE',\n  'MODIFIES',\n  'MODULE',\n  'MONTH',\n  'MONTHS',\n  'MULTISET',\n  'NAN',\n  'NATIONAL',\n  'NATURAL',\n  'NCHAR',\n  'NCLOB',\n  'NEW',\n  'NEW_TABLE',\n  'NEXTVAL',\n  'NO',\n  'NOCACHE',\n  'NOCYCLE',\n  'NODENAME',\n  'NODENUMBER',\n  'NOMAXVALUE',\n  'NOMINVALUE',\n  'NONE',\n  'NOORDER',\n  'NORMALIZE',\n  'NORMALIZED',\n  'NOT',\n  'NULL',\n  'NULLIF',\n  'NULLS',\n  'NUMERIC',\n  'NUMPARTS',\n  'OBID',\n  'OCTET_LENGTH',\n  'OF',\n  'OFFSET',\n  'OLD',\n  'OLD_TABLE',\n  'ON',\n  'ONLY',\n  'OPEN',\n  'OPTIMIZATION',\n  'OPTIMIZE',\n  'OPTION',\n  'ORDER',\n  'OUT',\n  'OUTER',\n  'OVER',\n  'OVERLAPS',\n  'OVERLAY',\n  'OVERRIDING',\n  'PACKAGE',\n  'PADDED',\n  'PAGESIZE',\n  'PARAMETER',\n  'PART',\n  'PARTITION',\n  'PARTITIONED',\n  'PARTITIONING',\n  'PARTITIONS',\n  'PASSWORD',\n  'PATH',\n  'PERCENTILE_CONT',\n  'PERCENTILE_DISC',\n  'PERCENT_RANK',\n  'PIECESIZE',\n  'PLAN',\n  'POSITION',\n  'POWER',\n  'PRECISION',\n  'PREPARE',\n  'PREVVAL',\n  'PRIMARY',\n  'PRIQTY',\n  'PRIVILEGES',\n  'PROCEDURE',\n  'PROGRAM',\n  'PSID',\n  'PUBLIC',\n  'QUERY',\n  'QUERYNO',\n  'RANGE',\n  'RANK',\n  'READ',\n  'READS',\n  'REAL',\n  'RECOVERY',\n  'RECURSIVE',\n  'REF',\n  'REFERENCES',\n  'REFERENCING',\n  'REFRESH',\n  'REGR_AVGX',\n  'REGR_AVGY',\n  'REGR_COUNT',\n  'REGR_INTERCEPT',\n  'REGR_R2',\n  'REGR_SLOPE',\n  'REGR_SXX',\n  'REGR_SXY',\n  'REGR_SYY',\n  'RELEASE',\n  'RENAME',\n  'REPEAT',\n  'RESET',\n  'RESIGNAL',\n  'RESTART',\n  'RESTRICT',\n  'RESULT',\n  'RESULT_SET_LOCATOR',\n  'RETURN',\n  'RETURNS',\n  'REVOKE',\n  'RIGHT',\n  'ROLE',\n  'ROLLBACK',\n  'ROLLUP',\n  'ROUND_CEILING',\n  'ROUND_DOWN',\n  'ROUND_FLOOR',\n  'ROUND_HALF_DOWN',\n  'ROUND_HALF_EVEN',\n  'ROUND_HALF_UP',\n  'ROUND_UP',\n  'ROUTINE',\n  'ROW',\n  'ROWNUMBER',\n  'ROWS',\n  'ROWSET',\n  'ROW_NUMBER',\n  'RRN',\n  'RUN',\n  'SAVEPOINT',\n  'SCHEMA',\n  'SCOPE',\n  'SCRATCHPAD',\n  'SCROLL',\n  'SEARCH',\n  'SECOND',\n  'SECONDS',\n  'SECQTY',\n  'SECURITY',\n  'SENSITIVE',\n  'SEQUENCE',\n  'SESSION',\n  'SESSION_USER',\n  'SIGNAL',\n  'SIMILAR',\n  'SIMPLE',\n  'SMALLINT',\n  'SNAN',\n  'SOME',\n  'SOURCE',\n  'SPECIFIC',\n  'SPECIFICTYPE',\n  'SQL',\n  'SQLEXCEPTION',\n  'SQLID',\n  'SQLSTATE',\n  'SQLWARNING',\n  'SQRT',\n  'STACKED',\n  'STANDARD',\n  'START',\n  'STARTING',\n  'STATEMENT',\n  'STATIC',\n  'STATMENT',\n  'STAY',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'STOGROUP',\n  'STORES',\n  'STYLE',\n  'SUBMULTISET',\n  'SUBSTRING',\n  'SUM',\n  'SUMMARY',\n  'SYMMETRIC',\n  'SYNONYM',\n  'SYSFUN',\n  'SYSIBM',\n  'SYSPROC',\n  'SYSTEM',\n  'SYSTEM_USER',\n  'TABLE',\n  'TABLESAMPLE',\n  'TABLESPACE',\n  'THEN',\n  'TIME',\n  'TIMESTAMP',\n  'TIMEZONE_HOUR',\n  'TIMEZONE_MINUTE',\n  'TO',\n  'TRAILING',\n  'TRANSACTION',\n  'TRANSLATE',\n  'TRANSLATION',\n  'TREAT',\n  'TRIGGER',\n  'TRIM',\n  'TRUE',\n  'TRUNCATE',\n  'TYPE',\n  'UESCAPE',\n  'UNDO',\n  'UNIQUE',\n  'UNKNOWN',\n  'UNNEST',\n  'UNTIL',\n  'UPPER',\n  'USAGE',\n  'USER',\n  'USING',\n  'VALIDPROC',\n  'VALUE',\n  'VARCHAR',\n  'VARIABLE',\n  'VARIANT',\n  'VARYING',\n  'VAR_POP',\n  'VAR_SAMP',\n  'VCAT',\n  'VERSION',\n  'VIEW',\n  'VOLATILE',\n  'VOLUMES',\n  'WHEN',\n  'WHENEVER',\n  'WHILE',\n  'WIDTH_BUCKET',\n  'WINDOW',\n  'WITH',\n  'WITHIN',\n  'WITHOUT',\n  'WLM',\n  'WRITE',\n  'XMLELEMENT',\n  'XMLEXISTS',\n  'XMLNAMESPACES',\n  'YEAR',\n  'YEARS',\n];\n\nconst reservedTopLevelWords = [\n  'ADD',\n  'AFTER',\n  'ALTER COLUMN',\n  'ALTER TABLE',\n  'DELETE FROM',\n  'EXCEPT',\n  'FETCH FIRST',\n  'FROM',\n  'GROUP BY',\n  'GO',\n  'HAVING',\n  'INSERT INTO',\n  'INTERSECT',\n  'LIMIT',\n  'ORDER BY',\n  'SELECT',\n  'SET CURRENT SCHEMA',\n  'SET SCHEMA',\n  'SET',\n  'UPDATE',\n  'VALUES',\n  'WHERE',\n];\n\nconst reservedTopLevelWordsNoIndent = ['INTERSECT', 'INTERSECT ALL', 'MINUS', 'UNION', 'UNION ALL'];\n\nconst reservedNewlineWords = [\n  'AND',\n  'OR',\n  // joins\n  'JOIN',\n  'INNER JOIN',\n  'LEFT JOIN',\n  'LEFT OUTER JOIN',\n  'RIGHT JOIN',\n  'RIGHT OUTER JOIN',\n  'FULL JOIN',\n  'FULL OUTER JOIN',\n  'CROSS JOIN',\n  'NATURAL JOIN',\n];\n\n// For reference: https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_72/db2/rbafzintro.htm\nexport default class Db2Formatter extends Formatter {\n  tokenizer() {\n    return new Tokenizer({\n      reservedWords,\n      reservedTopLevelWords,\n      reservedNewlineWords,\n      reservedTopLevelWordsNoIndent,\n      stringTypes: [`\"\"`, \"''\", '``', '[]'],\n      openParens: ['('],\n      closeParens: [')'],\n      indexedPlaceholderTypes: ['?'],\n      namedPlaceholderTypes: [':'],\n      lineCommentTypes: ['--'],\n      specialWordChars: ['#', '@'],\n      operators: ['**', '!=', '!>', '!>', '||'],\n    });\n  }\n}\n","import Formatter from '../core/Formatter';\nimport Tokenizer from '../core/Tokenizer';\n\nconst reservedWords = [\n  'ACCESSIBLE',\n  'ADD',\n  'ALL',\n  'ALTER',\n  'ANALYZE',\n  'AND',\n  'AS',\n  'ASC',\n  'ASENSITIVE',\n  'BEFORE',\n  'BETWEEN',\n  'BIGINT',\n  'BINARY',\n  'BLOB',\n  'BOTH',\n  'BY',\n  'CALL',\n  'CASCADE',\n  'CASE',\n  'CHANGE',\n  'CHAR',\n  'CHARACTER',\n  'CHECK',\n  'COLLATE',\n  'COLUMN',\n  'CONDITION',\n  'CONSTRAINT',\n  'CONTINUE',\n  'CONVERT',\n  'CREATE',\n  'CROSS',\n  'CURRENT_DATE',\n  'CURRENT_ROLE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_USER',\n  'CURSOR',\n  'DATABASE',\n  'DATABASES',\n  'DAY_HOUR',\n  'DAY_MICROSECOND',\n  'DAY_MINUTE',\n  'DAY_SECOND',\n  'DEC',\n  'DECIMAL',\n  'DECLARE',\n  'DEFAULT',\n  'DELAYED',\n  'DELETE',\n  'DESC',\n  'DESCRIBE',\n  'DETERMINISTIC',\n  'DISTINCT',\n  'DISTINCTROW',\n  'DIV',\n  'DO_DOMAIN_IDS',\n  'DOUBLE',\n  'DROP',\n  'DUAL',\n  'EACH',\n  'ELSE',\n  'ELSEIF',\n  'ENCLOSED',\n  'ESCAPED',\n  'EXCEPT',\n  'EXISTS',\n  'EXIT',\n  'EXPLAIN',\n  'FALSE',\n  'FETCH',\n  'FLOAT',\n  'FLOAT4',\n  'FLOAT8',\n  'FOR',\n  'FORCE',\n  'FOREIGN',\n  'FROM',\n  'FULLTEXT',\n  'GENERAL',\n  'GRANT',\n  'GROUP',\n  'HAVING',\n  'HIGH_PRIORITY',\n  'HOUR_MICROSECOND',\n  'HOUR_MINUTE',\n  'HOUR_SECOND',\n  'IF',\n  'IGNORE',\n  'IGNORE_DOMAIN_IDS',\n  'IGNORE_SERVER_IDS',\n  'IN',\n  'INDEX',\n  'INFILE',\n  'INNER',\n  'INOUT',\n  'INSENSITIVE',\n  'INSERT',\n  'INT',\n  'INT1',\n  'INT2',\n  'INT3',\n  'INT4',\n  'INT8',\n  'INTEGER',\n  'INTERSECT',\n  'INTERVAL',\n  'INTO',\n  'IS',\n  'ITERATE',\n  'JOIN',\n  'KEY',\n  'KEYS',\n  'KILL',\n  'LEADING',\n  'LEAVE',\n  'LEFT',\n  'LIKE',\n  'LIMIT',\n  'LINEAR',\n  'LINES',\n  'LOAD',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOCK',\n  'LONG',\n  'LONGBLOB',\n  'LONGTEXT',\n  'LOOP',\n  'LOW_PRIORITY',\n  'MASTER_HEARTBEAT_PERIOD',\n  'MASTER_SSL_VERIFY_SERVER_CERT',\n  'MATCH',\n  'MAXVALUE',\n  'MEDIUMBLOB',\n  'MEDIUMINT',\n  'MEDIUMTEXT',\n  'MIDDLEINT',\n  'MINUTE_MICROSECOND',\n  'MINUTE_SECOND',\n  'MOD',\n  'MODIFIES',\n  'NATURAL',\n  'NOT',\n  'NO_WRITE_TO_BINLOG',\n  'NULL',\n  'NUMERIC',\n  'ON',\n  'OPTIMIZE',\n  'OPTION',\n  'OPTIONALLY',\n  'OR',\n  'ORDER',\n  'OUT',\n  'OUTER',\n  'OUTFILE',\n  'OVER',\n  'PAGE_CHECKSUM',\n  'PARSE_VCOL_EXPR',\n  'PARTITION',\n  'POSITION',\n  'PRECISION',\n  'PRIMARY',\n  'PROCEDURE',\n  'PURGE',\n  'RANGE',\n  'READ',\n  'READS',\n  'READ_WRITE',\n  'REAL',\n  'RECURSIVE',\n  'REF_SYSTEM_ID',\n  'REFERENCES',\n  'REGEXP',\n  'RELEASE',\n  'RENAME',\n  'REPEAT',\n  'REPLACE',\n  'REQUIRE',\n  'RESIGNAL',\n  'RESTRICT',\n  'RETURN',\n  'RETURNING',\n  'REVOKE',\n  'RIGHT',\n  'RLIKE',\n  'ROWS',\n  'SCHEMA',\n  'SCHEMAS',\n  'SECOND_MICROSECOND',\n  'SELECT',\n  'SENSITIVE',\n  'SEPARATOR',\n  'SET',\n  'SHOW',\n  'SIGNAL',\n  'SLOW',\n  'SMALLINT',\n  'SPATIAL',\n  'SPECIFIC',\n  'SQL',\n  'SQLEXCEPTION',\n  'SQLSTATE',\n  'SQLWARNING',\n  'SQL_BIG_RESULT',\n  'SQL_CALC_FOUND_ROWS',\n  'SQL_SMALL_RESULT',\n  'SSL',\n  'STARTING',\n  'STATS_AUTO_RECALC',\n  'STATS_PERSISTENT',\n  'STATS_SAMPLE_PAGES',\n  'STRAIGHT_JOIN',\n  'TABLE',\n  'TERMINATED',\n  'THEN',\n  'TINYBLOB',\n  'TINYINT',\n  'TINYTEXT',\n  'TO',\n  'TRAILING',\n  'TRIGGER',\n  'TRUE',\n  'UNDO',\n  'UNION',\n  'UNIQUE',\n  'UNLOCK',\n  'UNSIGNED',\n  'UPDATE',\n  'USAGE',\n  'USE',\n  'USING',\n  'UTC_DATE',\n  'UTC_TIME',\n  'UTC_TIMESTAMP',\n  'VALUES',\n  'VARBINARY',\n  'VARCHAR',\n  'VARCHARACTER',\n  'VARYING',\n  'WHEN',\n  'WHERE',\n  'WHILE',\n  'WINDOW',\n  'WITH',\n  'WRITE',\n  'XOR',\n  'YEAR_MONTH',\n  'ZEROFILL',\n];\n\nconst reservedTopLevelWords = [\n  'ADD',\n  'ALTER COLUMN',\n  'ALTER TABLE',\n  'DELETE FROM',\n  'EXCEPT',\n  'FROM',\n  'GROUP BY',\n  'HAVING',\n  'INSERT INTO',\n  'INSERT',\n  'LIMIT',\n  'ORDER BY',\n  'SELECT',\n  'SET',\n  'UPDATE',\n  'VALUES',\n  'WHERE',\n];\n\nconst reservedTopLevelWordsNoIndent = ['INTERSECT', 'INTERSECT ALL', 'UNION', 'UNION ALL'];\n\nconst reservedNewlineWords = [\n  'AND',\n  'ELSE',\n  'OR',\n  'WHEN',\n  // joins\n  'JOIN',\n  'INNER JOIN',\n  'LEFT JOIN',\n  'LEFT OUTER JOIN',\n  'RIGHT JOIN',\n  'RIGHT OUTER JOIN',\n  'CROSS JOIN',\n  'NATURAL JOIN',\n  // non-standard joins\n  'STRAIGHT_JOIN',\n  'NATURAL LEFT JOIN',\n  'NATURAL LEFT OUTER JOIN',\n  'NATURAL RIGHT JOIN',\n  'NATURAL RIGHT OUTER JOIN',\n];\n\n// For reference: https://mariadb.com/kb/en/sql-statements-structure/\nexport default class MariaDbFormatter extends Formatter {\n  tokenizer() {\n    return new Tokenizer({\n      reservedWords,\n      reservedTopLevelWords,\n      reservedNewlineWords,\n      reservedTopLevelWordsNoIndent,\n      stringTypes: ['``', \"''\", '\"\"'],\n      openParens: ['(', 'CASE'],\n      closeParens: [')', 'END'],\n      indexedPlaceholderTypes: ['?'],\n      namedPlaceholderTypes: [],\n      lineCommentTypes: ['--', '#'],\n      specialWordChars: ['@'],\n      operators: [':=', '<<', '>>', '!=', '<>', '<=>', '&&', '||'],\n    });\n  }\n}\n","import Formatter from '../core/Formatter';\nimport Tokenizer from '../core/Tokenizer';\n\nconst reservedWords = [\n  'ACCESSIBLE',\n  'ADD',\n  'ALL',\n  'ALTER',\n  'ANALYZE',\n  'AND',\n  'AS',\n  'ASC',\n  'ASENSITIVE',\n  'BEFORE',\n  'BETWEEN',\n  'BIGINT',\n  'BINARY',\n  'BLOB',\n  'BOTH',\n  'BY',\n  'CALL',\n  'CASCADE',\n  'CASE',\n  'CHANGE',\n  'CHAR',\n  'CHARACTER',\n  'CHECK',\n  'COLLATE',\n  'COLUMN',\n  'CONDITION',\n  'CONSTRAINT',\n  'CONTINUE',\n  'CONVERT',\n  'CREATE',\n  'CROSS',\n  'CUBE',\n  'CUME_DIST',\n  'CURRENT_DATE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_USER',\n  'CURSOR',\n  'DATABASE',\n  'DATABASES',\n  'DAY_HOUR',\n  'DAY_MICROSECOND',\n  'DAY_MINUTE',\n  'DAY_SECOND',\n  'DEC',\n  'DECIMAL',\n  'DECLARE',\n  'DEFAULT',\n  'DELAYED',\n  'DELETE',\n  'DENSE_RANK',\n  'DESC',\n  'DESCRIBE',\n  'DETERMINISTIC',\n  'DISTINCT',\n  'DISTINCTROW',\n  'DIV',\n  'DOUBLE',\n  'DROP',\n  'DUAL',\n  'EACH',\n  'ELSE',\n  'ELSEIF',\n  'EMPTY',\n  'ENCLOSED',\n  'ESCAPED',\n  'EXCEPT',\n  'EXISTS',\n  'EXIT',\n  'EXPLAIN',\n  'FALSE',\n  'FETCH',\n  'FIRST_VALUE',\n  'FLOAT',\n  'FLOAT4',\n  'FLOAT8',\n  'FOR',\n  'FORCE',\n  'FOREIGN',\n  'FROM',\n  'FULLTEXT',\n  'FUNCTION',\n  'GENERATED',\n  'GET',\n  'GRANT',\n  'GROUP',\n  'GROUPING',\n  'GROUPS',\n  'HAVING',\n  'HIGH_PRIORITY',\n  'HOUR_MICROSECOND',\n  'HOUR_MINUTE',\n  'HOUR_SECOND',\n  'IF',\n  'IGNORE',\n  'IN',\n  'INDEX',\n  'INFILE',\n  'INNER',\n  'INOUT',\n  'INSENSITIVE',\n  'INSERT',\n  'INT',\n  'INT1',\n  'INT2',\n  'INT3',\n  'INT4',\n  'INT8',\n  'INTEGER',\n  'INTERVAL',\n  'INTO',\n  'IO_AFTER_GTIDS',\n  'IO_BEFORE_GTIDS',\n  'IS',\n  'ITERATE',\n  'JOIN',\n  'JSON_TABLE',\n  'KEY',\n  'KEYS',\n  'KILL',\n  'LAG',\n  'LAST_VALUE',\n  'LATERAL',\n  'LEAD',\n  'LEADING',\n  'LEAVE',\n  'LEFT',\n  'LIKE',\n  'LIMIT',\n  'LINEAR',\n  'LINES',\n  'LOAD',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOCK',\n  'LONG',\n  'LONGBLOB',\n  'LONGTEXT',\n  'LOOP',\n  'LOW_PRIORITY',\n  'MASTER_BIND',\n  'MASTER_SSL_VERIFY_SERVER_CERT',\n  'MATCH',\n  'MAXVALUE',\n  'MEDIUMBLOB',\n  'MEDIUMINT',\n  'MEDIUMTEXT',\n  'MIDDLEINT',\n  'MINUTE_MICROSECOND',\n  'MINUTE_SECOND',\n  'MOD',\n  'MODIFIES',\n  'NATURAL',\n  'NOT',\n  'NO_WRITE_TO_BINLOG',\n  'NTH_VALUE',\n  'NTILE',\n  'NULL',\n  'NUMERIC',\n  'OF',\n  'ON',\n  'OPTIMIZE',\n  'OPTIMIZER_COSTS',\n  'OPTION',\n  'OPTIONALLY',\n  'OR',\n  'ORDER',\n  'OUT',\n  'OUTER',\n  'OUTFILE',\n  'OVER',\n  'PARTITION',\n  'PERCENT_RANK',\n  'PRECISION',\n  'PRIMARY',\n  'PROCEDURE',\n  'PURGE',\n  'RANGE',\n  'RANK',\n  'READ',\n  'READS',\n  'READ_WRITE',\n  'REAL',\n  'RECURSIVE',\n  'REFERENCES',\n  'REGEXP',\n  'RELEASE',\n  'RENAME',\n  'REPEAT',\n  'REPLACE',\n  'REQUIRE',\n  'RESIGNAL',\n  'RESTRICT',\n  'RETURN',\n  'REVOKE',\n  'RIGHT',\n  'RLIKE',\n  'ROW',\n  'ROWS',\n  'ROW_NUMBER',\n  'SCHEMA',\n  'SCHEMAS',\n  'SECOND_MICROSECOND',\n  'SELECT',\n  'SENSITIVE',\n  'SEPARATOR',\n  'SET',\n  'SHOW',\n  'SIGNAL',\n  'SMALLINT',\n  'SPATIAL',\n  'SPECIFIC',\n  'SQL',\n  'SQLEXCEPTION',\n  'SQLSTATE',\n  'SQLWARNING',\n  'SQL_BIG_RESULT',\n  'SQL_CALC_FOUND_ROWS',\n  'SQL_SMALL_RESULT',\n  'SSL',\n  'STARTING',\n  'STORED',\n  'STRAIGHT_JOIN',\n  'SYSTEM',\n  'TABLE',\n  'TERMINATED',\n  'THEN',\n  'TINYBLOB',\n  'TINYINT',\n  'TINYTEXT',\n  'TO',\n  'TRAILING',\n  'TRIGGER',\n  'TRUE',\n  'UNDO',\n  'UNION',\n  'UNIQUE',\n  'UNLOCK',\n  'UNSIGNED',\n  'UPDATE',\n  'USAGE',\n  'USE',\n  'USING',\n  'UTC_DATE',\n  'UTC_TIME',\n  'UTC_TIMESTAMP',\n  'VALUES',\n  'VARBINARY',\n  'VARCHAR',\n  'VARCHARACTER',\n  'VARYING',\n  'VIRTUAL',\n  'WHEN',\n  'WHERE',\n  'WHILE',\n  'WINDOW',\n  'WITH',\n  'WRITE',\n  'XOR',\n  'YEAR_MONTH',\n  'ZEROFILL',\n];\n\nconst reservedTopLevelWords = [\n  'ADD',\n  'ALTER COLUMN',\n  'ALTER TABLE',\n  'DELETE FROM',\n  'EXCEPT',\n  'FROM',\n  'GROUP BY',\n  'HAVING',\n  'INSERT INTO',\n  'INSERT',\n  'LIMIT',\n  'ORDER BY',\n  'SELECT',\n  'SET',\n  'UPDATE',\n  'VALUES',\n  'WHERE',\n];\n\nconst reservedTopLevelWordsNoIndent = ['INTERSECT', 'INTERSECT ALL', 'UNION', 'UNION ALL'];\n\nconst reservedNewlineWords = [\n  'AND',\n  'ELSE',\n  'OR',\n  'WHEN',\n  // joins\n  'JOIN',\n  'INNER JOIN',\n  'LEFT JOIN',\n  'LEFT OUTER JOIN',\n  'RIGHT JOIN',\n  'RIGHT OUTER JOIN',\n  'CROSS JOIN',\n  'NATURAL JOIN',\n  // non-standard joins\n  'STRAIGHT_JOIN',\n  'NATURAL LEFT JOIN',\n  'NATURAL LEFT OUTER JOIN',\n  'NATURAL RIGHT JOIN',\n  'NATURAL RIGHT OUTER JOIN',\n];\n\nexport default class MySqlFormatter extends Formatter {\n  tokenizer() {\n    return new Tokenizer({\n      reservedWords,\n      reservedTopLevelWords,\n      reservedNewlineWords,\n      reservedTopLevelWordsNoIndent,\n      stringTypes: ['``', \"''\", '\"\"'],\n      openParens: ['(', 'CASE'],\n      closeParens: [')', 'END'],\n      indexedPlaceholderTypes: ['?'],\n      namedPlaceholderTypes: [],\n      lineCommentTypes: ['--', '#'],\n      specialWordChars: ['@'],\n      operators: [':=', '<<', '>>', '!=', '<>', '<=>', '&&', '||', '->', '->>'],\n    });\n  }\n}\n","import Formatter from '../core/Formatter';\nimport Tokenizer from '../core/Tokenizer';\n\nconst reservedWords = [\n  'ALL',\n  'ALTER',\n  'ANALYZE',\n  'AND',\n  'ANY',\n  'ARRAY',\n  'AS',\n  'ASC',\n  'BEGIN',\n  'BETWEEN',\n  'BINARY',\n  'BOOLEAN',\n  'BREAK',\n  'BUCKET',\n  'BUILD',\n  'BY',\n  'CALL',\n  'CASE',\n  'CAST',\n  'CLUSTER',\n  'COLLATE',\n  'COLLECTION',\n  'COMMIT',\n  'CONNECT',\n  'CONTINUE',\n  'CORRELATE',\n  'COVER',\n  'CREATE',\n  'DATABASE',\n  'DATASET',\n  'DATASTORE',\n  'DECLARE',\n  'DECREMENT',\n  'DELETE',\n  'DERIVED',\n  'DESC',\n  'DESCRIBE',\n  'DISTINCT',\n  'DO',\n  'DROP',\n  'EACH',\n  'ELEMENT',\n  'ELSE',\n  'END',\n  'EVERY',\n  'EXCEPT',\n  'EXCLUDE',\n  'EXECUTE',\n  'EXISTS',\n  'EXPLAIN',\n  'FALSE',\n  'FETCH',\n  'FIRST',\n  'FLATTEN',\n  'FOR',\n  'FORCE',\n  'FROM',\n  'FUNCTION',\n  'GRANT',\n  'GROUP',\n  'GSI',\n  'HAVING',\n  'IF',\n  'IGNORE',\n  'ILIKE',\n  'IN',\n  'INCLUDE',\n  'INCREMENT',\n  'INDEX',\n  'INFER',\n  'INLINE',\n  'INNER',\n  'INSERT',\n  'INTERSECT',\n  'INTO',\n  'IS',\n  'JOIN',\n  'KEY',\n  'KEYS',\n  'KEYSPACE',\n  'KNOWN',\n  'LAST',\n  'LEFT',\n  'LET',\n  'LETTING',\n  'LIKE',\n  'LIMIT',\n  'LSM',\n  'MAP',\n  'MAPPING',\n  'MATCHED',\n  'MATERIALIZED',\n  'MERGE',\n  'MISSING',\n  'NAMESPACE',\n  'NEST',\n  'NOT',\n  'NULL',\n  'NUMBER',\n  'OBJECT',\n  'OFFSET',\n  'ON',\n  'OPTION',\n  'OR',\n  'ORDER',\n  'OUTER',\n  'OVER',\n  'PARSE',\n  'PARTITION',\n  'PASSWORD',\n  'PATH',\n  'POOL',\n  'PREPARE',\n  'PRIMARY',\n  'PRIVATE',\n  'PRIVILEGE',\n  'PROCEDURE',\n  'PUBLIC',\n  'RAW',\n  'REALM',\n  'REDUCE',\n  'RENAME',\n  'RETURN',\n  'RETURNING',\n  'REVOKE',\n  'RIGHT',\n  'ROLE',\n  'ROLLBACK',\n  'SATISFIES',\n  'SCHEMA',\n  'SELECT',\n  'SELF',\n  'SEMI',\n  'SET',\n  'SHOW',\n  'SOME',\n  'START',\n  'STATISTICS',\n  'STRING',\n  'SYSTEM',\n  'THEN',\n  'TO',\n  'TRANSACTION',\n  'TRIGGER',\n  'TRUE',\n  'TRUNCATE',\n  'UNDER',\n  'UNION',\n  'UNIQUE',\n  'UNKNOWN',\n  'UNNEST',\n  'UNSET',\n  'UPDATE',\n  'UPSERT',\n  'USE',\n  'USER',\n  'USING',\n  'VALIDATE',\n  'VALUE',\n  'VALUED',\n  'VALUES',\n  'VIA',\n  'VIEW',\n  'WHEN',\n  'WHERE',\n  'WHILE',\n  'WITH',\n  'WITHIN',\n  'WORK',\n  'XOR',\n];\n\nconst reservedTopLevelWords = [\n  'DELETE FROM',\n  'EXCEPT ALL',\n  'EXCEPT',\n  'EXPLAIN DELETE FROM',\n  'EXPLAIN UPDATE',\n  'EXPLAIN UPSERT',\n  'FROM',\n  'GROUP BY',\n  'HAVING',\n  'INFER',\n  'INSERT INTO',\n  'LET',\n  'LIMIT',\n  'MERGE',\n  'NEST',\n  'ORDER BY',\n  'PREPARE',\n  'SELECT',\n  'SET CURRENT SCHEMA',\n  'SET SCHEMA',\n  'SET',\n  'UNNEST',\n  'UPDATE',\n  'UPSERT',\n  'USE KEYS',\n  'VALUES',\n  'WHERE',\n];\n\nconst reservedTopLevelWordsNoIndent = ['INTERSECT', 'INTERSECT ALL', 'MINUS', 'UNION', 'UNION ALL'];\n\nconst reservedNewlineWords = [\n  'AND',\n  'OR',\n  'XOR',\n  // joins\n  'JOIN',\n  'INNER JOIN',\n  'LEFT JOIN',\n  'LEFT OUTER JOIN',\n  'RIGHT JOIN',\n  'RIGHT OUTER JOIN',\n];\n\n// For reference: http://docs.couchbase.com.s3-website-us-west-1.amazonaws.com/server/6.0/n1ql/n1ql-language-reference/index.html\nexport default class N1qlFormatter extends Formatter {\n  tokenizer() {\n    return new Tokenizer({\n      reservedWords,\n      reservedTopLevelWords,\n      reservedNewlineWords,\n      reservedTopLevelWordsNoIndent,\n      stringTypes: [`\"\"`, \"''\", '``'],\n      openParens: ['(', '[', '{'],\n      closeParens: [')', ']', '}'],\n      namedPlaceholderTypes: ['$'],\n      lineCommentTypes: ['#', '--'],\n      operators: ['==', '!='],\n    });\n  }\n}\n","import Formatter from '../core/Formatter';\nimport { isBy, isSet } from '../core/token';\nimport Tokenizer from '../core/Tokenizer';\nimport tokenTypes from '../core/tokenTypes';\n\nconst reservedWords = [\n  'A',\n  'ACCESSIBLE',\n  'AGENT',\n  'AGGREGATE',\n  'ALL',\n  'ALTER',\n  'ANY',\n  'ARRAY',\n  'AS',\n  'ASC',\n  'AT',\n  'ATTRIBUTE',\n  'AUTHID',\n  'AVG',\n  'BETWEEN',\n  'BFILE_BASE',\n  'BINARY_INTEGER',\n  'BINARY',\n  'BLOB_BASE',\n  'BLOCK',\n  'BODY',\n  'BOOLEAN',\n  'BOTH',\n  'BOUND',\n  'BREADTH',\n  'BULK',\n  'BY',\n  'BYTE',\n  'C',\n  'CALL',\n  'CALLING',\n  'CASCADE',\n  'CASE',\n  'CHAR_BASE',\n  'CHAR',\n  'CHARACTER',\n  'CHARSET',\n  'CHARSETFORM',\n  'CHARSETID',\n  'CHECK',\n  'CLOB_BASE',\n  'CLONE',\n  'CLOSE',\n  'CLUSTER',\n  'CLUSTERS',\n  'COALESCE',\n  'COLAUTH',\n  'COLLECT',\n  'COLUMNS',\n  'COMMENT',\n  'COMMIT',\n  'COMMITTED',\n  'COMPILED',\n  'COMPRESS',\n  'CONNECT',\n  'CONSTANT',\n  'CONSTRUCTOR',\n  'CONTEXT',\n  'CONTINUE',\n  'CONVERT',\n  'COUNT',\n  'CRASH',\n  'CREATE',\n  'CREDENTIAL',\n  'CURRENT',\n  'CURRVAL',\n  'CURSOR',\n  'CUSTOMDATUM',\n  'DANGLING',\n  'DATA',\n  'DATE_BASE',\n  'DATE',\n  'DAY',\n  'DECIMAL',\n  'DEFAULT',\n  'DEFINE',\n  'DELETE',\n  'DEPTH',\n  'DESC',\n  'DETERMINISTIC',\n  'DIRECTORY',\n  'DISTINCT',\n  'DO',\n  'DOUBLE',\n  'DROP',\n  'DURATION',\n  'ELEMENT',\n  'ELSIF',\n  'EMPTY',\n  'END',\n  'ESCAPE',\n  'EXCEPTIONS',\n  'EXCLUSIVE',\n  'EXECUTE',\n  'EXISTS',\n  'EXIT',\n  'EXTENDS',\n  'EXTERNAL',\n  'EXTRACT',\n  'FALSE',\n  'FETCH',\n  'FINAL',\n  'FIRST',\n  'FIXED',\n  'FLOAT',\n  'FOR',\n  'FORALL',\n  'FORCE',\n  'FROM',\n  'FUNCTION',\n  'GENERAL',\n  'GOTO',\n  'GRANT',\n  'GROUP',\n  'HASH',\n  'HEAP',\n  'HIDDEN',\n  'HOUR',\n  'IDENTIFIED',\n  'IF',\n  'IMMEDIATE',\n  'IN',\n  'INCLUDING',\n  'INDEX',\n  'INDEXES',\n  'INDICATOR',\n  'INDICES',\n  'INFINITE',\n  'INSTANTIABLE',\n  'INT',\n  'INTEGER',\n  'INTERFACE',\n  'INTERVAL',\n  'INTO',\n  'INVALIDATE',\n  'IS',\n  'ISOLATION',\n  'JAVA',\n  'LANGUAGE',\n  'LARGE',\n  'LEADING',\n  'LENGTH',\n  'LEVEL',\n  'LIBRARY',\n  'LIKE',\n  'LIKE2',\n  'LIKE4',\n  'LIKEC',\n  'LIMITED',\n  'LOCAL',\n  'LOCK',\n  'LONG',\n  'MAP',\n  'MAX',\n  'MAXLEN',\n  'MEMBER',\n  'MERGE',\n  'MIN',\n  'MINUTE',\n  'MLSLABEL',\n  'MOD',\n  'MODE',\n  'MONTH',\n  'MULTISET',\n  'NAME',\n  'NAN',\n  'NATIONAL',\n  'NATIVE',\n  'NATURAL',\n  'NATURALN',\n  'NCHAR',\n  'NEW',\n  'NEXTVAL',\n  'NOCOMPRESS',\n  'NOCOPY',\n  'NOT',\n  'NOWAIT',\n  'NULL',\n  'NULLIF',\n  'NUMBER_BASE',\n  'NUMBER',\n  'OBJECT',\n  'OCICOLL',\n  'OCIDATE',\n  'OCIDATETIME',\n  'OCIDURATION',\n  'OCIINTERVAL',\n  'OCILOBLOCATOR',\n  'OCINUMBER',\n  'OCIRAW',\n  'OCIREF',\n  'OCIREFCURSOR',\n  'OCIROWID',\n  'OCISTRING',\n  'OCITYPE',\n  'OF',\n  'OLD',\n  'ON',\n  'ONLY',\n  'OPAQUE',\n  'OPEN',\n  'OPERATOR',\n  'OPTION',\n  'ORACLE',\n  'ORADATA',\n  'ORDER',\n  'ORGANIZATION',\n  'ORLANY',\n  'ORLVARY',\n  'OTHERS',\n  'OUT',\n  'OVERLAPS',\n  'OVERRIDING',\n  'PACKAGE',\n  'PARALLEL_ENABLE',\n  'PARAMETER',\n  'PARAMETERS',\n  'PARENT',\n  'PARTITION',\n  'PASCAL',\n  'PCTFREE',\n  'PIPE',\n  'PIPELINED',\n  'PLS_INTEGER',\n  'PLUGGABLE',\n  'POSITIVE',\n  'POSITIVEN',\n  'PRAGMA',\n  'PRECISION',\n  'PRIOR',\n  'PRIVATE',\n  'PROCEDURE',\n  'PUBLIC',\n  'RAISE',\n  'RANGE',\n  'RAW',\n  'READ',\n  'REAL',\n  'RECORD',\n  'REF',\n  'REFERENCE',\n  'RELEASE',\n  'RELIES_ON',\n  'REM',\n  'REMAINDER',\n  'RENAME',\n  'RESOURCE',\n  'RESULT_CACHE',\n  'RESULT',\n  'RETURN',\n  'RETURNING',\n  'REVERSE',\n  'REVOKE',\n  'ROLLBACK',\n  'ROW',\n  'ROWID',\n  'ROWNUM',\n  'ROWTYPE',\n  'SAMPLE',\n  'SAVE',\n  'SAVEPOINT',\n  'SB1',\n  'SB2',\n  'SB4',\n  'SEARCH',\n  'SECOND',\n  'SEGMENT',\n  'SELF',\n  'SEPARATE',\n  'SEQUENCE',\n  'SERIALIZABLE',\n  'SHARE',\n  'SHORT',\n  'SIZE_T',\n  'SIZE',\n  'SMALLINT',\n  'SOME',\n  'SPACE',\n  'SPARSE',\n  'SQL',\n  'SQLCODE',\n  'SQLDATA',\n  'SQLERRM',\n  'SQLNAME',\n  'SQLSTATE',\n  'STANDARD',\n  'START',\n  'STATIC',\n  'STDDEV',\n  'STORED',\n  'STRING',\n  'STRUCT',\n  'STYLE',\n  'SUBMULTISET',\n  'SUBPARTITION',\n  'SUBSTITUTABLE',\n  'SUBTYPE',\n  'SUCCESSFUL',\n  'SUM',\n  'SYNONYM',\n  'SYSDATE',\n  'TABAUTH',\n  'TABLE',\n  'TDO',\n  'THE',\n  'THEN',\n  'TIME',\n  'TIMESTAMP',\n  'TIMEZONE_ABBR',\n  'TIMEZONE_HOUR',\n  'TIMEZONE_MINUTE',\n  'TIMEZONE_REGION',\n  'TO',\n  'TRAILING',\n  'TRANSACTION',\n  'TRANSACTIONAL',\n  'TRIGGER',\n  'TRUE',\n  'TRUSTED',\n  'TYPE',\n  'UB1',\n  'UB2',\n  'UB4',\n  'UID',\n  'UNDER',\n  'UNIQUE',\n  'UNPLUG',\n  'UNSIGNED',\n  'UNTRUSTED',\n  'USE',\n  'USER',\n  'USING',\n  'VALIDATE',\n  'VALIST',\n  'VALUE',\n  'VARCHAR',\n  'VARCHAR2',\n  'VARIABLE',\n  'VARIANCE',\n  'VARRAY',\n  'VARYING',\n  'VIEW',\n  'VIEWS',\n  'VOID',\n  'WHENEVER',\n  'WHILE',\n  'WITH',\n  'WORK',\n  'WRAPPED',\n  'WRITE',\n  'YEAR',\n  'ZONE',\n];\n\nconst reservedTopLevelWords = [\n  'ADD',\n  'ALTER COLUMN',\n  'ALTER TABLE',\n  'BEGIN',\n  'CONNECT BY',\n  'DECLARE',\n  'DELETE FROM',\n  'DELETE',\n  'END',\n  'EXCEPT',\n  'EXCEPTION',\n  'FETCH FIRST',\n  'FROM',\n  'GROUP BY',\n  'HAVING',\n  'INSERT INTO',\n  'INSERT',\n  'LIMIT',\n  'LOOP',\n  'MODIFY',\n  'ORDER BY',\n  'SELECT',\n  'SET CURRENT SCHEMA',\n  'SET SCHEMA',\n  'SET',\n  'START WITH',\n  'UPDATE',\n  'VALUES',\n  'WHERE',\n];\n\nconst reservedTopLevelWordsNoIndent = ['INTERSECT', 'INTERSECT ALL', 'MINUS', 'UNION', 'UNION ALL'];\n\nconst reservedNewlineWords = [\n  'AND',\n  'CROSS APPLY',\n  'ELSE',\n  'END',\n  'OR',\n  'OUTER APPLY',\n  'WHEN',\n  'XOR',\n  // joins\n  'JOIN',\n  'INNER JOIN',\n  'LEFT JOIN',\n  'LEFT OUTER JOIN',\n  'RIGHT JOIN',\n  'RIGHT OUTER JOIN',\n  'FULL JOIN',\n  'FULL OUTER JOIN',\n  'CROSS JOIN',\n  'NATURAL JOIN',\n];\n\nexport default class PlSqlFormatter extends Formatter {\n  tokenizer() {\n    return new Tokenizer({\n      reservedWords,\n      reservedTopLevelWords,\n      reservedNewlineWords,\n      reservedTopLevelWordsNoIndent,\n      stringTypes: [`\"\"`, \"N''\", \"''\", '``'],\n      openParens: ['(', 'CASE'],\n      closeParens: [')', 'END'],\n      indexedPlaceholderTypes: ['?'],\n      namedPlaceholderTypes: [':'],\n      lineCommentTypes: ['--'],\n      specialWordChars: ['_', '$', '#', '.', '@'],\n      operators: ['||', '**', '!=', ':='],\n    });\n  }\n\n  tokenOverride(token) {\n    if (isSet(token) && isBy(this.previousReservedToken)) {\n      return { type: tokenTypes.RESERVED, value: token.value };\n    }\n    return token;\n  }\n}\n","import Formatter from '../core/Formatter';\nimport Tokenizer from '../core/Tokenizer';\n\nconst reservedWords = [\n  'ABORT',\n  'ABSOLUTE',\n  'ACCESS',\n  'ACTION',\n  'ADD',\n  'ADMIN',\n  'AFTER',\n  'AGGREGATE',\n  'ALL',\n  'ALSO',\n  'ALTER',\n  'ALWAYS',\n  'ANALYSE',\n  'ANALYZE',\n  'AND',\n  'ANY',\n  'ARRAY',\n  'AS',\n  'ASC',\n  'ASSERTION',\n  'ASSIGNMENT',\n  'ASYMMETRIC',\n  'AT',\n  'ATTACH',\n  'ATTRIBUTE',\n  'AUTHORIZATION',\n  'BACKWARD',\n  'BEFORE',\n  'BEGIN',\n  'BETWEEN',\n  'BIGINT',\n  'BINARY',\n  'BIT',\n  'BOOLEAN',\n  'BOTH',\n  'BY',\n  'CACHE',\n  'CALL',\n  'CALLED',\n  'CASCADE',\n  'CASCADED',\n  'CASE',\n  'CAST',\n  'CATALOG',\n  'CHAIN',\n  'CHAR',\n  'CHARACTER',\n  'CHARACTERISTICS',\n  'CHECK',\n  'CHECKPOINT',\n  'CLASS',\n  'CLOSE',\n  'CLUSTER',\n  'COALESCE',\n  'COLLATE',\n  'COLLATION',\n  'COLUMN',\n  'COLUMNS',\n  'COMMENT',\n  'COMMENTS',\n  'COMMIT',\n  'COMMITTED',\n  'CONCURRENTLY',\n  'CONFIGURATION',\n  'CONFLICT',\n  'CONNECTION',\n  'CONSTRAINT',\n  'CONSTRAINTS',\n  'CONTENT',\n  'CONTINUE',\n  'CONVERSION',\n  'COPY',\n  'COST',\n  'CREATE',\n  'CROSS',\n  'CSV',\n  'CUBE',\n  'CURRENT',\n  'CURRENT_CATALOG',\n  'CURRENT_DATE',\n  'CURRENT_ROLE',\n  'CURRENT_SCHEMA',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_USER',\n  'CURSOR',\n  'CYCLE',\n  'DATA',\n  'DATABASE',\n  'DAY',\n  'DEALLOCATE',\n  'DEC',\n  'DECIMAL',\n  'DECLARE',\n  'DEFAULT',\n  'DEFAULTS',\n  'DEFERRABLE',\n  'DEFERRED',\n  'DEFINER',\n  'DELETE',\n  'DELIMITER',\n  'DELIMITERS',\n  'DEPENDS',\n  'DESC',\n  'DETACH',\n  'DICTIONARY',\n  'DISABLE',\n  'DISCARD',\n  'DISTINCT',\n  'DO',\n  'DOCUMENT',\n  'DOMAIN',\n  'DOUBLE',\n  'DROP',\n  'EACH',\n  'ELSE',\n  'ENABLE',\n  'ENCODING',\n  'ENCRYPTED',\n  'END',\n  'ENUM',\n  'ESCAPE',\n  'EVENT',\n  'EXCEPT',\n  'EXCLUDE',\n  'EXCLUDING',\n  'EXCLUSIVE',\n  'EXECUTE',\n  'EXISTS',\n  'EXPLAIN',\n  'EXPRESSION',\n  'EXTENSION',\n  'EXTERNAL',\n  'EXTRACT',\n  'FALSE',\n  'FAMILY',\n  'FETCH',\n  'FILTER',\n  'FIRST',\n  'FLOAT',\n  'FOLLOWING',\n  'FOR',\n  'FORCE',\n  'FOREIGN',\n  'FORWARD',\n  'FREEZE',\n  'FROM',\n  'FULL',\n  'FUNCTION',\n  'FUNCTIONS',\n  'GENERATED',\n  'GLOBAL',\n  'GRANT',\n  'GRANTED',\n  'GREATEST',\n  'GROUP',\n  'GROUPING',\n  'GROUPS',\n  'HANDLER',\n  'HAVING',\n  'HEADER',\n  'HOLD',\n  'HOUR',\n  'IDENTITY',\n  'IF',\n  'ILIKE',\n  'IMMEDIATE',\n  'IMMUTABLE',\n  'IMPLICIT',\n  'IMPORT',\n  'IN',\n  'INCLUDE',\n  'INCLUDING',\n  'INCREMENT',\n  'INDEX',\n  'INDEXES',\n  'INHERIT',\n  'INHERITS',\n  'INITIALLY',\n  'INLINE',\n  'INNER',\n  'INOUT',\n  'INPUT',\n  'INSENSITIVE',\n  'INSERT',\n  'INSTEAD',\n  'INT',\n  'INTEGER',\n  'INTERSECT',\n  'INTERVAL',\n  'INTO',\n  'INVOKER',\n  'IS',\n  'ISNULL',\n  'ISOLATION',\n  'JOIN',\n  'KEY',\n  'LABEL',\n  'LANGUAGE',\n  'LARGE',\n  'LAST',\n  'LATERAL',\n  'LEADING',\n  'LEAKPROOF',\n  'LEAST',\n  'LEFT',\n  'LEVEL',\n  'LIKE',\n  'LIMIT',\n  'LISTEN',\n  'LOAD',\n  'LOCAL',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOCATION',\n  'LOCK',\n  'LOCKED',\n  'LOGGED',\n  'MAPPING',\n  'MATCH',\n  'MATERIALIZED',\n  'MAXVALUE',\n  'METHOD',\n  'MINUTE',\n  'MINVALUE',\n  'MODE',\n  'MONTH',\n  'MOVE',\n  'NAME',\n  'NAMES',\n  'NATIONAL',\n  'NATURAL',\n  'NCHAR',\n  'NEW',\n  'NEXT',\n  'NFC',\n  'NFD',\n  'NFKC',\n  'NFKD',\n  'NO',\n  'NONE',\n  'NORMALIZE',\n  'NORMALIZED',\n  'NOT',\n  'NOTHING',\n  'NOTIFY',\n  'NOTNULL',\n  'NOWAIT',\n  'NULL',\n  'NULLIF',\n  'NULLS',\n  'NUMERIC',\n  'OBJECT',\n  'OF',\n  'OFF',\n  'OFFSET',\n  'OIDS',\n  'OLD',\n  'ON',\n  'ONLY',\n  'OPERATOR',\n  'OPTION',\n  'OPTIONS',\n  'OR',\n  'ORDER',\n  'ORDINALITY',\n  'OTHERS',\n  'OUT',\n  'OUTER',\n  'OVER',\n  'OVERLAPS',\n  'OVERLAY',\n  'OVERRIDING',\n  'OWNED',\n  'OWNER',\n  'PARALLEL',\n  'PARSER',\n  'PARTIAL',\n  'PARTITION',\n  'PASSING',\n  'PASSWORD',\n  'PLACING',\n  'PLANS',\n  'POLICY',\n  'POSITION',\n  'PRECEDING',\n  'PRECISION',\n  'PREPARE',\n  'PREPARED',\n  'PRESERVE',\n  'PRIMARY',\n  'PRIOR',\n  'PRIVILEGES',\n  'PROCEDURAL',\n  'PROCEDURE',\n  'PROCEDURES',\n  'PROGRAM',\n  'PUBLICATION',\n  'QUOTE',\n  'RANGE',\n  'READ',\n  'REAL',\n  'REASSIGN',\n  'RECHECK',\n  'RECURSIVE',\n  'REF',\n  'REFERENCES',\n  'REFERENCING',\n  'REFRESH',\n  'REINDEX',\n  'RELATIVE',\n  'RELEASE',\n  'RENAME',\n  'REPEATABLE',\n  'REPLACE',\n  'REPLICA',\n  'RESET',\n  'RESTART',\n  'RESTRICT',\n  'RETURNING',\n  'RETURNS',\n  'REVOKE',\n  'RIGHT',\n  'ROLE',\n  'ROLLBACK',\n  'ROLLUP',\n  'ROUTINE',\n  'ROUTINES',\n  'ROW',\n  'ROWS',\n  'RULE',\n  'SAVEPOINT',\n  'SCHEMA',\n  'SCHEMAS',\n  'SCROLL',\n  'SEARCH',\n  'SECOND',\n  'SECURITY',\n  'SELECT',\n  'SEQUENCE',\n  'SEQUENCES',\n  'SERIALIZABLE',\n  'SERVER',\n  'SESSION',\n  'SESSION_USER',\n  'SET',\n  'SETOF',\n  'SETS',\n  'SHARE',\n  'SHOW',\n  'SIMILAR',\n  'SIMPLE',\n  'SKIP',\n  'SMALLINT',\n  'SNAPSHOT',\n  'SOME',\n  'SQL',\n  'STABLE',\n  'STANDALONE',\n  'START',\n  'STATEMENT',\n  'STATISTICS',\n  'STDIN',\n  'STDOUT',\n  'STORAGE',\n  'STORED',\n  'STRICT',\n  'STRIP',\n  'SUBSCRIPTION',\n  'SUBSTRING',\n  'SUPPORT',\n  'SYMMETRIC',\n  'SYSID',\n  'SYSTEM',\n  'TABLE',\n  'TABLES',\n  'TABLESAMPLE',\n  'TABLESPACE',\n  'TEMP',\n  'TEMPLATE',\n  'TEMPORARY',\n  'TEXT',\n  'THEN',\n  'TIES',\n  'TIME',\n  'TIMESTAMP',\n  'TO',\n  'TRAILING',\n  'TRANSACTION',\n  'TRANSFORM',\n  'TREAT',\n  'TRIGGER',\n  'TRIM',\n  'TRUE',\n  'TRUNCATE',\n  'TRUSTED',\n  'TYPE',\n  'TYPES',\n  'UESCAPE',\n  'UNBOUNDED',\n  'UNCOMMITTED',\n  'UNENCRYPTED',\n  'UNION',\n  'UNIQUE',\n  'UNKNOWN',\n  'UNLISTEN',\n  'UNLOGGED',\n  'UNTIL',\n  'UPDATE',\n  'USER',\n  'USING',\n  'VACUUM',\n  'VALID',\n  'VALIDATE',\n  'VALIDATOR',\n  'VALUE',\n  'VALUES',\n  'VARCHAR',\n  'VARIADIC',\n  'VARYING',\n  'VERBOSE',\n  'VERSION',\n  'VIEW',\n  'VIEWS',\n  'VOLATILE',\n  'WHEN',\n  'WHERE',\n  'WHITESPACE',\n  'WINDOW',\n  'WITH',\n  'WITHIN',\n  'WITHOUT',\n  'WORK',\n  'WRAPPER',\n  'WRITE',\n  'XML',\n  'XMLATTRIBUTES',\n  'XMLCONCAT',\n  'XMLELEMENT',\n  'XMLEXISTS',\n  'XMLFOREST',\n  'XMLNAMESPACES',\n  'XMLPARSE',\n  'XMLPI',\n  'XMLROOT',\n  'XMLSERIALIZE',\n  'XMLTABLE',\n  'YEAR',\n  'YES',\n  'ZONE',\n];\n\nconst reservedTopLevelWords = [\n  'ADD',\n  'AFTER',\n  'ALTER COLUMN',\n  'ALTER TABLE',\n  'CASE',\n  'DELETE FROM',\n  'END',\n  'EXCEPT',\n  'FETCH FIRST',\n  'FROM',\n  'GROUP BY',\n  'HAVING',\n  'INSERT INTO',\n  'INSERT',\n  'LIMIT',\n  'ORDER BY',\n  'SELECT',\n  'SET CURRENT SCHEMA',\n  'SET SCHEMA',\n  'SET',\n  'UPDATE',\n  'VALUES',\n  'WHERE',\n];\n\nconst reservedTopLevelWordsNoIndent = ['INTERSECT', 'INTERSECT ALL', 'UNION', 'UNION ALL'];\n\nconst reservedNewlineWords = [\n  'AND',\n  'ELSE',\n  'OR',\n  'WHEN',\n  // joins\n  'JOIN',\n  'INNER JOIN',\n  'LEFT JOIN',\n  'LEFT OUTER JOIN',\n  'RIGHT JOIN',\n  'RIGHT OUTER JOIN',\n  'FULL JOIN',\n  'FULL OUTER JOIN',\n  'CROSS JOIN',\n  'NATURAL JOIN',\n];\n\nexport default class PostgreSqlFormatter extends Formatter {\n  tokenizer() {\n    return new Tokenizer({\n      reservedWords,\n      reservedTopLevelWords,\n      reservedNewlineWords,\n      reservedTopLevelWordsNoIndent,\n      stringTypes: [`\"\"`, \"''\", \"U&''\", 'U&\"\"', '$$'],\n      openParens: ['(', 'CASE'],\n      closeParens: [')', 'END'],\n      indexedPlaceholderTypes: ['$'],\n      namedPlaceholderTypes: [':'],\n      lineCommentTypes: ['--'],\n      operators: [\n        '!=',\n        '<<',\n        '>>',\n        '||/',\n        '|/',\n        '::',\n        '->>',\n        '->',\n        '~~*',\n        '~~',\n        '!~~*',\n        '!~~',\n        '~*',\n        '!~*',\n        '!~',\n        '!!',\n      ],\n    });\n  }\n}\n","import Formatter from '../core/Formatter';\nimport Tokenizer from '../core/Tokenizer';\n\nconst reservedWords = [\n  'AES128',\n  'AES256',\n  'ALLOWOVERWRITE',\n  'ANALYSE',\n  'ARRAY',\n  'AS',\n  'ASC',\n  'AUTHORIZATION',\n  'BACKUP',\n  'BINARY',\n  'BLANKSASNULL',\n  'BOTH',\n  'BYTEDICT',\n  'BZIP2',\n  'CAST',\n  'CHECK',\n  'COLLATE',\n  'COLUMN',\n  'CONSTRAINT',\n  'CREATE',\n  'CREDENTIALS',\n  'CURRENT_DATE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_USER',\n  'CURRENT_USER_ID',\n  'DEFAULT',\n  'DEFERRABLE',\n  'DEFLATE',\n  'DEFRAG',\n  'DELTA',\n  'DELTA32K',\n  'DESC',\n  'DISABLE',\n  'DISTINCT',\n  'DO',\n  'ELSE',\n  'EMPTYASNULL',\n  'ENABLE',\n  'ENCODE',\n  'ENCRYPT',\n  'ENCRYPTION',\n  'END',\n  'EXPLICIT',\n  'FALSE',\n  'FOR',\n  'FOREIGN',\n  'FREEZE',\n  'FULL',\n  'GLOBALDICT256',\n  'GLOBALDICT64K',\n  'GRANT',\n  'GZIP',\n  'IDENTITY',\n  'IGNORE',\n  'ILIKE',\n  'INITIALLY',\n  'INTO',\n  'LEADING',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LUN',\n  'LUNS',\n  'LZO',\n  'LZOP',\n  'MINUS',\n  'MOSTLY13',\n  'MOSTLY32',\n  'MOSTLY8',\n  'NATURAL',\n  'NEW',\n  'NULLS',\n  'OFF',\n  'OFFLINE',\n  'OFFSET',\n  'OLD',\n  'ON',\n  'ONLY',\n  'OPEN',\n  'ORDER',\n  'OVERLAPS',\n  'PARALLEL',\n  'PARTITION',\n  'PERCENT',\n  'PERMISSIONS',\n  'PLACING',\n  'PRIMARY',\n  'RAW',\n  'READRATIO',\n  'RECOVER',\n  'REFERENCES',\n  'REJECTLOG',\n  'RESORT',\n  'RESTORE',\n  'SESSION_USER',\n  'SIMILAR',\n  'SYSDATE',\n  'SYSTEM',\n  'TABLE',\n  'TAG',\n  'TDES',\n  'TEXT255',\n  'TEXT32K',\n  'THEN',\n  'TIMESTAMP',\n  'TO',\n  'TOP',\n  'TRAILING',\n  'TRUE',\n  'TRUNCATECOLUMNS',\n  'UNIQUE',\n  'USER',\n  'USING',\n  'VERBOSE',\n  'WALLET',\n  'WHEN',\n  'WITH',\n  'WITHOUT',\n  'PREDICATE',\n  'COLUMNS',\n  'COMPROWS',\n  'COMPRESSION',\n  'COPY',\n  'FORMAT',\n  'DELIMITER',\n  'FIXEDWIDTH',\n  'AVRO',\n  'JSON',\n  'ENCRYPTED',\n  'BZIP2',\n  'GZIP',\n  'LZOP',\n  'PARQUET',\n  'ORC',\n  'ACCEPTANYDATE',\n  'ACCEPTINVCHARS',\n  'BLANKSASNULL',\n  'DATEFORMAT',\n  'EMPTYASNULL',\n  'ENCODING',\n  'ESCAPE',\n  'EXPLICIT_IDS',\n  'FILLRECORD',\n  'IGNOREBLANKLINES',\n  'IGNOREHEADER',\n  'NULL AS',\n  'REMOVEQUOTES',\n  'ROUNDEC',\n  'TIMEFORMAT',\n  'TRIMBLANKS',\n  'TRUNCATECOLUMNS',\n  'COMPROWS',\n  'COMPUPDATE',\n  'MAXERROR',\n  'NOLOAD',\n  'STATUPDATE',\n  'MANIFEST',\n  'REGION',\n  'IAM_ROLE',\n  'MASTER_SYMMETRIC_KEY',\n  'SSH',\n  'ACCEPTANYDATE',\n  'ACCEPTINVCHARS',\n  'ACCESS_KEY_ID',\n  'SECRET_ACCESS_KEY',\n  'AVRO',\n  'BLANKSASNULL',\n  'BZIP2',\n  'COMPROWS',\n  'COMPUPDATE',\n  'CREDENTIALS',\n  'DATEFORMAT',\n  'DELIMITER',\n  'EMPTYASNULL',\n  'ENCODING',\n  'ENCRYPTED',\n  'ESCAPE',\n  'EXPLICIT_IDS',\n  'FILLRECORD',\n  'FIXEDWIDTH',\n  'FORMAT',\n  'IAM_ROLE',\n  'GZIP',\n  'IGNOREBLANKLINES',\n  'IGNOREHEADER',\n  'JSON',\n  'LZOP',\n  'MANIFEST',\n  'MASTER_SYMMETRIC_KEY',\n  'MAXERROR',\n  'NOLOAD',\n  'NULL AS',\n  'READRATIO',\n  'REGION',\n  'REMOVEQUOTES',\n  'ROUNDEC',\n  'SSH',\n  'STATUPDATE',\n  'TIMEFORMAT',\n  'SESSION_TOKEN',\n  'TRIMBLANKS',\n  'TRUNCATECOLUMNS',\n  'EXTERNAL',\n  'DATA CATALOG',\n  'HIVE METASTORE',\n  'CATALOG_ROLE',\n  'VACUUM',\n  'COPY',\n  'UNLOAD',\n  'EVEN',\n  'ALL',\n];\n\nconst reservedTopLevelWords = [\n  'ADD',\n  'AFTER',\n  'ALTER COLUMN',\n  'ALTER TABLE',\n  'DELETE FROM',\n  'EXCEPT',\n  'FROM',\n  'GROUP BY',\n  'HAVING',\n  'INSERT INTO',\n  'INSERT',\n  'INTERSECT',\n  'TOP',\n  'LIMIT',\n  'MODIFY',\n  'ORDER BY',\n  'SELECT',\n  'SET CURRENT SCHEMA',\n  'SET SCHEMA',\n  'SET',\n  'UNION ALL',\n  'UNION',\n  'UPDATE',\n  'VALUES',\n  'WHERE',\n  'VACUUM',\n  'COPY',\n  'UNLOAD',\n  'ANALYZE',\n  'ANALYSE',\n  'DISTKEY',\n  'SORTKEY',\n  'COMPOUND',\n  'INTERLEAVED',\n  'FORMAT',\n  'DELIMITER',\n  'FIXEDWIDTH',\n  'AVRO',\n  'JSON',\n  'ENCRYPTED',\n  'BZIP2',\n  'GZIP',\n  'LZOP',\n  'PARQUET',\n  'ORC',\n  'ACCEPTANYDATE',\n  'ACCEPTINVCHARS',\n  'BLANKSASNULL',\n  'DATEFORMAT',\n  'EMPTYASNULL',\n  'ENCODING',\n  'ESCAPE',\n  'EXPLICIT_IDS',\n  'FILLRECORD',\n  'IGNOREBLANKLINES',\n  'IGNOREHEADER',\n  'NULL AS',\n  'REMOVEQUOTES',\n  'ROUNDEC',\n  'TIMEFORMAT',\n  'TRIMBLANKS',\n  'TRUNCATECOLUMNS',\n  'COMPROWS',\n  'COMPUPDATE',\n  'MAXERROR',\n  'NOLOAD',\n  'STATUPDATE',\n  'MANIFEST',\n  'REGION',\n  'IAM_ROLE',\n  'MASTER_SYMMETRIC_KEY',\n  'SSH',\n  'ACCEPTANYDATE',\n  'ACCEPTINVCHARS',\n  'ACCESS_KEY_ID',\n  'SECRET_ACCESS_KEY',\n  'AVRO',\n  'BLANKSASNULL',\n  'BZIP2',\n  'COMPROWS',\n  'COMPUPDATE',\n  'CREDENTIALS',\n  'DATEFORMAT',\n  'DELIMITER',\n  'EMPTYASNULL',\n  'ENCODING',\n  'ENCRYPTED',\n  'ESCAPE',\n  'EXPLICIT_IDS',\n  'FILLRECORD',\n  'FIXEDWIDTH',\n  'FORMAT',\n  'IAM_ROLE',\n  'GZIP',\n  'IGNOREBLANKLINES',\n  'IGNOREHEADER',\n  'JSON',\n  'LZOP',\n  'MANIFEST',\n  'MASTER_SYMMETRIC_KEY',\n  'MAXERROR',\n  'NOLOAD',\n  'NULL AS',\n  'READRATIO',\n  'REGION',\n  'REMOVEQUOTES',\n  'ROUNDEC',\n  'SSH',\n  'STATUPDATE',\n  'TIMEFORMAT',\n  'SESSION_TOKEN',\n  'TRIMBLANKS',\n  'TRUNCATECOLUMNS',\n  'EXTERNAL',\n  'DATA CATALOG',\n  'HIVE METASTORE',\n  'CATALOG_ROLE',\n];\n\nconst reservedTopLevelWordsNoIndent = [];\n\nconst reservedNewlineWords = [\n  'AND',\n  'ELSE',\n  'OR',\n  'OUTER APPLY',\n  'WHEN',\n  'VACUUM',\n  'COPY',\n  'UNLOAD',\n  'ANALYZE',\n  'ANALYSE',\n  'DISTKEY',\n  'SORTKEY',\n  'COMPOUND',\n  'INTERLEAVED',\n  // joins\n  'JOIN',\n  'INNER JOIN',\n  'LEFT JOIN',\n  'LEFT OUTER JOIN',\n  'RIGHT JOIN',\n  'RIGHT OUTER JOIN',\n  'FULL JOIN',\n  'FULL OUTER JOIN',\n  'CROSS JOIN',\n  'NATURAL JOIN',\n];\n\nexport default class RedshiftFormatter extends Formatter {\n  tokenizer() {\n    return new Tokenizer({\n      reservedWords,\n      reservedTopLevelWords,\n      reservedNewlineWords,\n      reservedTopLevelWordsNoIndent,\n      stringTypes: [`\"\"`, \"''\", '``'],\n      openParens: ['('],\n      closeParens: [')'],\n      indexedPlaceholderTypes: ['?'],\n      namedPlaceholderTypes: ['@', '#', '$'],\n      lineCommentTypes: ['--'],\n      operators: ['|/', '||/', '<<', '>>', '!=', '||'],\n    });\n  }\n}\n","import Formatter from '../core/Formatter';\nimport { isEnd, isWindow } from '../core/token';\nimport Tokenizer from '../core/Tokenizer';\nimport tokenTypes from '../core/tokenTypes';\n\nconst reservedWords = [\n  'ALL',\n  'ALTER',\n  'ANALYSE',\n  'ANALYZE',\n  'ARRAY_ZIP',\n  'ARRAY',\n  'AS',\n  'ASC',\n  'AVG',\n  'BETWEEN',\n  'CASCADE',\n  'CASE',\n  'CAST',\n  'COALESCE',\n  'COLLECT_LIST',\n  'COLLECT_SET',\n  'COLUMN',\n  'COLUMNS',\n  'COMMENT',\n  'CONSTRAINT',\n  'CONTAINS',\n  'CONVERT',\n  'COUNT',\n  'CUME_DIST',\n  'CURRENT ROW',\n  'CURRENT_DATE',\n  'CURRENT_TIMESTAMP',\n  'DATABASE',\n  'DATABASES',\n  'DATE_ADD',\n  'DATE_SUB',\n  'DATE_TRUNC',\n  'DAY_HOUR',\n  'DAY_MINUTE',\n  'DAY_SECOND',\n  'DAY',\n  'DAYS',\n  'DECODE',\n  'DEFAULT',\n  'DELETE',\n  'DENSE_RANK',\n  'DESC',\n  'DESCRIBE',\n  'DISTINCT',\n  'DISTINCTROW',\n  'DIV',\n  'DROP',\n  'ELSE',\n  'ENCODE',\n  'END',\n  'EXISTS',\n  'EXPLAIN',\n  'EXPLODE_OUTER',\n  'EXPLODE',\n  'FILTER',\n  'FIRST_VALUE',\n  'FIRST',\n  'FIXED',\n  'FLATTEN',\n  'FOLLOWING',\n  'FROM_UNIXTIME',\n  'FULL',\n  'GREATEST',\n  'GROUP_CONCAT',\n  'HOUR_MINUTE',\n  'HOUR_SECOND',\n  'HOUR',\n  'HOURS',\n  'IF',\n  'IFNULL',\n  'IN',\n  'INSERT',\n  'INTERVAL',\n  'INTO',\n  'IS',\n  'LAG',\n  'LAST_VALUE',\n  'LAST',\n  'LEAD',\n  'LEADING',\n  'LEAST',\n  'LEVEL',\n  'LIKE',\n  'MAX',\n  'MERGE',\n  'MIN',\n  'MINUTE_SECOND',\n  'MINUTE',\n  'MONTH',\n  'NATURAL',\n  'NOT',\n  'NOW()',\n  'NTILE',\n  'NULL',\n  'NULLIF',\n  'OFFSET',\n  'ON DELETE',\n  'ON UPDATE',\n  'ON',\n  'ONLY',\n  'OPTIMIZE',\n  'OVER',\n  'PERCENT_RANK',\n  'PRECEDING',\n  'RANGE',\n  'RANK',\n  'REGEXP',\n  'RENAME',\n  'RLIKE',\n  'ROW',\n  'ROWS',\n  'SECOND',\n  'SEPARATOR',\n  'SEQUENCE',\n  'SIZE',\n  'STRING',\n  'STRUCT',\n  'SUM',\n  'TABLE',\n  'TABLES',\n  'TEMPORARY',\n  'THEN',\n  'TO_DATE',\n  'TO_JSON',\n  'TO',\n  'TRAILING',\n  'TRANSFORM',\n  'TRUE',\n  'TRUNCATE',\n  'TYPE',\n  'TYPES',\n  'UNBOUNDED',\n  'UNIQUE',\n  'UNIX_TIMESTAMP',\n  'UNLOCK',\n  'UNSIGNED',\n  'USING',\n  'VARIABLES',\n  'VIEW',\n  'WHEN',\n  'WITH',\n  'YEAR_MONTH',\n];\n\nconst reservedTopLevelWords = [\n  'ADD',\n  'AFTER',\n  'ALTER COLUMN',\n  'ALTER DATABASE',\n  'ALTER SCHEMA',\n  'ALTER TABLE',\n  'CLUSTER BY',\n  'CLUSTERED BY',\n  'DELETE FROM',\n  'DISTRIBUTE BY',\n  'FROM',\n  'GROUP BY',\n  'HAVING',\n  'INSERT INTO',\n  'INSERT',\n  'LIMIT',\n  'OPTIONS',\n  'ORDER BY',\n  'PARTITION BY',\n  'PARTITIONED BY',\n  'RANGE',\n  'ROWS',\n  'SELECT',\n  'SET CURRENT SCHEMA',\n  'SET SCHEMA',\n  'SET',\n  'TBLPROPERTIES',\n  'UPDATE',\n  'USING',\n  'VALUES',\n  'WHERE',\n  'WINDOW',\n];\n\nconst reservedTopLevelWordsNoIndent = [\n  'EXCEPT ALL',\n  'EXCEPT',\n  'INTERSECT ALL',\n  'INTERSECT',\n  'UNION ALL',\n  'UNION',\n];\n\nconst reservedNewlineWords = [\n  'AND',\n  'CREATE OR',\n  'CREATE',\n  'ELSE',\n  'LATERAL VIEW',\n  'OR',\n  'OUTER APPLY',\n  'WHEN',\n  'XOR',\n  // joins\n  'JOIN',\n  'INNER JOIN',\n  'LEFT JOIN',\n  'LEFT OUTER JOIN',\n  'RIGHT JOIN',\n  'RIGHT OUTER JOIN',\n  'FULL JOIN',\n  'FULL OUTER JOIN',\n  'CROSS JOIN',\n  'NATURAL JOIN',\n  // non-standard-joins\n  'ANTI JOIN',\n  'SEMI JOIN',\n  'LEFT ANTI JOIN',\n  'LEFT SEMI JOIN',\n  'RIGHT OUTER JOIN',\n  'RIGHT SEMI JOIN',\n  'NATURAL ANTI JOIN',\n  'NATURAL FULL OUTER JOIN',\n  'NATURAL INNER JOIN',\n  'NATURAL LEFT ANTI JOIN',\n  'NATURAL LEFT OUTER JOIN',\n  'NATURAL LEFT SEMI JOIN',\n  'NATURAL OUTER JOIN',\n  'NATURAL RIGHT OUTER JOIN',\n  'NATURAL RIGHT SEMI JOIN',\n  'NATURAL SEMI JOIN',\n];\n\nexport default class SparkSqlFormatter extends Formatter {\n  tokenizer() {\n    return new Tokenizer({\n      reservedWords,\n      reservedTopLevelWords,\n      reservedNewlineWords,\n      reservedTopLevelWordsNoIndent,\n      stringTypes: [`\"\"`, \"''\", '``', '{}'],\n      openParens: ['(', 'CASE'],\n      closeParens: [')', 'END'],\n      indexedPlaceholderTypes: ['?'],\n      namedPlaceholderTypes: ['$'],\n      lineCommentTypes: ['--'],\n      operators: ['!=', '<=>', '&&', '||', '=='],\n    });\n  }\n\n  tokenOverride(token) {\n    // Fix cases where names are ambiguously keywords or functions\n    if (isWindow(token)) {\n      const aheadToken = this.tokenLookAhead();\n      if (aheadToken && aheadToken.type === tokenTypes.OPEN_PAREN) {\n        // This is a function call, treat it as a reserved word\n        return { type: tokenTypes.RESERVED, value: token.value };\n      }\n    }\n\n    // Fix cases where names are ambiguously keywords or properties\n    if (isEnd(token)) {\n      const backToken = this.tokenLookBehind();\n      if (backToken && backToken.type === tokenTypes.OPERATOR && backToken.value === '.') {\n        // This is window().end (or similar) not CASE ... END\n        return { type: tokenTypes.WORD, value: token.value };\n      }\n    }\n\n    return token;\n  }\n}\n","import Formatter from '../core/Formatter';\nimport Tokenizer from '../core/Tokenizer';\n\n// https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#reserved-word\nconst reservedWords = [\n  'ABS',\n  'ALL',\n  'ALLOCATE',\n  'ALTER',\n  'AND',\n  'ANY',\n  'ARE',\n  'ARRAY',\n  'AS',\n  'ASENSITIVE',\n  'ASYMMETRIC',\n  'AT',\n  'ATOMIC',\n  'AUTHORIZATION',\n  'AVG',\n  'BEGIN',\n  'BETWEEN',\n  'BIGINT',\n  'BINARY',\n  'BLOB',\n  'BOOLEAN',\n  'BOTH',\n  'BY',\n  'CALL',\n  'CALLED',\n  'CARDINALITY',\n  'CASCADED',\n  'CASE',\n  'CAST',\n  'CEIL',\n  'CEILING',\n  'CHAR',\n  'CHAR_LENGTH',\n  'CHARACTER',\n  'CHARACTER_LENGTH',\n  'CHECK',\n  'CLOB',\n  'CLOSE',\n  'COALESCE',\n  'COLLATE',\n  'COLLECT',\n  'COLUMN',\n  'COMMIT',\n  'CONDITION',\n  'CONNECT',\n  'CONSTRAINT',\n  'CONVERT',\n  'CORR',\n  'CORRESPONDING',\n  'COUNT',\n  'COVAR_POP',\n  'COVAR_SAMP',\n  'CREATE',\n  'CROSS',\n  'CUBE',\n  'CUME_DIST',\n  'CURRENT',\n  'CURRENT_CATALOG',\n  'CURRENT_DATE',\n  'CURRENT_DEFAULT_TRANSFORM_GROUP',\n  'CURRENT_PATH',\n  'CURRENT_ROLE',\n  'CURRENT_SCHEMA',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_TRANSFORM_GROUP_FOR_TYPE',\n  'CURRENT_USER',\n  'CURSOR',\n  'CYCLE',\n  'DATE',\n  'DAY',\n  'DEALLOCATE',\n  'DEC',\n  'DECIMAL',\n  'DECLARE',\n  'DEFAULT',\n  'DELETE',\n  'DENSE_RANK',\n  'DEREF',\n  'DESCRIBE',\n  'DETERMINISTIC',\n  'DISCONNECT',\n  'DISTINCT',\n  'DOUBLE',\n  'DROP',\n  'DYNAMIC',\n  'EACH',\n  'ELEMENT',\n  'ELSE',\n  'END',\n  'END-EXEC',\n  'ESCAPE',\n  'EVERY',\n  'EXCEPT',\n  'EXEC',\n  'EXECUTE',\n  'EXISTS',\n  'EXP',\n  'EXTERNAL',\n  'EXTRACT',\n  'FALSE',\n  'FETCH',\n  'FILTER',\n  'FLOAT',\n  'FLOOR',\n  'FOR',\n  'FOREIGN',\n  'FREE',\n  'FROM',\n  'FULL',\n  'FUNCTION',\n  'FUSION',\n  'GET',\n  'GLOBAL',\n  'GRANT',\n  'GROUP',\n  'GROUPING',\n  'HAVING',\n  'HOLD',\n  'HOUR',\n  'IDENTITY',\n  'IN',\n  'INDICATOR',\n  'INNER',\n  'INOUT',\n  'INSENSITIVE',\n  'INSERT',\n  'INT',\n  'INTEGER',\n  'INTERSECT',\n  'INTERSECTION',\n  'INTERVAL',\n  'INTO',\n  'IS',\n  'JOIN',\n  'LANGUAGE',\n  'LARGE',\n  'LATERAL',\n  'LEADING',\n  'LEFT',\n  'LIKE',\n  'LIKE_REGEX',\n  'LN',\n  'LOCAL',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOWER',\n  'MATCH',\n  'MAX',\n  'MEMBER',\n  'MERGE',\n  'METHOD',\n  'MIN',\n  'MINUTE',\n  'MOD',\n  'MODIFIES',\n  'MODULE',\n  'MONTH',\n  'MULTISET',\n  'NATIONAL',\n  'NATURAL',\n  'NCHAR',\n  'NCLOB',\n  'NEW',\n  'NO',\n  'NONE',\n  'NORMALIZE',\n  'NOT',\n  'NULL',\n  'NULLIF',\n  'NUMERIC',\n  'OCTET_LENGTH',\n  'OCCURRENCES_REGEX',\n  'OF',\n  'OLD',\n  'ON',\n  'ONLY',\n  'OPEN',\n  'OR',\n  'ORDER',\n  'OUT',\n  'OUTER',\n  'OVER',\n  'OVERLAPS',\n  'OVERLAY',\n  'PARAMETER',\n  'PARTITION',\n  'PERCENT_RANK',\n  'PERCENTILE_CONT',\n  'PERCENTILE_DISC',\n  'POSITION',\n  'POSITION_REGEX',\n  'POWER',\n  'PRECISION',\n  'PREPARE',\n  'PRIMARY',\n  'PROCEDURE',\n  'RANGE',\n  'RANK',\n  'READS',\n  'REAL',\n  'RECURSIVE',\n  'REF',\n  'REFERENCES',\n  'REFERENCING',\n  'REGR_AVGX',\n  'REGR_AVGY',\n  'REGR_COUNT',\n  'REGR_INTERCEPT',\n  'REGR_R2',\n  'REGR_SLOPE',\n  'REGR_SXX',\n  'REGR_SXY',\n  'REGR_SYY',\n  'RELEASE',\n  'RESULT',\n  'RETURN',\n  'RETURNS',\n  'REVOKE',\n  'RIGHT',\n  'ROLLBACK',\n  'ROLLUP',\n  'ROW',\n  'ROW_NUMBER',\n  'ROWS',\n  'SAVEPOINT',\n  'SCOPE',\n  'SCROLL',\n  'SEARCH',\n  'SECOND',\n  'SELECT',\n  'SENSITIVE',\n  'SESSION_USER',\n  'SET',\n  'SIMILAR',\n  'SMALLINT',\n  'SOME',\n  'SPECIFIC',\n  'SPECIFICTYPE',\n  'SQL',\n  'SQLEXCEPTION',\n  'SQLSTATE',\n  'SQLWARNING',\n  'SQRT',\n  'START',\n  'STATIC',\n  'STDDEV_POP',\n  'STDDEV_SAMP',\n  'SUBMULTISET',\n  'SUBSTRING',\n  'SUBSTRING_REGEX',\n  'SUM',\n  'SYMMETRIC',\n  'SYSTEM',\n  'SYSTEM_USER',\n  'TABLE',\n  'TABLESAMPLE',\n  'THEN',\n  'TIME',\n  'TIMESTAMP',\n  'TIMEZONE_HOUR',\n  'TIMEZONE_MINUTE',\n  'TO',\n  'TRAILING',\n  'TRANSLATE',\n  'TRANSLATE_REGEX',\n  'TRANSLATION',\n  'TREAT',\n  'TRIGGER',\n  'TRIM',\n  'TRUE',\n  'UESCAPE',\n  'UNION',\n  'UNIQUE',\n  'UNKNOWN',\n  'UNNEST',\n  'UPDATE',\n  'UPPER',\n  'USER',\n  'USING',\n  'VALUE',\n  'VALUES',\n  'VAR_POP',\n  'VAR_SAMP',\n  'VARBINARY',\n  'VARCHAR',\n  'VARYING',\n  'WHEN',\n  'WHENEVER',\n  'WHERE',\n  'WIDTH_BUCKET',\n  'WINDOW',\n  'WITH',\n  'WITHIN',\n  'WITHOUT',\n  'YEAR',\n];\n\nconst reservedTopLevelWords = [\n  'ADD',\n  'ALTER COLUMN',\n  'ALTER TABLE',\n  'CASE',\n  'DELETE FROM',\n  'END',\n  'FETCH FIRST',\n  'FETCH NEXT',\n  'FETCH PRIOR',\n  'FETCH LAST',\n  'FETCH ABSOLUTE',\n  'FETCH RELATIVE',\n  'FROM',\n  'GROUP BY',\n  'HAVING',\n  'INSERT INTO',\n  'LIMIT',\n  'ORDER BY',\n  'SELECT',\n  'SET SCHEMA',\n  'SET',\n  'UPDATE',\n  'VALUES',\n  'WHERE',\n];\n\nconst reservedTopLevelWordsNoIndent = [\n  'INTERSECT',\n  'INTERSECT ALL',\n  'INTERSECT DISTINCT',\n  'UNION',\n  'UNION ALL',\n  'UNION DISTINCT',\n  'EXCEPT',\n  'EXCEPT ALL',\n  'EXCEPT DISTINCT',\n];\n\nconst reservedNewlineWords = [\n  'AND',\n  'ELSE',\n  'OR',\n  'WHEN',\n  // joins\n  'JOIN',\n  'INNER JOIN',\n  'LEFT JOIN',\n  'LEFT OUTER JOIN',\n  'RIGHT JOIN',\n  'RIGHT OUTER JOIN',\n  'FULL JOIN',\n  'FULL OUTER JOIN',\n  'CROSS JOIN',\n  'NATURAL JOIN',\n];\n\nexport default class StandardSqlFormatter extends Formatter {\n  tokenizer() {\n    return new Tokenizer({\n      reservedWords,\n      reservedTopLevelWords,\n      reservedNewlineWords,\n      reservedTopLevelWordsNoIndent,\n      stringTypes: [`\"\"`, \"''\"],\n      openParens: ['(', 'CASE'],\n      closeParens: [')', 'END'],\n      indexedPlaceholderTypes: ['?'],\n      namedPlaceholderTypes: [],\n      lineCommentTypes: ['--'],\n    });\n  }\n}\n","import Formatter from '../core/Formatter';\nimport Tokenizer from '../core/Tokenizer';\n\nconst reservedWords = [\n  'ADD',\n  'EXTERNAL',\n  'PROCEDURE',\n  'ALL',\n  'FETCH',\n  'PUBLIC',\n  'ALTER',\n  'FILE',\n  'RAISERROR',\n  'AND',\n  'FILLFACTOR',\n  'READ',\n  'ANY',\n  'FOR',\n  'READTEXT',\n  'AS',\n  'FOREIGN',\n  'RECONFIGURE',\n  'ASC',\n  'FREETEXT',\n  'REFERENCES',\n  'AUTHORIZATION',\n  'FREETEXTTABLE',\n  'REPLICATION',\n  'BACKUP',\n  'FROM',\n  'RESTORE',\n  'BEGIN',\n  'FULL',\n  'RESTRICT',\n  'BETWEEN',\n  'FUNCTION',\n  'RETURN',\n  'BREAK',\n  'GOTO',\n  'REVERT',\n  'BROWSE',\n  'GRANT',\n  'REVOKE',\n  'BULK',\n  'GROUP',\n  'RIGHT',\n  'BY',\n  'HAVING',\n  'ROLLBACK',\n  'CASCADE',\n  'HOLDLOCK',\n  'ROWCOUNT',\n  'CASE',\n  'IDENTITY',\n  'ROWGUIDCOL',\n  'CHECK',\n  'IDENTITY_INSERT',\n  'RULE',\n  'CHECKPOINT',\n  'IDENTITYCOL',\n  'SAVE',\n  'CLOSE',\n  'IF',\n  'SCHEMA',\n  'CLUSTERED',\n  'IN',\n  'SECURITYAUDIT',\n  'COALESCE',\n  'INDEX',\n  'SELECT',\n  'COLLATE',\n  'INNER',\n  'SEMANTICKEYPHRASETABLE',\n  'COLUMN',\n  'INSERT',\n  'SEMANTICSIMILARITYDETAILSTABLE',\n  'COMMIT',\n  'INTERSECT',\n  'SEMANTICSIMILARITYTABLE',\n  'COMPUTE',\n  'INTO',\n  'SESSION_USER',\n  'CONSTRAINT',\n  'IS',\n  'SET',\n  'CONTAINS',\n  'JOIN',\n  'SETUSER',\n  'CONTAINSTABLE',\n  'KEY',\n  'SHUTDOWN',\n  'CONTINUE',\n  'KILL',\n  'SOME',\n  'CONVERT',\n  'LEFT',\n  'STATISTICS',\n  'CREATE',\n  'LIKE',\n  'SYSTEM_USER',\n  'CROSS',\n  'LINENO',\n  'TABLE',\n  'CURRENT',\n  'LOAD',\n  'TABLESAMPLE',\n  'CURRENT_DATE',\n  'MERGE',\n  'TEXTSIZE',\n  'CURRENT_TIME',\n  'NATIONAL',\n  'THEN',\n  'CURRENT_TIMESTAMP',\n  'NOCHECK',\n  'TO',\n  'CURRENT_USER',\n  'NONCLUSTERED',\n  'TOP',\n  'CURSOR',\n  'NOT',\n  'TRAN',\n  'DATABASE',\n  'NULL',\n  'TRANSACTION',\n  'DBCC',\n  'NULLIF',\n  'TRIGGER',\n  'DEALLOCATE',\n  'OF',\n  'TRUNCATE',\n  'DECLARE',\n  'OFF',\n  'TRY_CONVERT',\n  'DEFAULT',\n  'OFFSETS',\n  'TSEQUAL',\n  'DELETE',\n  'ON',\n  'UNION',\n  'DENY',\n  'OPEN',\n  'UNIQUE',\n  'DESC',\n  'OPENDATASOURCE',\n  'UNPIVOT',\n  'DISK',\n  'OPENQUERY',\n  'UPDATE',\n  'DISTINCT',\n  'OPENROWSET',\n  'UPDATETEXT',\n  'DISTRIBUTED',\n  'OPENXML',\n  'USE',\n  'DOUBLE',\n  'OPTION',\n  'USER',\n  'DROP',\n  'OR',\n  'VALUES',\n  'DUMP',\n  'ORDER',\n  'VARYING',\n  'ELSE',\n  'OUTER',\n  'VIEW',\n  'END',\n  'OVER',\n  'WAITFOR',\n  'ERRLVL',\n  'PERCENT',\n  'WHEN',\n  'ESCAPE',\n  'PIVOT',\n  'WHERE',\n  'EXCEPT',\n  'PLAN',\n  'WHILE',\n  'EXEC',\n  'PRECISION',\n  'WITH',\n  'EXECUTE',\n  'PRIMARY',\n  'WITHIN GROUP',\n  'EXISTS',\n  'PRINT',\n  'WRITETEXT',\n  'EXIT',\n  'PROC',\n];\n\nconst reservedTopLevelWords = [\n  'ADD',\n  'ALTER COLUMN',\n  'ALTER TABLE',\n  'CASE',\n  'DELETE FROM',\n  'END',\n  'EXCEPT',\n  'FROM',\n  'GROUP BY',\n  'HAVING',\n  'INSERT INTO',\n  'INSERT',\n  'LIMIT',\n  'ORDER BY',\n  'SELECT',\n  'SET CURRENT SCHEMA',\n  'SET SCHEMA',\n  'SET',\n  'UPDATE',\n  'VALUES',\n  'WHERE',\n];\n\nconst reservedTopLevelWordsNoIndent = ['INTERSECT', 'INTERSECT ALL', 'MINUS', 'UNION', 'UNION ALL'];\n\nconst reservedNewlineWords = [\n  'AND',\n  'ELSE',\n  'OR',\n  'WHEN',\n  // joins\n  'JOIN',\n  'INNER JOIN',\n  'LEFT JOIN',\n  'LEFT OUTER JOIN',\n  'RIGHT JOIN',\n  'RIGHT OUTER JOIN',\n  'FULL JOIN',\n  'FULL OUTER JOIN',\n  'CROSS JOIN',\n];\n\nexport default class TSqlFormatter extends Formatter {\n  tokenizer() {\n    return new Tokenizer({\n      reservedWords,\n      reservedTopLevelWords,\n      reservedNewlineWords,\n      reservedTopLevelWordsNoIndent,\n      stringTypes: [`\"\"`, \"N''\", \"''\", '[]'],\n      openParens: ['(', 'CASE'],\n      closeParens: [')', 'END'],\n      indexedPlaceholderTypes: [],\n      namedPlaceholderTypes: ['@'],\n      lineCommentTypes: ['--'],\n      specialWordChars: ['#', '@'],\n      operators: [\n        '>=',\n        '<=',\n        '<>',\n        '!=',\n        '!<',\n        '!>',\n        '+=',\n        '-=',\n        '*=',\n        '/=',\n        '%=',\n        '|=',\n        '&=',\n        '^=',\n        '::',\n      ],\n      // TODO: Support for money constants\n    });\n  }\n}\n","import Db2Formatter from './languages/Db2Formatter';\nimport MariaDbFormatter from './languages/MariaDbFormatter';\nimport MySqlFormatter from './languages/MySqlFormatter';\nimport N1qlFormatter from './languages/N1qlFormatter';\nimport PlSqlFormatter from './languages/PlSqlFormatter';\nimport PostgreSqlFormatter from './languages/PostgreSqlFormatter';\nimport RedshiftFormatter from './languages/RedshiftFormatter';\nimport SparkSqlFormatter from './languages/SparkSqlFormatter';\nimport StandardSqlFormatter from './languages/StandardSqlFormatter';\nimport TSqlFormatter from './languages/TSqlFormatter';\n\nconst formatters = {\n  db2: Db2Formatter,\n  mariadb: MariaDbFormatter,\n  mysql: MySqlFormatter,\n  n1ql: N1qlFormatter,\n  plsql: PlSqlFormatter,\n  postgresql: PostgreSqlFormatter,\n  redshift: RedshiftFormatter,\n  spark: SparkSqlFormatter,\n  sql: StandardSqlFormatter,\n  tsql: TSqlFormatter,\n};\n\n/**\n * Format whitespace in a query to make it easier to read.\n *\n * @param {String} query\n * @param {Object} cfg\n *  @param {String} cfg.language Query language, default is Standard SQL\n *  @param {String} cfg.indent Characters used for indentation, default is \"  \" (2 spaces)\n *  @param {Boolean} cfg.uppercase Converts keywords to uppercase\n *  @param {Integer} cfg.linesBetweenQueries How many line breaks between queries\n *  @param {Object} cfg.params Collection of params for placeholder replacement\n * @return {String}\n */\nexport const format = (query, cfg = {}) => {\n  if (typeof query !== 'string') {\n    throw new Error('Invalid query argument. Extected string, instead got ' + typeof query);\n  }\n\n  let Formatter = StandardSqlFormatter;\n  if (cfg.language !== undefined) {\n    Formatter = formatters[cfg.language];\n  }\n  if (Formatter === undefined) {\n    throw Error(`Unsupported SQL dialect: ${cfg.language}`);\n  }\n  return new Formatter(cfg).format(query);\n};\n\nexport const supportedDialects = Object.keys(formatters);\n"],"sourceRoot":""}