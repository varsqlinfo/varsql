buildscript {
    repositories {
        jcenter()
    }
}

configurations {
   //  runtime.exclude module: 'spring-boot-starter-tomcat'
   //  runtime.exclude module: 'tomcat-embed-jasper'
     runtime.exclude module: 'lombok'
}


// minify
/*
plugins {
	//id "com.eriwen.gradle.js" version "2.14.2-SNAPSHOT"
	//id "com.eriwen.gradle.css" version "2.14.0"
}
*/


ext{
	appVersion = project.property('varsqlVersion')
	jsMinifyVersion = '2.14.1'

	webResourceConfig = [
        staticFilesDir : "src/main/webapp",
        baseDir: "META-INF/resources",
        name : "varsql-web-"+appVersion
    ]
}

def def_project= [
	context : '/vsql'
]

dependencies {
	compile project(':varsql-core')
}


task generateCode {
    doLast {
        println 'Generating some code...'
    }
}

task generateCustomConfig {
    doLast {
          println "Generating custom configuration..."
    }
}

eclipse {
	// 이클립스 project facets설정.
	project.natures "org.springsource.ide.eclipse.gradle.core.nature"

	//프로젝트를 가져 오거나 동기화
	synchronizationTasks generateCustomConfig

	// 자동 빌드
	autoBuildTasks generateCode

    wtp {
    	component {
            contextPath = def_project.context // context path 지정
        }
        facet {
            facet name: 'jst.web', version: '3.1'
            facet name: 'jst.java', version: '1.8'
        }
    }

    classpath {
        defaultOutputDir = file("target-notused")
        file.whenMerged {
            entries.each { entry ->
                if (entry.kind == 'src' && entry.hasProperty('output')) {
                    entry.output = entry.output.replace('bin/', "target/")
                }
            }
        }
    }
}

bootJar {
    enabled = false
}

jar{
	enabled=true
	baseName ='varsql-app-'+appVersion
}

//web resource jar packaging
task webResourceJar(type: Jar) {
	baseName=webResourceConfig.name;
    from(fileTree(webResourceConfig.staticFilesDir)) {
    	exclude 'META-INF'
        into webResourceConfig.baseDir
    }
}

war{
	enabled=true
	// war name
	baseName ='vsql' +appVersion

	exclude 'webstatic' ,'WEB-INF/*'

	classpath = classpath - sourceSets.main.output

	from (jar) {
		into 'WEB-INF/lib'
	}

	from (webResourceJar) {
		into 'WEB-INF/lib'
	}

	doLast {
		println("appVersion : " + appVersion)
		println("war export path : " + archivePath.parent)
		//불필요한 파익 삭제.
		def fileDelFlag = true;
		if(fileDelFlag){
			delete fileTree(archivePath.parent) {
				include '*.jar'
			}
		}

    }
}
