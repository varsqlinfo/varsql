apply from: "$rootDir/helpers/common-methods.gradle"


println("@@@@@@@@@@@@@@@@@@ = $rootDir")

configurations {
   //  runtime.exclude module: 'spring-boot-starter-tomcat'
   //  runtime.exclude module: 'tomcat-embed-jasper'
     runtime.exclude module: 'lombok'
}

ext{
	appVersion = project.property('varsqlVersion')

	webResourceConfig = [
        staticFilesDir : "src/main/webapp",
        baseDir: "META-INF/resources",
        name : "varsql-web-"+appVersion
    ]
}

def def_project= [
	context : '/varsql'
]

dependencies {
	implementation project(':varsql-core')
}


task generateCode {
    doLast {
        println 'Generating some code...'
    }
}

task generateCustomConfig {
    doLast {
          println "Generating custom configuration..."
    }
}

eclipse {
	// 이클립스 project facets설정.
	project.natures "org.springsource.ide.eclipse.gradle.core.nature"

	//프로젝트를 가져 오거나 동기화
	synchronizationTasks generateCustomConfig

	// 자동 빌드
	autoBuildTasks generateCode

    wtp {
    	component {
            contextPath = def_project.context // context path 지정
        }
        facet {
            facet name: 'jst.web', version: '3.1'
            facet name: 'jst.java', version: '1.8'
        }
    }

    classpath {
        defaultOutputDir = file("target-notused")
        file.whenMerged {
            entries.each { entry ->
                if (entry.kind == 'src' && entry.hasProperty('output')) {
                    entry.output = entry.output.replace('bin/', "target/")
                }
            }
        }
    }
}

bootJar {
	// plain 으로 생성하지 않게 하기 위해서 처리.
    archiveClassifier = 'boot'
}

jar{
	// plain 으로 생성하지 않게 하기 위해서 처리.
	archiveClassifier = ''
	archiveBaseName ='varsql-app-'+appVersion
	
  	// update date check
  	fn_updateDateCheck(archivePath.parent +File.separator + archiveFileName.get(), outputs)
}

//web resource jar packaging
task webResourceJar(type: Jar) {
	archiveBaseName =webResourceConfig.name;
	
	// update date check
  	fn_updateDateCheck(archivePath.parent +File.separator + archiveFileName.get(), outputs)
	
    from(fileTree(webResourceConfig.staticFilesDir)) {
    	exclude 'META-INF'
        into webResourceConfig.baseDir
    }
}

war{
	archiveClassifier = ''
	
	def exportFileName = 'varsql' +appVersion
	// war name
	archiveBaseName =exportFileName
	
	exportFileName =exportFileName +'.war'
	
	exclude 'webstatic' ,'WEB-INF/*'

	classpath = classpath - sourceSets.main.output

	from (jar) {
		into 'WEB-INF/lib'
	}

	from (webResourceJar) {
		into 'WEB-INF/lib'
	}

	doLast {
	
		println("exportFileName : $exportFileName")
		exportFileRename(exportFileName, 'varsql-docker.war');
		
		println("################# export info #######################")
		println("appVersion : " + appVersion)
		println("war export path : " + archivePath.parent)
		println("################# export info #######################")
		/*
		//불필요한 파익 삭제.
		def fileDelFlag = true;
		if(fileDelFlag){
			delete fileTree(archivePath.parent) {
				include '*.jar'
			}
		}
		*/
    }
}

boolean exportFileRename(changeFileName, newFileName){
	// docker file 용 war 파일 복사	
	
	println("exportFileRename changeFileName : $changeFileName")
	
	copy{
		from 'build/libs'
		into 'build/libs'
		include new StringBuilder().append(changeFileName).toString()
		rename new StringBuilder().append(changeFileName).toString(), new StringBuilder().append(newFileName).toString()
		// docker file 용 war 파일 복사	
	}
	
	true
}
