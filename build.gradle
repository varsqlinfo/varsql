/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0.1/userguide/java_library_plugin.html
 */

buildscript {
	ext {
        springBootVersion = '2.2.6.RELEASE'
        springDependencyVersion = '1.0.9.RELEASE'
        querydslPluginVersion = '1.0.10'
        sonarVersion = '3.0'
    }

	repositories {
		mavenCentral()
		jcenter()
		maven {
	      url "https://plugins.gradle.org/m2/"
	    }
	}

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyVersion}"
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarVersion}"
    }
}

configurations.all {
    resolutionStrategy.dependencySubstitution {
        substitute module("com.varsql.libs") with project(':libs')
    }

    compileOnly {
		extendsFrom annotationProcessor
	}
}

def def_build= [
	dir : 'target'
]

ext.varsqlVersion = '1.0.0'

//소스 분석.
apply plugin: 'org.sonarqube'

sonarqube {
    properties {
    	property "sonar.sourceEncoding", "UTF-8"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'war'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.ewerk.gradle.plugins.querydsl'

    bootJar {
	    enabled = false
	}

	bootWar {
	    enabled = false
	}

    repositories {
        jcenter()
    	flatDir{dirs rootProject.file( 'libs' )}
    }

    def def_version = [
		springData: '2.2.6.RELEASE'
		,springSecurity: '5.2.1.RELEASE'
		,servletApi: '4.0.0'
		,jackson : '2.9.9'
		,poi : '4.1.2'
		,tiles : '3.0.7'
		,tomcat : '8.5.49'
		,jspApi : '2.3.3'
		,slf4j : '1.7.29'
		,tiles : '3.0.7'
		,junit : '5.2.0'
		,junitPlatform : '1.5.0'
		,mockito: '3.3.3'
		,lombok : '1.18.10'
		,querydslSql : '4.3.1'
		,jstl : '1.2.5'
	]

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task initSourceFolders {
	    sourceSets*.java.srcDirs*.each {
	        if( !it.exists() ) {
	            it.mkdirs()
	        }
	    }

	    sourceSets*.resources.srcDirs*.each {
	        if( !it.exists() ) {
	            it.mkdirs()
	        }
	    }
	}

	dependencies {
		annotationProcessor( [group: 'org.projectlombok' , name: 'lombok' , version: def_version.lombok])
		testAnnotationProcessor([group: 'org.projectlombok' , name: 'lombok' , version: def_version.lombok])
		implementation group: 'org.projectlombok' , name: 'lombok' , version: def_version.lombok

		/*
		implementation group: 'com.querydsl' , name: 'querydsl-apt'
		annotationProcessor( [group: 'com.querydsl' , name: 'querydsl-apt'])

		implementation group: 'com.querydsl' , name: 'querydsl-jpa'
		annotationProcessor( [group: 'com.querydsl' , name: 'querydsl-jpa'])
		*/


		implementation(
			[group: 'com.querydsl' , name: 'querydsl-apt']
			,[group: 'com.querydsl' , name: 'querydsl-jpa']
			,[group: 'com.querydsl' , name: 'querydsl-sql' ,version: def_version.querydslSql]
			,[group: 'com.querydsl' , name: 'querydsl-sql-spring', version: def_version.querydslSql]
		)

		annotationProcessor( [group: 'com.querydsl' , name: 'querydsl-apt'])
		annotationProcessor( [group: 'com.querydsl' , name: 'querydsl-jpa'])


		//junit
		testImplementation(
			 [ group: 'org.junit.jupiter' , name: 'junit-jupiter-api' , version: def_version.junit ]
			,[ group: 'org.junit.jupiter' , name: 'junit-jupiter-engine' , version: def_version.junit ]
			,[ group: 'org.junit.jupiter' , name: 'junit-jupiter-params' , version: def_version.junit ]
			//,[ group: 'org.junit.vintage' , name: 'junit-vintage-engine' , version: def_version.junit ]

			,[ group: 'org.junit.platform' , name: 'junit-platform-launcher' , version: def_version.junitPlatform ]
			,[ group: 'org.junit.platform' , name: 'junit-platform-runner' , version: def_version.junitPlatform ]
			// mockito
			,[ group: 'org.mockito', name: 'mockito-core', version: def_version.mockito ]

		)

		testImplementation('org.springframework.boot:spring-boot-starter-test') {
			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		}

		implementation fileTree (dir: rootProject.file( 'libs' ), include:['*.jar'])


		implementation( // spring
			[ group: 'org.springframework.boot' , name: 'spring-boot-devtools']
			,[ group: 'org.springframework.boot' , name: 'spring-boot-starter-data-jpa' ]
			,[ group: 'org.springframework.boot' , name: 'spring-boot-starter-security']
			,[ group: 'org.springframework.boot' , name: 'spring-boot-starter-web' ]
			,[ group: 'org.springframework.boot' , name: 'spring-boot-starter-websocket']
			// ,[ group: 'org.springframework.security' , name: 'spring-security-config' , version: def_version.springSecurity ]
			,[ group: 'org.springframework.security' , name: 'spring-security-messaging' , version: def_version.springSecurity ] // websocket message 추가. 
			,[ group: 'org.springframework.security' , name: 'spring-security-taglibs' , version: def_version.springSecurity ]
			

			// jpa model history
			,[ group: 'org.springframework.data' , name: 'spring-data-envers' , version: def_version.springData ]
		)

		implementation( // apache.commons
			[ group: 'org.apache.commons' , name: 'commons-dbcp2' , version: '2.2.0']
			,[ group: 'org.apache.commons' , name: 'commons-collections4' , version: '4.4']
			,[ group: 'org.apache.commons' , name: 'commons-lang3' , version: '3.9']
			,[ group: 'org.apache.commons' , name: 'commons-csv' , version: '1.7']
			,[ group: 'org.apache.commons' , name: 'commons-compress' , version: '1.18']
			,[ group: 'org.apache.commons', name: 'commons-text', version: '1.9']
		)

		implementation( // poi
			[ group: 'org.apache.poi' , name: 'poi' , version: def_version.poi ]
			,[ group: 'org.apache.poi' , name: 'poi-ooxml' , version: def_version.poi ]
		)

		implementation( // tiles
			[ group: 'org.apache.tiles' , name: 'tiles-core' , version: def_version.tiles ]
			,[ group: 'org.apache.tiles' , name: 'tiles-jsp' , version: def_version.tiles ]
			,[ group: 'org.apache.tiles' , name: 'tiles-el' , version: def_version.tiles ]
		)

		implementation( // log
			[ group: 'org.slf4j' , name: 'slf4j-api' , version: '1.7.26']
			,[ group: 'ch.qos.logback' , name: 'logback-classic' , version: '1.2.3']
			,[ group: 'org.codehaus.janino' , name: 'janino' , version: '3.0.12']
		)

		// xml to json
		implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.11.2'

		implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.7'
		implementation group: 'com.zaxxer', name: 'HikariCP', version: '3.4.1'
		implementation group: 'org.jdom' , name: 'jdom' , version: '1.1.3'
		implementation group: 'org.mybatis' , name: 'mybatis' , version: '3.5.5'
		implementation group: 'org.mybatis' , name: 'mybatis-spring' , version: '2.0.5'

		implementation group: 'commons-io' , name: 'commons-io' , version: '2.6'
		implementation group: 'commons-fileupload' , name: 'commons-fileupload' , version: '1.4'
		implementation group: 'commons-codec' , name: 'commons-codec' , version: '1.11'


		implementation group: 'com.alibaba' , name: 'druid' , version: '1.2.2'

		// sql formatter
		implementation group: 'com.github.vertical-blank', name: 'sql-formatter', version: '1.0'

		implementation group: 'com.thoughtworks.xstream' , name: 'xstream' , version: '1.4.11'
		implementation group: 'org.antlr' , name: 'stringtemplate' , version: '4.0.2'
		implementation group: 'com.github.jknack' , name: 'handlebars' , version: '4.1.0'

		// jstl apache 모듈로 변경.
		implementation(
			[group: 'org.apache.taglibs', name: 'taglibs-standard-spec', version: def_version.jstl ]
			,[group: 'org.apache.taglibs', name: 'taglibs-standard-jstlel', version: def_version.jstl ]
		)
		//implementation group: 'javax.servlet' , name: 'jstl' , version: '1.2'  //2020-07-26

    	// 내장 톰켓.
    	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'

    	providedCompile(
			[ group: 'javax.servlet' , name: 'javax.servlet-api' , version: '4.0.0' ]
			, [ group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: def_version.jspApi ]
			, [ group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat']
			, [ group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper']
		)

		// db driver
		implementation(
			[ group: 'com.h2database' , name: 'h2' , version: '1.4.199' ]
		)
	}

	def querydslSrcDir = 'src/main/generated'

	querydsl {
	    library = "com.querydsl:querydsl-apt"
	    jpa = true
	    querydslSourcesDir = querydslSrcDir
	}

	configurations {
	    querydsl.extendsFrom compileClasspath
	}

	compileQuerydsl{ // querydsl 컴파일시 사용하는 애노테이션프로세서('com.querydsl.apt.jpa.JPAAnnotationProcessor')의 경로를 querydsl 이 지정한 경로를 이용한다는 선언
	    options.annotationProcessorPath = configurations.querydsl
	}

	configurations {
	    querydsl.extendsFrom compileClasspath
	}

	sourceSets {
	    main {
	        java {
	            srcDirs = ['src/main/java', querydslSrcDir]
	        }
	    }
	}
	tasks.withType(JavaCompile) {
	    options.annotationProcessorGeneratedSourcesDirectory = file(querydslSrcDir)
	}

	test {
	    useJUnitPlatform()

   		//exclude '**/*' // 빌드시 제외 하고 싶을때 사용.
	}

	// JAVA file compile charset
	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

	// 소스 분석.
	sonarqube {
	    properties {
	        property "sonar.sources", "src"
	        property "sonar.exclusions", "**/*Test*.*, **/Q*.JAVA"
	        property "sonar.test.inclusions", "**/*Test.groovy, **/*Test.java"
	        property "sonar.coverage.exclusions", "**/*Test*.*, **/Q*.java"
	        property "sonar.java.junit.reportPaths", "${buildDir}/test-results"
	        property "sonar.jacoco.reportPaths", "${buildDir}/jacoco/jacoco.exec"
	    }
	}
}

project(':varsql-core') {
	war {
	    enabled = false
	}
}

project(':varsql-web') {
    dependencies {
        compile project(':varsql-core')
    }
}