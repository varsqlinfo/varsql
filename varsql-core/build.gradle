
apply from: "$rootDir/helpers/common-methods.gradle"

task generateCode {
    doLast {
        println 'Generating some code...'
    }
}

task generateCustomConfig {
    doLast {
          println "Generating custom configuration..."
    }
}

eclipse { // 이클립스 project facets설정.

	project.natures "org.springsource.ide.eclipse.gradle.core.nature"
	
	//프로젝트를 가져 오거나 동기화
	synchronizationTasks generateCustomConfig

	// 자동 빌드
	autoBuildTasks generateCode
	
	wtp {
    	component {
            contextPath = '' // context path 지정
        }
        facet {
        	facets = []
            facet name: 'jst.web', version: '3.1'
            facet name: 'jst.java', version: '1.8'
        }
    }

	classpath {
        defaultOutputDir = file("target-notused")
        file.whenMerged {
            entries.each { entry ->
                if (entry.kind == 'src' && entry.hasProperty('output')) {
                    entry.output = entry.output.replace('bin/', "target/")
                }
            }
        }
    }
}


bootJar {
    enabled = false
}

jar{
	enabled=true
	archiveClassifier = ''
	
	archiveBaseName ='varsql-core-' +project.property('varsqlVersion');
	
	// update date check
  	fn_updateDateCheck(archivePath.parent +File.separator + archiveFileName.get(), outputs)
	
	from ('src/main/java'){
		include '**/*.xml'
	}
	
	doLast {
		println("##### varsql-core export path : " + archivePath.parent)
	}
}


task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.varsql.fatjar.Application'
    }
    archiveBaseName = 'varsql-all-in-one-jar'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


