<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sqlserver.mata">
	<!-- db 정보보기. -->
	<select id="dbSystemView" parameterType="databaseParamInfo" resultType="hashmap">
		SELECT @@VERSION as INFO_VAL
	</select>
	<select id="schemaList" parameterType="databaseParamInfo" resultType="string">
		select name from sys.schemas
		where name not in ('guest','INFORMATION_SCHEMA','sys','db_owner','db_accessadmin','db_securityadmin','db_ddladmin','db_backupoperator','db_datareader','db_datawriter','db_denydatareader','db_denydatawriter')
	</select>
	
	<!-- ================= table start ================= -->
	<!--  tableList 목록 보기. -->
	<select id="tableList" parameterType="databaseParamInfo" resultType="tableInfo">
		select TABLE_SCHEMA  "SCHEMA"
			, TABLE_NAME AS "NAME"
			, prop.value AS "REMARKS"
		from ${databaseName}.INFORMATION_SCHEMA.tables tb 
		LEFT JOIN   ${databaseName}.SYS.EXTENDED_PROPERTIES prop 
		ON prop.MAJOR_ID = OBJECT_ID(tb.TABLE_CATALOG +'.'+tb.TABLE_SCHEMA +'.'+tb.TABLE_NAME ) AND prop.MINOR_ID= 0 AND prop.class = 1 AND prop.name = 'MS_Description'
		where 1=1 
		and tb.TABLE_SCHEMA = #{schema}
		and tb.TABLE_TYPE = 'BASE TABLE'
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				tb.TABLE_NAME in (${item})
			</foreach>
		</if>
		ORDER  BY tb.TABLE_NAME
	</select>

	<!-- table adn column info -->
	<select id="tableMetadata" parameterType="databaseParamInfo" resultType="dataMap">
		select 
			 tb.TABLE_SCHEMA as "SCHEMA"
			, tb.TABLE_NAME as "TABLE_NAME"
			, col.COLUMN_NAME as "COLUMN_NAME"
			, col.DATA_TYPE  as "TYPE_NAME"
			, case when CHARINDEX( col.DATA_TYPE, 'char,varchar,nchar,nvarchar' , 0) > 0 then col.CHARACTER_MAXIMUM_LENGTH  else '' end as COLUMN_SIZE
			, case when CHARINDEX( col.DATA_TYPE, 'float,real,numeric,decimal' , 0) > 0 then col.NUMERIC_PRECISION  else '' end as "DATA_PRECISION"
			, case when CHARINDEX( col.DATA_TYPE, 'float,real,numeric,decimal' , 0) > 0 then col.NUMERIC_SCALE  else '' end as "DECIMAL_DIGITS"
			, (CASE WHEN col.IS_NULLABLE  = 'NO'  then 'N' ELSE 'Y' END) as "IS_NULLABLE" 
			, col.COLUMN_DEFAULT AS "COLUMN_DEF"
			, prop.value as "COMMENT"
			,(case when f.COLUMN_NAME is not null then 'PK' else '' end)as "CONSTRAINTS"
		from ${databaseName}.INFORMATION_SCHEMA.tables tb inner join ${databaseName}.INFORMATION_SCHEMA.columns col on tb.TABLE_SCHEMA = col.TABLE_SCHEMA and  tb.TABLE_NAME = col.TABLE_NAME
		LEFT JOIN ${databaseName}.SYS.EXTENDED_PROPERTIES prop WITH(NOLOCK) ON prop.MAJOR_ID = OBJECT_ID(tb.TABLE_CATALOG +'.'+tb.TABLE_SCHEMA +'.'+tb.TABLE_NAME )	AND prop.MINOR_ID = COLUMNPROPERTY(prop.MAJOR_ID, col.COLUMN_NAME, 'COLUMNID') AND prop.class = 1 AND prop.name = 'MS_Description'
		LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS E WITH(NOLOCK) 
		ON	tb.TABLE_SCHEMA = e.TABLE_SCHEMA and col.TABLE_NAME = E.TABLE_NAME AND	E.CONSTRAINT_TYPE = 'PRIMARY KEY'
		LEFT JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE F WITH(NOLOCK)
		ON	tb.TABLE_SCHEMA = e.TABLE_SCHEMA and F.TABLE_NAME = E.TABLE_NAME AND F.CONSTRAINT_NAME = E.CONSTRAINT_NAME	AND	F.COLUMN_NAME = Col.COLUMN_NAME
		where 1=1 
		and tb.TABLE_SCHEMA = #{schema}
		and tb.TABLE_TYPE = 'BASE TABLE'
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				tb.TABLE_NAME in (${item})
			</foreach>
		</if>
		ORDER BY tb.TABLE_NAME, col.ORDINAL_POSITION 
		OPTION (MERGE JOIN)
	</select>

	<!-- ================= table end ================= -->

	<!-- ================= view start ================= -->

	<!-- view 목록 보기 -->
	<select id="viewList" parameterType="databaseParamInfo" resultType="tableInfo">
		select TABLE_SCHEMA  "SCHEMA"
			, TABLE_NAME AS "NAME"
			, prop.value AS "REMARKS"
		from ${databaseName}.INFORMATION_SCHEMA.tables tb 
		LEFT JOIN   ${databaseName}.SYS.EXTENDED_PROPERTIES prop 
		ON prop.MAJOR_ID = OBJECT_ID(tb.TABLE_CATALOG +'.'+tb.TABLE_SCHEMA +'.'+tb.TABLE_NAME ) AND prop.MINOR_ID= 0 AND prop.class = 1 AND prop.name = 'MS_Description'
		where 1=1 
		and tb.TABLE_SCHEMA = #{schema}
		and tb.TABLE_TYPE = 'VIEW'
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				tb.TABLE_NAME in (${item})
			</foreach>
		</if>
		ORDER  BY tb.TABLE_NAME
	</select>

	<!-- view and column info -->
	<select id="viewMetadata" parameterType="databaseParamInfo" resultType="dataMap">
		select 
			 tb.TABLE_SCHEMA as "SCHEMA"
			, tb.TABLE_NAME as "TABLE_NAME"
			, col.COLUMN_NAME as "COLUMN_NAME"
			, col.DATA_TYPE  as "TYPE_NAME"
			, case when CHARINDEX( col.DATA_TYPE, 'char,varchar,nchar,nvarchar' , 0) > 0 then col.CHARACTER_MAXIMUM_LENGTH  else '' end as COLUMN_SIZE
			, case when CHARINDEX( col.DATA_TYPE, 'float,real,numeric,decimal' , 0) > 0 then col.NUMERIC_PRECISION  else '' end as "DATA_PRECISION"
			, case when CHARINDEX( col.DATA_TYPE, 'float,real,numeric,decimal' , 0) > 0 then col.NUMERIC_SCALE  else '' end as "DECIMAL_DIGITS"
			, (CASE WHEN col.IS_NULLABLE  = 'NO'  then 'N' ELSE 'Y' END) as "IS_NULLABLE" 
			, col.COLUMN_DEFAULT AS "COLUMN_DEF"
			, prop.value as "COMMENT"
		from ${databaseName}.INFORMATION_SCHEMA.tables tb 
		inner join ${databaseName}.INFORMATION_SCHEMA.columns col on tb.TABLE_SCHEMA = col.TABLE_SCHEMA and tb.TABLE_NAME = col.TABLE_NAME
		LEFT JOIN   ${databaseName}.SYS.EXTENDED_PROPERTIES prop ON prop.MAJOR_ID = OBJECT_ID(tb.TABLE_CATALOG +'.'+tb.TABLE_SCHEMA +'.'+tb.TABLE_NAME ) 
		AND prop.MINOR_ID= COLUMNPROPERTY(prop.MAJOR_ID, col.COLUMN_NAME, 'COLUMNID') 
		AND prop.class = 1 AND prop.name = 'MS_Description'
		where 1=1 
		and tb.TABLE_SCHEMA = #{schema}
		and tb.TABLE_TYPE = 'VIEW'
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				tb.TABLE_NAME in (${item})
			</foreach>
		</if>
		ORDER BY tb.TABLE_NAME, col.ORDINAL_POSITION 
		OPTION (MERGE JOIN)
	</select>

	<!-- ================= view end ================= -->

	<!-- procedure list -->
	<select id="procedureList" parameterType="databaseParamInfo" resultType="objectInfo">
		select so.name  AS "NAME"
			, ISNULL(prop.value,'')  AS "REMARKS"
			, so.crdate as "CREATED"
			, so.status as "STATUS"
		FROM        ${databaseName}.sys.sysobjects as so
		INNER JOIN  ${databaseName}.sys.sysusers as u
			ON      u.uid = so.uid and so.type='P'
		LEFT OUTER JOIN ${databaseName}.sys.extended_properties AS prop
			ON      prop.major_id = so.id
			AND     prop.minor_id = 0
			AND     prop.name = 'MS_Description'
		ORDER  BY so.name
	</select>

	<!-- object info  info map start  -->
	<resultMap id="objectInfoMap" type="objectInfo">
	    <id property="name" column="OBJECT_NAME" />
	    <result property="type" column="OBJECT_TYPE"/>
	    <result property="created" column="CREATED"/>
	    <result property="status" column="STATUS"/>
	    <result property="returnType" column="RETURN_TYPE"/>
	    <collection property="colList" javaType="java.util.ArrayList" resultMap="objectColInfoMap"/>
	</resultMap>

	<resultMap id="objectColInfoMap" type="objectColumnInfo">
	    <id property="no" column="SEQUENCE" />
	    <result property="name" column="ARGUMENT_NAME"/>
	    <result property="typeName" column="TYPE_NAME"/>
	    <result property="columnType" column="IN_OUT"/>
	</resultMap>
	<!-- object info info map end  -->

	<!-- procedure arguments list -->
	<select id="objectMetadataList" parameterType="databaseParamInfo" resultMap="objectInfoMap">
		select
			a.routine_name as "OBJECT_NAME"
			, prop.value AS  "COMMENT"
			,CREATED
			,'' as "STATUS"
			,p.PARAMETER_NAME  as "ARGUMENT_NAME"
			,p.DATA_TYPE as "DATA_TYPE"
			,p.parameter_mode as "IN_OUT"
			,p.ORDINAL_POSITION as "SEQUENCE"
			,p.CHARACTER_MAXIMUM_LENGTH as "COLUMN_SIZE"
			,p.NUMERIC_PRECISION as "DATA_PRECISION"
			,p.NUMERIC_SCALE as "DECIMAL_DIGITS"
		from
			${databaseName}.information_schema.ROUTINES a left outer join ${databaseName}.information_schema.parameters p
		on a.ROUTINE_SCHEMA =p.SPECIFIC_SCHEMA
		and a.specific_name = p.specific_name
		left join   ${databaseName}.SYS.EXTENDED_PROPERTIES prop 
		ON prop.MAJOR_ID = OBJECT_ID(a.ROUTINE_CATALOG +'.'+ a.ROUTINE_SCHEMA +'.'+a.routine_name ) AND prop.MINOR_ID= 0 AND prop.class = 1 AND prop.name = 'MS_Description'
		where 1=1
		and upper(a.ROUTINE_SCHEMA) =#{schema}
		<choose>
			<when test='"procedure".equalsIgnoreCase(objectType)'>
				and a.ROUTINE_TYPE = 'PROCEDURE'
			</when>
			<when test='"function".equalsIgnoreCase(objectType)'>
				and a.ROUTINE_TYPE = 'FUNCTION'
			</when>
			<otherwise>
				and a.ROUTINE_TYPE = #{objectType}
			</otherwise>
		</choose>
		
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				 a.routine_name in (${item})
			</foreach>
		</if>
		ORDER BY a.routine_name, p.parameter_mode, p.ORDINAL_POSITION
	</select>

	<!-- function list -->
	<select id="functionList" parameterType="databaseParamInfo" resultType="objectInfo">
		select
			a.routine_name as "NAME"
			,'FUNCTION' as "TYPE"
			, prop.value AS  "REMARKS"
			,CREATED
			,'' as "STATUS"
		from
			information_schema.ROUTINES a left join   ${databaseName}.SYS.EXTENDED_PROPERTIES prop 
		ON prop.MAJOR_ID = OBJECT_ID(a.ROUTINE_CATALOG +'.'+ a.ROUTINE_SCHEMA +'.'+a.routine_name ) AND prop.MINOR_ID= 0 AND prop.class = 1 AND prop.name = 'MS_Description'
		where 1=1
		and ROUTINE_TYPE = 'FUNCTION'
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				a.routine_name in (${item})
			</foreach>
		</if>
		ORDER  BY a.routine_name
	</select>

	<!-- index list -->
	 <select id="indexList" parameterType="databaseParamInfo" resultType="objectInfo">
		select ind.name as "NAME"
			,'' as "STATUS"
		FROM
		     ${databaseName}.sys.indexes ind INNER JOIN ${databaseName}.sys.tables t
		ON ind.object_id = t.object_id
		where ind.type > 0
		and ind.is_primary_key = 0
	</select>

	<!-- index and column info -->
	 <select id="indexMetadata" parameterType="databaseParamInfo" resultType="dataMap">
		 SELECT
			t.name as  "TABLE_NAME"
			, ind.name as "INDEX_NAME"
			, ic.key_ordinal as "ORDINAL_POSITION"
			, col.name as "COLUMN_NAME"
			, (case when ind.is_primary_key=1 then 'PK'
			WHEN ind.is_unique=1 then 'UQ'
			else '' end
			) TYPE
			,'' as "STATUS"
			, (case when ic.is_descending_key = 0 then 'A' else 'D' end) ASC_OR_DESC
		FROM
		     ${databaseName}.sys.indexes ind
		INNER JOIN
		     ${databaseName}.sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id
		INNER JOIN
		     ${databaseName}.sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id
		INNER JOIN
		     ${databaseName}.sys.tables t ON ind.object_id = t.object_id
		where 1=1
		and ind.is_primary_key = 0
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="and (" close=")" separator="or">
				ind.name in (${item})
			</foreach>
		</if>
		ORDER BY
		     ind.name, t.name, ind.index_id, ic.index_column_id
	</select>


	<!-- trigger list -->
	<select id="triggerList" parameterType="databaseParamInfo" resultType="objectInfo">
		sELECT  OBJECT_NAME(parent_object_id) as "TABLE_NAME",
		        name as "NAME" ,
				create_date as "CREATED",
		        OBJECTPROPERTY(object_id, 'ExecIsUpdateTrigger') AS isupdate ,
		        OBJECTPROPERTY(object_id, 'ExecIsDeleteTrigger') AS isdelete ,
		        OBJECTPROPERTY(object_id, 'ExecIsInsertTrigger') AS isinsert ,
		        OBJECTPROPERTY(object_id, 'ExecIsAfterTrigger') AS isafter ,
		        OBJECTPROPERTY(object_id, 'ExecIsInsteadOfTrigger') AS isinsteadof ,
		        CASE OBJECTPROPERTY(object_id, 'ExecIsTriggerDisabled')
		          WHEN 1 THEN 'Disabled'
		          ELSE 'Enabled'
		        END AS "STATUS"
		FROM    ${databaseName}.sys.objects
		WHERE   type = 'TR'
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="and (" close=")" separator="or">
				name in (${item})
			</foreach>
		</if>
		ORDER BY OBJECT_NAME(parent_object_id)
	</select>

	<!-- trigger info map -->
	<resultMap id="triggerInfoMap" type="triggerInfo">
	    <result property="name" column="OBJECT_NAME" />
	    <result property="tblName" column="TABLE_NAME"/>
	    <result property="eventType" column="EVENTTYPE"/>
	    <result property="timing" column="TIMING"/>
	    <result property="created" column="CREATED"/>
	    <result property="status" column="STATUS"/>
	</resultMap>

	<!-- trigger metadata -->
	<select id="triggerMetadata" parameterType="databaseParamInfo" resultMap="triggerInfoMap">
		select  OBJECT_NAME(parent_object_id) as "TABLE_NAME",
		        name as "OBJECT_NAME" ,
				create_date as "CREATED",
				(CASE WHEN OBJECTPROPERTY(object_id, 'ExecIsUpdateTrigger')=1  then 'UPDATE'
				WHEN OBJECTPROPERTY(object_id, 'ExecIsDeleteTrigger')=1  then 'DELETE'
				WHEN OBJECTPROPERTY(object_id, 'ExecIsInsertTrigger')=1  then 'INSERT'
				WHEN OBJECTPROPERTY(object_id, 'ExecIsAfterTrigger')=1  then 'AFTER'
				WHEN OBJECTPROPERTY(object_id, 'ExecIsInsteadOfTrigger')=1  then 'INSTEADOF'
				ELSE '' END) as "EVENTTYPE",
		        CASE OBJECTPROPERTY(object_id, 'ExecIsTriggerDisabled')
		          WHEN 1 THEN 'Disabled'
		          ELSE 'Enabled'
		        END AS "STATUS"
		FROM    ${databaseName}.sys.objects
		WHERE   type = 'TR'
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="and (" close=")" separator="or">
				name in (${item})
			</foreach>
		</if>
		ORDER BY OBJECT_NAME(parent_object_id)
	</select>

	<!-- sequence info map -->
	<resultMap id="sequenceInfoMap" type="sequenceInfo">
	    <result property="name" column="OBJECT_NAME" />
	    <result property="minValue" column="MIN_VALUE"/>
	    <result property="maxValue" column="MAX_VALUE"/>
	    <result property="incrementBy" column="INCREMENT_BY"/>
	    <result property="created" column="CREATED"/>
	    <result property="status" column="STATUS"/>

	    <result property="cacheSize" column="CACHE_SIZE"/>
	    <result property="cycleFlag" column="CYCLE_FLAG"/>
	    <result property="orderFlag" column="ORDER_FLAG"/>
	    <result property="lastDdlTime" column="LAST_DDL_TIME"/>
	    <result property="lastNumber" column="LAST_NUMBER"/>
	</resultMap>

	<!-- sequence list -->
	<select id="sequenceList" parameterType="databaseParamInfo" resultType="objectInfo">
		SELECT
		  name as "NAME",
		  cast(start_value AS NUMERIC)   AS start_value,
		  cast(increment AS NUMERIC)     AS increment,
		  cast(current_value AS NUMERIC) AS current_value
		FROM ${databaseName}.sys.sequences
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="and (" close=")" separator="or">
				name in (${item})
			</foreach>
		</if>
	</select>

	<!--
		시퀸스 목록 보기.
	 -->
	<select id="sequenceMetadata" parameterType="databaseParamInfo" resultMap="sequenceInfoMap">
		SELECT
		  name as "OBJECT_NAME"
		  ,create_date as CREATED
		  ,MINIMUM_VALUE as "MIN_VALUE"
		  ,increment as "INCREMENT_BY"
		  ,current_value as "LAST_NUMBER"
		FROM ${databaseName}.sys.sequences
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="and (" close=")" separator="or">
				name in (${item})
			</foreach>
		</if>
	</select>

	<!--
		시퀸스 script
	 -->
	<select id="sequenceScript" parameterType="databaseParamInfo" resultType="hashmap">
		SELECT
			name as "objectName"
			,CREATE_DATE as "created"
			,MINIMUM_VALUE as "minValue"
			,MAXIMUM_VALUE as "maxValue"
			,INCREMENT as "increment"
			,CACHE_SIZE as "cacheSize"
			,IS_CYCLING as "cycleFlag"
		FROM ${databaseName}.sys.sequences
		where name = #{objectName}
	</select>

	<!--
		Table DDL Script
	 -->
	<select id="tableScriptColumn"  parameterType="databaseParamInfo" resultType="columnInfo">
		select 
			 tb.TABLE_NAME as "tableName"
			, col.COLUMN_NAME as "name"
			, col.DATA_TYPE  as "typeName"
			, case when CHARINDEX( col.DATA_TYPE, 'char,varchar,nchar,nvarchar' , 0) > 0 then col.CHARACTER_MAXIMUM_LENGTH  else '' end as "length"
			, case when CHARINDEX( col.DATA_TYPE, 'float,real,numeric,decimal' , 0) > 0 then col.NUMERIC_PRECISION  else '' end as "dataPrecision"
			, case when CHARINDEX( col.DATA_TYPE, 'float,real,numeric,decimal' , 0) > 0 then col.NUMERIC_SCALE  else '' end as "decimalDigits"
			, (CASE WHEN col.IS_NULLABLE  = 'NO'  then 'N' ELSE 'Y' END) as "nullable" 
			, col.COLUMN_DEFAULT AS "defaultVal"
			, col.ORDINAL_POSITION as "no" 
		from ${databaseName}.INFORMATION_SCHEMA.tables tb 
		inner join ${databaseName}.INFORMATION_SCHEMA.columns col on tb.TABLE_NAME = col.TABLE_NAME
		where 1=1 
		and tb.TABLE_TYPE = 'BASE TABLE'
		and tb.TABLE_NAME = #{objectName}
		ORDER BY tb.TABLE_NAME, col.ORDINAL_POSITION 
	</select>

	<!--
		Table DDL Script => Primary key list
	 -->
	<select id="tableConstraints" parameterType="databaseParamInfo" resultType="constraintInfo">
		select * from (
			SELECT
				 ind.name as "constraintName"
				,OBJECT_NAME(ic.object_id, db_id(#{databaseName})) as "tableName"
				, col.name as "columnName"
				, (case when ind.is_primary_key=1 then 'PK'
					WHEN ind.is_unique=1 then 'UQ'
					else '' end
				) "type"
				, (case when ic.is_descending_key = 0 then 'ASC' else 'DESC' end) ascOrDesc
				,ic.key_ordinal as ORDINAL
				,'' as "referencedTableName"
				,'' as "referencedColumnName"
			FROM ${databaseName}.sys.indexes ind
			INNER JOIN ${databaseName}.sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id
			INNER JOIN ${databaseName}.sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id
			INNER JOIN ${databaseName}.sys.tables t ON ind.object_id = t.object_id
			where 1=1
			and (ind.is_primary_key = 1 or ind.is_unique=1)
			and t.name = #{objectName}
			union all
			select OBJECT_NAME(constraint_object_id, db_id(#{databaseName})) as "constraintName"
				,OBJECT_NAME(fkc.parent_object_id, db_id(#{databaseName})) as "tableName"
				, col.name as "columnName"
				, 'FK' as "type"
				, '' as ascOrDesc
				, 2 as "ORDINAL"
				,OBJECT_NAME(referenced_object_id, db_id(#{databaseName})) as "referencedTableName"
				,col2.name  as "referencedColumnName"
			from ${databaseName}.sys.foreign_key_columns fkc inner join ${databaseName}.sys.tables t ON fkc.parent_object_id = t.object_id 
			INNER JOIN ${databaseName}.sys.columns col ON fkc.parent_object_id = col.object_id and fkc.parent_column_id  = col.column_id
			INNER JOIN ${databaseName}.sys.columns col2 ON fkc.referenced_object_id = col2.object_id and fkc.referenced_column_id   = col2.column_id
			and t.name = #{objectName}
		)  a order by tableName , ORDINAL 
	</select>

	<!--
		Table DDL Script => Table, Column Comment Script
	 -->
	<select id="tableColumnComments" parameterType="databaseParamInfo" resultType="commentInfo">
		select * From 
		(
			SELECT
				'TBL' as "type"
				 , schema_name(tbl.schema_id) as "schema"
				 , convert(varchar, tbl.name) as "name"
				 , convert(varchar, p.value) as "comment"
				 , 0 as sort_order
			FROM ${databaseName}.sys.tables AS tbl
				INNER JOIN ${databaseName}.sys.extended_properties AS p
				ON p.major_id = tbl.object_id
			WHERE 1=1
		        AND p.minor_id = 0
		        AND p.class = 1
		        AND tbl.object_id = object_id(#{databaseName}+'.'+schema_name(tbl.schema_id)+'.'+#{objectName})
		        AND p.value > ''
			UNION ALL
			SELECT
				'COL' as "type"
				 , schema_name(a.uid) as "schema"
				 , convert(varchar, b.name) as "name"
				 , convert(varchar, p.value) as "comment"
				 , b.colid as sort_order
			FROM ${databaseName}.sys.sysobjects a INNER JOIN ${databaseName}.sys.syscolumns b ON (a.id = b.id)
				INNER JOIN ${databaseName}.sys.systypes c ON (b.xusertype = c.xusertype)
				LEFT OUTER JOIN ${databaseName}.sys.sysindexkeys d ON (b.id =d.id and b.colid = d.colid and indid =1)
				LEFT JOIN ${databaseName}.sys.extended_properties AS p ON p.major_id = a.id AND p.minor_id = b.colid AND p.class = 1
			WHERE 1=1
				AND a.id = object_id(#{databaseName}+'.'+schema_name(a.uid)+'.'+#{objectName})
				AND p.value > ''
		  ) a order by sort_order
	</select>

	<!--
	 view script 생성  create 문
	 -->
	<select id="viewScript" resultType="string" parameterType="databaseParamInfo">
		select definition from ${databaseName}.sys.sql_modules 
		where object_id = object_id(#{databaseName}+'.'+#{schema}+'.'+#{objectName})
	</select>

	<!--
		object function  , procedure 소스
	 -->
	<select id="objectScriptSource" resultType="string" parameterType="databaseParamInfo">
		select definition from ${databaseName}.sys.sql_modules 
		where object_id = object_id(#{databaseName}+'.'+#{schema}+'.'+#{objectName})
	</select>

	<!--
		create index  Script
	 -->
	<select id="indexScriptSource" parameterType="databaseParamInfo" resultType="hashmap">
		SELECT
			 ind.name as "indexName"
			,OBJECT_NAME(ic.object_id, db_id(#{databaseName})) as "tableName"
			, col.name as "columnName"
			, (case when ind.is_primary_key=1 then 'PK'
				WHEN ind.is_unique=1 then 'UQ'
				else '' end
			) "type"
			, (case when ic.is_descending_key = 0 then 'ASC' else 'DESC' end) ascOrDesc
			,ic.key_ordinal as ORDINAL
			,'' as "referencedTableName"
			,'' as "referencedColumnName"
		FROM ${databaseName}.sys.indexes ind
		INNER JOIN ${databaseName}.sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id
		INNER JOIN ${databaseName}.sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id
		INNER JOIN ${databaseName}.sys.tables t ON ind.object_id = t.object_id
		where 1=1
		and ind.is_primary_key = 0
		and ind.name = #{objectName}
	</select>

</mapper>
