<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="h2.mata">
	<!-- db 정보보기. -->
	<select id="dbSystemView" parameterType="databaseParamInfo" resultType="hashmap">
		SELECT H2VERSION()as INFO_VAL FROM DUAL
	</select>

	<!-- ================= table start ================= -->
	<!--  tableList 목록 보기. -->
	<select id="tableList" parameterType="databaseParamInfo" resultType="tableInfo">
		SELECT
			tbl.TABLE_NAME  AS "NAME"
			, tbl.REMARKS AS "REMARKS"
		FROM INFORMATION_SCHEMA.TABLES  tbl
		WHERE TABLE_SCHEMA = #{schema}
		and tbl.TABLE_TYPE in ('TABLE','BASE TABLE')
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				tbl.TABLE_NAME in (${item})
			</foreach>
		</if>
		ORDER BY TABLE_NAME
	</select>

	<!-- table adn column info -->
	<select id="tableMetadata" parameterType="databaseParamInfo" resultType="dataMap">
		select
			col.TABLE_NAME as "TABLE_NAME",
			col.COLUMN_NAME as "COLUMN_NAME",
			col.DATA_TYPE as "TYPE_NAME",
			col.CHARACTER_OCTET_LENGTH as "COLUMN_SIZE",
			col.NUMERIC_PRECISION as "DATA_PRECISION",
			col.NUMERIC_SCALE as "DECIMAL_DIGITS",
			(
				CASE
				WHEN col.IS_NULLABLE = 'NO' then 'N'
				ELSE 'Y'
				END
			) as "IS_NULLABLE",
			col.COLUMN_DEFAULT AS "COLUMN_DEF",
				ind.CONSTRAINTS,
			col.REMARKS as "COMMENT"
		from
			INFORMATION_SCHEMA.TABLES tbl inner join information_schema.columns col 
			on tbl.TABLE_NAME = col.TABLE_NAME	and tbl.TABLE_TYPE in ('TABLE','BASE TABLE')
			left outer join (
				select a.TABLE_NAME , b.COLUMN_NAME, 'PK' as "CONSTRAINTS"
				from  information_schema.INDEXES a inner join information_schema.INDEX_COLUMNS b
				on a.INDEX_NAME = b.INDEX_NAME 
				where a.TABLE_SCHEMA = #{schema}
				and a.INDEX_TYPE_NAME = 'PRIMARY KEY'
				<if test="custom != null and custom.objectNameList != null">
					and
					<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
						a.table_name in (${item})
					</foreach>
				</if>
				group by a.TABLE_NAME, b.COLUMN_NAME
			) ind on col.TABLE_NAME = ind.TABLE_NAME and col.COLUMN_NAME = ind.COLUMN_NAME
		where col.TABLE_SCHEMA = #{schema}
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				col.table_name in (${item})
			</foreach>
		</if>
		order by col.TABLE_NAME , col.ORDINAL_POSITION
	</select>

	<!-- ================= table end ================= -->

	<!-- ================= view start ================= -->

	<!-- view 목록 보기 -->
	<select id="viewList" parameterType="databaseParamInfo" resultType="tableInfo">
		SELECT
			tbl.TABLE_NAME  AS "NAME"
			, tbl.REMARKS AS "REMARKS"
		FROM INFORMATION_SCHEMA.TABLES  tbl
		WHERE TABLE_SCHEMA = #{schema}
		and tbl.TABLE_TYPE in ('VIEW')
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				tbl.TABLE_NAME in (${item})
			</foreach>
		</if>
		ORDER BY TABLE_NAME
	</select>

	<!-- view and column info -->
	<select id="viewMetadata" parameterType="databaseParamInfo" resultType="dataMap">
		select
			col.TABLE_NAME as "TABLE_NAME",
			col.COLUMN_NAME as "COLUMN_NAME",
			col.DATA_TYPE as "TYPE_NAME" ,
			col.CHARACTER_OCTET_LENGTH as "COLUMN_SIZE",
			col.NUMERIC_PRECISION as "DATA_PRECISION",
			col.NUMERIC_SCALE as "DECIMAL_DIGITS",
			(
				CASE
				WHEN col.IS_NULLABLE = 'NO' then 'N'
				ELSE 'Y'
				END
			) as "IS_NULLABLE",
			col.COLUMN_DEFAULT AS "COLUMN_DEF",
			''	as CONSTRAINTS,
			col.REMARKS as "COMMENT"
		from
			INFORMATION_SCHEMA.TABLES tbl inner join information_schema.columns col 
			on tbl.TABLE_NAME = col.TABLE_NAME	and tbl.TABLE_TYPE in ('VIEW')
		where col.TABLE_SCHEMA = #{schema}
		<choose>
			<when test="custom != null and custom.objectNameList != null">
				and
				<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
					col.table_name in (${item})
				</foreach>
			</when>
			<otherwise>
				and col.TABLE_NAME in (select TABLE_NAME  from information_schema.views where TABLE_SCHEMA = #{schema})
			</otherwise>
		</choose>
		order by col.TABLE_NAME , col.ORDINAL_POSITION
	</select>

	<!-- ================= view end ================= -->

	<!-- object info  info map start  -->
	<resultMap id="objectInfoMap" type="objectInfo">
	    <id property="name" column="OBJECT_NAME" />
	    <result property="type" column="OBJECT_TYPE"/>
	    <result property="created" column="CREATED"/>
	    <result property="status" column="STATUS"/>
	    <result property="returnType" column="RETURN_TYPE"/>
	    <collection property="colList" javaType="java.util.ArrayList" resultMap="objectColInfoMap"/>
	</resultMap>

	<resultMap id="objectColInfoMap" type="objectColumnInfo">
	    <id property="no" column="SEQUENCE" />
	    <result property="name" column="ARGUMENT_NAME"/>
	    <result property="typeName" column="DATA_TYPE"/>
	    <result property="columnType" column="IN_OUT"/>
	</resultMap>
	<!-- object info info map end  -->
	
	<!-- procedure arguments list -->
	<select id="objectMetadataList" parameterType="databaseParamInfo" resultMap="objectInfoMap">
		select
			a.routine_name as "OBJECT_NAME"
			,'' as "COMMENT"
			,'' as "CREATED"
			,'' as "STATUS"
			,p.PARAMETER_NAME  as "ARGUMENT_NAME"
			,p.DATA_TYPE as "DATA_TYPE"
			,p.parameter_mode as "IN_OUT"
			,p.ORDINAL_POSITION as "SEQUENCE"
		from
			information_schema.ROUTINES a left outer join information_schema.parameters p
		on a.ROUTINE_SCHEMA =p.SPECIFIC_SCHEMA
		and a.specific_name = p.specific_name
		where 1=1
		and upper(a.ROUTINE_SCHEMA) =#{schema}
			<choose>
				<when test='"procedure".equalsIgnoreCase(objectType)'>
					and a.routine_type = 'PROCEDURE'
				</when>
				<when test='"function".equalsIgnoreCase(objectType)'>
					and a.routine_type = 'FUNCTION'
				</when>
				<otherwise>
					and a.routine_type =#{objectType}
				</otherwise>
			</choose>
			<if test="custom != null and custom.objectNameList != null">
				and
				<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
					a.routine_name in (${item})
				</foreach>
			</if>
		order by a.routine_name , p.ORDINAL_POSITION
	</select>

	<!-- function list -->
	<select id="functionList" parameterType="databaseParamInfo" resultType="objectInfo">
		select
			a.ROUTINE_NAME  AS "name"
			,a.ROUTINE_TYPE  as "type"
			, a.REMARKS  AS "remarks"
			, '' as "CREATED"
			, '' as "STATUS"
		from INFORMATION_SCHEMA.ROUTINES a
		where SPECIFIC_SCHEMA=#{schema}
		and a.ROUTINE_TYPE = 'FUNCTION'
	</select>

	<!-- index list -->
	 <select id="indexList" parameterType="databaseParamInfo" resultType="objectInfo">
		select
			 ind.INDEX_NAME as "name"
			,'' as "status"
		from information_schema.INDEXES  ind
		WHERE ind.TABLE_SCHEMA = #{schema}
		and ind.INDEX_TYPE_NAME !='PRIMARY KEY'
		order by ind.TABLE_NAME, ind.index_NAME
	</select>

	<!-- index and column info -->
	 <select id="indexMetadata" parameterType="databaseParamInfo" resultType="dataMap">
		select
			ind.TABLE_NAME as "TABLE_NAME",
			ind.INDEX_NAME as "INDEX_NAME",
			indc.COLUMN_NAME as "COLUMN_NAME",
			indc.ORDINAL_POSITION as "ORDINAL_POSITION",
			INDEX_TYPE_NAME||'' as  "TYPE",
			ORDERING_SPECIFICATION as  "ASC_OR_DESC"
		from information_schema.INDEXES  ind , information_schema.INDEX_COLUMNS indc
		where ind.INDEX_SCHEMA  = indc.INDEX_SCHEMA
		and ind.index_NAME  = indc.index_NAME
		and ind.INDEX_SCHEMA = #{schema}
		and ind.INDEX_TYPE_NAME !='PRIMARY KEY'
		<if test="custom != null and custom.objectNameList != null">
			<foreach item="item" index="index" collection="custom.objectNameList" open="and (" close=")" separator="or">
				ind.INDEX_NAME in (${item})
			</foreach>
		</if>
		order by ind.TABLE_NAME, ind.index_NAME, indc.ORDINAL_POSITION;
	</select>


	<!-- trigger list -->
	<select id="triggerList" parameterType="databaseParamInfo" resultType="objectInfo">
		select
			EVENT_OBJECT_TABLE as "TABLE_NAME",
	        TRIGGER_NAME as "name" ,
			'' as "created"
		from information_schema.TRIGGERS
		WHERE TRIGGER_SCHEMA = #{schema}
		order by EVENT_OBJECT_TABLE , TRIGGER_NAME
	</select>

	<!-- trigger info map -->
	<resultMap id="triggerInfoMap" type="triggerInfo">
	    <result property="name" column="OBJECT_NAME" />
	    <result property="tblName" column="TABLE_NAME"/>
	    <result property="eventType" column="EVENTTYPE"/>
	    <result property="timing" column="TIMING"/>
	    <result property="created" column="CREATED"/>
	    <result property="status" column="STATUS"/>
	    <result property="remarks" column="REMARKS"/>
	</resultMap>

	<!-- trigger metadata -->
	<select id="triggerMetadata" parameterType="databaseParamInfo" resultMap="triggerInfoMap">
		select
			EVENT_OBJECT_TABLE as "TABLE_NAME",
	        TRIGGER_NAME as "NAME" ,
			EVENT_MANIPULATION as "EVENTTYPE",
			'' as "STATUS",
			REMARKS as "REMARKS"
		from information_schema.TRIGGERS
		WHERE TRIGGER_SCHEMA = #{schema}
		<if test="custom != null and custom.objectNameList != null">
			<foreach item="item" index="index" collection="custom.objectNameList" open="and (" close=")" separator="or">
				TRIGGER_NAME in (${item})
			</foreach>
		</if>
		order by EVENT_OBJECT_TABLE , TRIGGER_NAME
	</select>

	<!-- sequence info map -->
	<resultMap id="sequenceInfoMap" type="sequenceInfo">
	    <result property="name" column="OBJECT_NAME" />
	    <result property="minValue" column="MIN_VALUE"/>
	    <result property="maxValue" column="MAX_VALUE"/>
	    <result property="incrementBy" column="INCREMENT_BY"/>
	    <result property="created" column="CREATED"/>
	    <result property="status" column="STATUS"/>

	    <result property="cacheSize" column="CACHE_SIZE"/>
	    <result property="cycleFlag" column="CYCLE_FLAG"/>
	    <result property="orderFlag" column="ORDER_FLAG"/>
	    <result property="lastDdlTime" column="LAST_DDL_TIME"/>
	    <result property="lastNumber" column="LAST_NUMBER"/>
	</resultMap>

	<!-- sequence list -->
	<select id="sequenceList" parameterType="databaseParamInfo" resultType="objectInfo">
		select
			SEQUENCE_NAME as  "name",
			INCREMENT as  "increment",
			BASE_VALUE as "current_value"
		from information_schema.SEQUENCES seq
		WHERE seq.SEQUENCE_SCHEMA = #{schema}
	</select>

	<!--
		시퀸스 목록 보기.
	 -->
	<select id="sequenceMetadata" parameterType="databaseParamInfo" resultMap="sequenceInfoMap">
		select
			SEQUENCE_NAME as "OBJECT_NAME"
			,'' as CREATED
			,MINIMUM_VALUE as "MIN_VALUE"
			,MAXIMUM_VALUE as "MAX_VALUE"
			,CYCLE_OPTION as "CYCLE_FLAG"
			,INCREMENT as "INCREMENT_BY"
			,BASE_VALUE as "LAST_NUMBER"
		from information_schema.SEQUENCES seq
		WHERE seq.SEQUENCE_SCHEMA = #{schema}
		<if test="custom != null and custom.objectNameList != null">
			<foreach item="item" index="index" collection="custom.objectNameList" open="and (" close=")" separator="or">
				seq.SEQUENCE_NAME in (${item})
			</foreach>
		</if>
		order by SEQUENCE_NAME
	</select>

	<!--
		시퀸스 script
	 -->
	<select id="sequenceScript" parameterType="databaseParamInfo" resultType="hashmap">
		select
			SEQUENCE_NAME as "objectName"
			,'' as CREATED
			,MINIMUM_VALUE as "minValue"
			,MAXIMUM_VALUE as "maxValue"
			,INCREMENT as "increment"
			,BASE_VALUE as "lastNumber"
		from information_schema.SEQUENCES seq
		WHERE seq.SEQUENCE_SCHEMA = #{schema}
		and seq.SEQUENCE_NAME = #{objectName}
	</select>

	<!--
	 view script 생성  create 문
	 -->
	<select id="viewScript" resultType="string" parameterType="databaseParamInfo">
		select VIEW_DEFINITION
		from information_schema.views
		WHERE TABLE_SCHEMA = #{schema}
		and TABLE_NAME =#{objectName}
	</select>

	<!--
		create index  Script
	 -->
	<select id="indexScript" resultType="dataMap" parameterType="databaseParamInfo">
		select
			indc.TABLE_NAME as "tableName",
			indc.INDEX_NAME as "objectName",
			indc.INDEX_SCHEMA as "schema",
			indc.COLUMN_NAME as "columnName",
			indc.ORDINAL_POSITION as "ordinalPosition",
			ORDERING_SPECIFICATION as  "ascOrDesc"
		from information_schema.INDEX_COLUMNS indc
		where  indc.INDEX_SCHEMA = #{schema}
		and INDEX_NAME =#{objectName}
		order by TABLE_NAME , INDEX_NAME , ORDINAL_POSITION 
	</select>

	<!-- create function script -->
	<select id="functionScript" resultType="string" parameterType="databaseParamInfo">
		select ROUTINE_DEFINITION  
		from information_schema.ROUTINES
		where SPECIFIC_SCHEMA=#{schema}
		and ROUTINE_TYPE = 'FUNCTION'
		and ROUTINE_NAME = #{objectName}
	</select>

</mapper>
