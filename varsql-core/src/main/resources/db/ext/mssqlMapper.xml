<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mssql.mata">
	<!-- db 정보보기. -->
	<select id="dbSystemView" parameterType="databaseParamInfo" resultType="hashmap">
		SELECT @@VERSION as INFO_VAL
	</select>

	<!-- ================= table start ================= -->
	<!--  tableList 목록 보기. -->
	<select id="tableList" parameterType="databaseParamInfo" resultType="tableInfo">
		select TABLE_SCHEMA  "SCHEMA"
			, TABLE_NAME AS "NAME"
			, prop.value AS "REMARKS"
		from ${databaseName}.INFORMATION_SCHEMA.tables tb 
		LEFT JOIN   ${databaseName}.SYS.EXTENDED_PROPERTIES prop 
		ON prop.MAJOR_ID = OBJECT_ID(tb.TABLE_CATALOG +'.'+tb.TABLE_SCHEMA +'.'+tb.TABLE_NAME ) AND prop.MINOR_ID= 0 AND prop.class = 1 AND prop.name = 'MS_Description'
		where 1=1 
		and tb.TABLE_TYPE = 'BASE TABLE'
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				tb.TABLE_NAME in (${item})
			</foreach>
		</if>
		ORDER  BY tb.TABLE_NAME
	</select>

	<!-- table adn column info -->
	<select id="tableMetadata" parameterType="databaseParamInfo" resultType="dataMap">
		select 
			 tb.TABLE_SCHEMA as "SCHEMA"
			, tb.TABLE_NAME as "TABLE_NAME"
			, col.COLUMN_NAME as "COLUMN_NAME"
			, col.DATA_TYPE  as "DATA_TYPE"
			, case when CHARINDEX( col.DATA_TYPE, 'char,varchar,nchar,nvarchar' , 0) > 0 then col.CHARACTER_MAXIMUM_LENGTH  else '' end as COLUMN_SIZE
			, case when CHARINDEX( col.DATA_TYPE, 'float,real,numeric,decimal' , 0) > 0 then col.NUMERIC_PRECISION  else '' end as "DATA_PRECISION"
			, case when CHARINDEX( col.DATA_TYPE, 'float,real,numeric,decimal' , 0) > 0 then col.NUMERIC_SCALE  else '' end as "DECIMAL_DIGITS"
			, (CASE WHEN col.IS_NULLABLE  = 'NO'  then 'N' ELSE 'Y' END) as "IS_NULLABLE" 
			, col.COLUMN_DEFAULT AS "COLUMN_DEF"
			, prop.value as "COMMENT"
			, case when D.name is not null then 'PK'
				WHEN E.name is not null then 'FK'
				else null end as "CONSTRAINTS"
			, CASE WHEN D.name is not null THEN 'PK' ELSE '' END PRIMARY_KEY
		    , CASE WHEN E.name is not null THEN 'FK' ELSE '' END FOREIGN_KEY
		from ${databaseName}.INFORMATION_SCHEMA.tables tb 
		inner join ${databaseName}.INFORMATION_SCHEMA.columns col on tb.TABLE_NAME = col.TABLE_NAME
		LEFT JOIN ${databaseName}.INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE ccu on tb.TABLE_NAME = ccu.TABLE_NAME and col.COLUMN_NAME = ccu.COLUMN_NAME
		LEFT JOIN ${databaseName}.SYS.EXTENDED_PROPERTIES prop ON prop.MAJOR_ID = OBJECT_ID(tb.TABLE_CATALOG +'.'+tb.TABLE_SCHEMA +'.'+tb.TABLE_NAME ) AND prop.MINOR_ID= col.ORDINAL_POSITION 
		AND prop.class = 1 AND prop.name = 'MS_Description'
		LEFT JOIN   (SELECT k1.name, k1.object_id, type, k2.TABLE_NAME, k2.COLUMN_NAME FROM ${databaseName}.sys.objects k1
		                LEFT JOIN ${databaseName}.INFORMATION_SCHEMA.KEY_COLUMN_USAGE k2
		                ON k1.name = k2.CONSTRAINT_NAME
		                WHERE k1.type = 'PK'
		                ) D
		ON   col.TABLE_NAME = d.TABLE_NAME
		AND  col.COLUMN_NAME = d.COLUMN_NAME
		LEFT JOIN   (SELECT k1.name, k1.object_id, type, k2.TABLE_NAME, k2.COLUMN_NAME FROM ${databaseName}.sys.objects k1
		                LEFT JOIN ${databaseName}.INFORMATION_SCHEMA.KEY_COLUMN_USAGE k2
		                ON k1.name = k2.CONSTRAINT_NAME
		                WHERE k1.type = 'F'
		                ) E
		ON   col.TABLE_NAME = E.TABLE_NAME
		AND   col.COLUMN_NAME = E.COLUMN_NAME
		where 1=1 
		and tb.TABLE_TYPE = 'BASE TABLE'
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				tb.TABLE_NAME in (${item})
			</foreach>
		</if>
		ORDER BY tb.TABLE_NAME, col.ORDINAL_POSITION 
	</select>

	<!-- ================= table end ================= -->

	<!-- ================= view start ================= -->

	<!-- view 목록 보기 -->
	<select id="viewList" parameterType="databaseParamInfo" resultType="tableInfo">
		select TABLE_SCHEMA  "SCHEMA"
			, TABLE_NAME AS "NAME"
			, prop.value AS "REMARKS"
		from ${databaseName}.INFORMATION_SCHEMA.tables tb 
		LEFT JOIN   ${databaseName}.SYS.EXTENDED_PROPERTIES prop 
		ON prop.MAJOR_ID = OBJECT_ID(tb.TABLE_CATALOG +'.'+tb.TABLE_SCHEMA +'.'+tb.TABLE_NAME ) AND prop.MINOR_ID= 0 AND prop.class = 1 AND prop.name = 'MS_Description'
		where 1=1 
		and tb.TABLE_TYPE = 'VIEW'
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				tb.TABLE_NAME in (${item})
			</foreach>
		</if>
		ORDER  BY tb.TABLE_NAME
	</select>

	<!-- view and column info -->
	<select id="viewMetadata" parameterType="databaseParamInfo" resultType="dataMap">
		select 
			 tb.TABLE_SCHEMA as "SCHEMA"
			, tb.TABLE_NAME as "TABLE_NAME"
			, col.COLUMN_NAME as "COLUMN_NAME"
			, col.DATA_TYPE  as "DATA_TYPE"
			, case when CHARINDEX( col.DATA_TYPE, 'char,varchar,nchar,nvarchar' , 0) > 0 then col.CHARACTER_MAXIMUM_LENGTH  else '' end as COLUMN_SIZE
			, case when CHARINDEX( col.DATA_TYPE, 'float,real,numeric,decimal' , 0) > 0 then col.NUMERIC_PRECISION  else '' end as "DATA_PRECISION"
			, case when CHARINDEX( col.DATA_TYPE, 'float,real,numeric,decimal' , 0) > 0 then col.NUMERIC_SCALE  else '' end as "DECIMAL_DIGITS"
			, (CASE WHEN col.IS_NULLABLE  = 'NO'  then 'N' ELSE 'Y' END) as "IS_NULLABLE" 
			, col.COLUMN_DEFAULT AS "COLUMN_DEF"
			, prop.value as "COMMENT"
		from ${databaseName}.INFORMATION_SCHEMA.tables tb 
		inner join ${databaseName}.INFORMATION_SCHEMA.columns col on tb.TABLE_NAME = col.TABLE_NAME
		LEFT JOIN   ${databaseName}.SYS.EXTENDED_PROPERTIES prop ON prop.MAJOR_ID = OBJECT_ID(tb.TABLE_CATALOG +'.'+tb.TABLE_SCHEMA +'.'+tb.TABLE_NAME ) AND prop.MINOR_ID= col.ORDINAL_POSITION 
		AND prop.class = 1 AND prop.name = 'MS_Description'
		where 1=1 
		and tb.TABLE_TYPE = 'VIEW'
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				tb.TABLE_NAME in (${item})
			</foreach>
		</if>
		ORDER BY tb.TABLE_NAME, col.ORDINAL_POSITION 
	</select>

	<!-- ================= view end ================= -->

	<!-- procedure list -->
	<select id="procedureList" parameterType="databaseParamInfo" resultType="objectInfo">
		select so.name  AS "NAME"
			, ISNULL(prop.value,'')  AS "REMARKS"
			, so.crdate as "CREATED"
			, so.status as "STATUS"
		FROM        ${databaseName}.sys.sysobjects as so
		INNER JOIN  ${databaseName}.sys.sysusers as u
			ON      u.uid = so.uid
		LEFT OUTER JOIN ${databaseName}.sys.extended_properties AS prop
			ON      prop.major_id = so.id
			AND     prop.minor_id = 0
			AND     prop.name = 'MS_Description'
			and so.type='P'
		ORDER  BY so.name
	</select>

	<!-- object info  info map start  -->
	<resultMap id="objectInfoMap" type="objectInfo">
	    <id property="name" column="OBJECT_NAME" />
	    <result property="type" column="OBJECT_TYPE"/>
	    <result property="created" column="CREATED"/>
	    <result property="status" column="STATUS"/>
	    <result property="returnType" column="RETURN_TYPE"/>
	    <collection property="colList" javaType="java.util.ArrayList" resultMap="objectColInfoMap"/>
	</resultMap>

	<resultMap id="objectColInfoMap" type="objectColumnInfo">
	    <id property="no" column="SEQUENCE" />
	    <result property="name" column="ARGUMENT_NAME"/>
	    <result property="dataType" column="DATA_TYPE"/>
	    <result property="columnType" column="IN_OUT"/>
	</resultMap>
	<!-- object info info map end  -->

	<!-- procedure arguments list -->
	<select id="objectMetadataList" parameterType="databaseParamInfo" resultMap="objectInfoMap">
		SELECT
			so.NAME as "OBJECT_NAME",
			so.STATUS as "STATUS",
			so.type as "OBJECT_TYPE",
			sc.name as "ARGUMENT_NAME",
			st.name as "DATA_TYPE" ,
			sc.length as "COLUMN_SIZE" ,
			sc.length as "DATA_PRECISION" ,
			sc.xscale as "DECIMAL_DIGITS" ,
			prop.value as "COMMENT",
			isoutparam as "IN_OUT"
		FROM ${databaseName}.sys.sysobjects so INNER JOIN ${databaseName}.sys.syscolumns sc ON (
			so.id = sc.id and
			<choose>
				<when test='"procedure".equalsIgnoreCase(objectType)'>
					so.type='P'
				</when>
				<when test='"function".equalsIgnoreCase(objectType)'>
					so.type in ('FN','TF')
				</when>
				<otherwise>
					so.type=#{objectType}
				</otherwise>
			</choose>
		)
			INNER JOIN ${databaseName}.sys.systypes st ON (sc.xusertype = st.xusertype)
			LEFT JOIN ${databaseName}.sys.extended_properties AS prop ON prop.major_id = so.id
			AND prop.minor_id = sc.colid
			AND prop.class = 1
			AND prop.name = 'MS_Description'
		WHERE 1 = 1
			<if test="custom != null and custom.objectNameList != null">
				and
				<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
					so.name in (${item})
				</foreach>
			</if>
		ORDER BY so.name, isoutparam, sc.colid
	</select>

	<!-- function list -->
	<select id="functionList" parameterType="databaseParamInfo" resultType="objectInfo">
		select so.name  AS "NAME"
			,'FUNCTION' as "TYPE"
			, ISNULL(prop.value,'')  AS "REMARKS"
			, so.crdate as "CREATED"
			, so.status as "STATUS"
		FROM        ${databaseName}.sys.sysobjects as so
		INNER JOIN  ${databaseName}.sys.sysusers as u
			ON      u.uid = so.uid
		LEFT OUTER JOIN ${databaseName}.sys.extended_properties AS prop
			ON      prop.major_id = so.id
			AND     prop.minor_id = 0
			AND     prop.name = 'MS_Description'
			where  1=1
			and so.type in ('FN','TF')
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				so.name in (${item})
			</foreach>
		</if>
		ORDER  BY so.name
	</select>

	<!-- index list -->
	 <select id="indexList" parameterType="databaseParamInfo" resultType="objectInfo">
		select ind.name as "NAME"
			,'' as "STATUS"
		FROM
		     ${databaseName}.sys.indexes ind INNER JOIN ${databaseName}.sys.tables t
		ON ind.object_id = t.object_id
		where ind.type > 0
		and ind.is_primary_key = 0
	</select>

	<!-- index and column info -->
	 <select id="indexMetadata" parameterType="databaseParamInfo" resultType="dataMap">
		 SELECT
			t.name as  "TABLE_NAME"
			, ind.name as "INDEX_NAME"
			, ic.key_ordinal as "ORDINAL_POSITION"
			, col.name as "COLUMN_NAME"
			, (case when ind.is_primary_key=1 then 'PK'
			WHEN ind.is_unique=1 then 'UQ'
			else '' end
			) TYPE
			,'' as "STATUS"
			, (case when ic.is_descending_key = 0 then 'A' else 'D' end) ASC_OR_DESC
		FROM
		     ${databaseName}.sys.indexes ind
		INNER JOIN
		     ${databaseName}.sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id
		INNER JOIN
		     ${databaseName}.sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id
		INNER JOIN
		     ${databaseName}.sys.tables t ON ind.object_id = t.object_id
		where 1=1
		and ind.is_primary_key = 0
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="and (" close=")" separator="or">
				ind.name in (${item})
			</foreach>
		</if>
		ORDER BY
		     ind.name, t.name, ind.index_id, ic.index_column_id
	</select>


	<!-- trigger list -->
	<select id="triggerList" parameterType="databaseParamInfo" resultType="objectInfo">
		sELECT  OBJECT_NAME(parent_object_id) as "TABLE_NAME",
		        name as "NAME" ,
				create_date as "CREATED",
		        OBJECTPROPERTY(object_id, 'ExecIsUpdateTrigger') AS isupdate ,
		        OBJECTPROPERTY(object_id, 'ExecIsDeleteTrigger') AS isdelete ,
		        OBJECTPROPERTY(object_id, 'ExecIsInsertTrigger') AS isinsert ,
		        OBJECTPROPERTY(object_id, 'ExecIsAfterTrigger') AS isafter ,
		        OBJECTPROPERTY(object_id, 'ExecIsInsteadOfTrigger') AS isinsteadof ,
		        CASE OBJECTPROPERTY(object_id, 'ExecIsTriggerDisabled')
		          WHEN 1 THEN 'Disabled'
		          ELSE 'Enabled'
		        END AS "STATUS"
		FROM    ${databaseName}.sys.objects
		WHERE   type = 'TR'
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="and (" close=")" separator="or">
				name in (${item})
			</foreach>
		</if>
		ORDER BY OBJECT_NAME(parent_object_id)
	</select>

	<!-- trigger info map -->
	<resultMap id="triggerInfoMap" type="triggerInfo">
	    <result property="name" column="OBJECT_NAME" />
	    <result property="tblName" column="TABLE_NAME"/>
	    <result property="eventType" column="EVENTTYPE"/>
	    <result property="timing" column="TIMING"/>
	    <result property="created" column="CREATED"/>
	    <result property="status" column="STATUS"/>
	</resultMap>

	<!-- trigger metadata -->
	<select id="triggerMetadata" parameterType="databaseParamInfo" resultMap="triggerInfoMap">
		select  OBJECT_NAME(parent_object_id) as "TABLE_NAME",
		        name as "OBJECT_NAME" ,
				create_date as "CREATED",
				(CASE WHEN OBJECTPROPERTY(object_id, 'ExecIsUpdateTrigger')=1  then 'UPDATE'
				WHEN OBJECTPROPERTY(object_id, 'ExecIsDeleteTrigger')=1  then 'DELETE'
				WHEN OBJECTPROPERTY(object_id, 'ExecIsInsertTrigger')=1  then 'INSERT'
				WHEN OBJECTPROPERTY(object_id, 'ExecIsAfterTrigger')=1  then 'AFTER'
				WHEN OBJECTPROPERTY(object_id, 'ExecIsInsteadOfTrigger')=1  then 'INSTEADOF'
				ELSE '' END) as "EVENTTYPE",
		        CASE OBJECTPROPERTY(object_id, 'ExecIsTriggerDisabled')
		          WHEN 1 THEN 'Disabled'
		          ELSE 'Enabled'
		        END AS "STATUS"
		FROM    ${databaseName}.sys.objects
		WHERE   type = 'TR'
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="and (" close=")" separator="or">
				name in (${item})
			</foreach>
		</if>
		ORDER BY OBJECT_NAME(parent_object_id)
	</select>

	<!-- sequence info map -->
	<resultMap id="sequenceInfoMap" type="sequenceInfo">
	    <result property="name" column="OBJECT_NAME" />
	    <result property="minValue" column="MIN_VALUE"/>
	    <result property="maxValue" column="MAX_VALUE"/>
	    <result property="incrementBy" column="INCREMENT_BY"/>
	    <result property="created" column="CREATED"/>
	    <result property="status" column="STATUS"/>

	    <result property="cacheSize" column="CACHE_SIZE"/>
	    <result property="cycleFlag" column="CYCLE_FLAG"/>
	    <result property="orderFlag" column="ORDER_FLAG"/>
	    <result property="lastDdlTime" column="LAST_DDL_TIME"/>
	    <result property="lastNumber" column="LAST_NUMBER"/>
	</resultMap>

	<!-- sequence list -->
	<select id="sequenceList" parameterType="databaseParamInfo" resultType="objectInfo">
		SELECT
		  name as "NAME",
		  cast(start_value AS NUMERIC)   AS start_value,
		  cast(increment AS NUMERIC)     AS increment,
		  cast(current_value AS NUMERIC) AS current_value
		FROM ${databaseName}.sys.sequences
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="and (" close=")" separator="or">
				name in (${item})
			</foreach>
		</if>
	</select>

	<!--
		시퀸스 목록 보기.
	 -->
	<select id="sequenceMetadata" parameterType="databaseParamInfo" resultMap="sequenceInfoMap">
		SELECT
		  name as "OBJECT_NAME"
		  ,create_date as CREATED
		  ,MINIMUM_VALUE as "MIN_VALUE"
		  ,increment as "INCREMENT_BY"
		  ,current_value as "LAST_NUMBER"
		FROM ${databaseName}.sys.sequences
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="and (" close=")" separator="or">
				name in (${item})
			</foreach>
		</if>
	</select>

	<!--
		시퀸스 script
	 -->
	<select id="sequenceScript" parameterType="databaseParamInfo" resultType="hashmap">
		SELECT
			name as "OBJECT_NAME"
			,CREATE_DATE as "CREATED"
			,MINIMUM_VALUE as "MIN_VALUE"
			,MAXIMUM_VALUE as "MAX_VALUE"
			,INCREMENT as "INCREMENT_BY"
			,CACHE_SIZE as "CACHE_SIZE"
			,IS_CYCLING as "CYCLE_FLAG"
		FROM ${databaseName}.sys.sequences
		where name = #{objectName}
	</select>

	<!--
		Table DDL Script
	 -->
	<select id="tableScript"  parameterType="databaseParamInfo" resultType="dataMap">
		select 
			 tb.TABLE_SCHEMA as "SCHEMA_NAME"
			, tb.TABLE_NAME as "TABLE_NAME"
			, col.COLUMN_NAME as "COLUMN_NAME"
			, col.DATA_TYPE  as "DATA_TYPE"
			, case when CHARINDEX( col.DATA_TYPE, 'char,varchar,nchar,nvarchar' , 0) > 0 then col.CHARACTER_MAXIMUM_LENGTH  else '' end as COLUMN_SIZE
			, case when CHARINDEX( col.DATA_TYPE, 'float,real,numeric,decimal' , 0) > 0 then col.NUMERIC_PRECISION  else '' end as "DATA_PRECISION"
			, case when CHARINDEX( col.DATA_TYPE, 'float,real,numeric,decimal' , 0) > 0 then col.NUMERIC_SCALE  else '' end as "DECIMAL_DIGITS"
			, (CASE WHEN col.IS_NULLABLE  = 'NO'  then 'N' ELSE 'Y' END) as "NULLABLE" 
			, col.COLUMN_DEFAULT AS "DATA_DEFAULT"
		from ${databaseName}.INFORMATION_SCHEMA.tables tb 
		inner join ${databaseName}.INFORMATION_SCHEMA.columns col on tb.TABLE_NAME = col.TABLE_NAME
		where 1=1 
		and tb.TABLE_TYPE = 'BASE TABLE'
		and tb.TABLE_NAME = #{objectName}
		ORDER BY tb.TABLE_NAME, col.ORDINAL_POSITION 
	</select>

	<!--
		Table DDL Script => Primary key list
	 -->
	<select id="tableConstraintKey" resultType="hashmap" parameterType="databaseParamInfo">
		select * from (
			SELECT
				 ind.name as "CONSTRAINT_NAME"
				,OBJECT_NAME(ic.object_id, db_id(#{databaseName})) as "TABLE_NAME"
				, col.name as "COLUMN_NAME"
				, (case when ind.is_primary_key=1 then 'PK'
				WHEN ind.is_unique=1 then 'UQ'
				else '' end
				) "TYPE"
				, (case when ic.is_descending_key = 0 then 'A' else 'D' end) DESCENDING
				,ic.key_ordinal as ORDINAL
				,'' as "REFERENCED_TABLE_NAME"
				,'' as "REFERENCED_COLUMN_NAME"
			FROM ${databaseName}.sys.indexes ind
			INNER JOIN ${databaseName}.sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id
			INNER JOIN ${databaseName}.sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id
			INNER JOIN ${databaseName}.sys.tables t ON ind.object_id = t.object_id
			where 1=1
			and (ind.is_primary_key = 1 or ind.is_unique=1)
			and t.name = #{objectName}
			union all
			select OBJECT_NAME(constraint_object_id, db_id(#{databaseName})) as "CONSTRAINT_NAME"
				,OBJECT_NAME(fkc.parent_object_id, db_id(#{databaseName})) as "TABLE_NAME"
				, col.name as "COLUMN_NAME"
				, 'FK' as "TYPE"
				, '' as DESCENDING
				, 2 as "ORDINAL"
				,OBJECT_NAME(referenced_object_id, db_id(#{databaseName})) as "REFERENCED_TABLE_NAME"
				,col2.name  as "REFERENCED_COLUMN_NAME"
			from ${databaseName}.sys.foreign_key_columns fkc inner join ${databaseName}.sys.tables t ON fkc.parent_object_id = t.object_id 
			INNER JOIN ${databaseName}.sys.columns col ON fkc.parent_object_id = col.object_id and fkc.parent_column_id  = col.column_id
			INNER JOIN ${databaseName}.sys.columns col2 ON fkc.referenced_object_id = col2.object_id and fkc.referenced_column_id   = col2.column_id
			and t.name = #{objectName}
		)  a order by TABLE_NAME , ORDINAL 
	</select>

	<!--
		Table DDL Script => Table, Column Comment Script
	 -->
	<select id="tableScriptComments" resultType="string" parameterType="databaseParamInfo">
		SELECT
			'exec sp_addextendedproperty ''MS_Description'', '''
				+ convert(varchar, p.value)
				+ ''', ''schema'', '+schema_name(tbl.schema_id)+', ''table'', '''
				+ convert(varchar, tbl.name)
				+ ''' ;'  as comment
		FROM ${databaseName}.sys.tables AS tbl
			INNER JOIN ${databaseName}.sys.extended_properties AS p
			ON p.major_id = tbl.object_id
		WHERE 1=1
	        AND p.minor_id = 0
	        AND p.class = 1
	        AND tbl.object_id = object_id(#{databaseName}+'.'+schema_name(tbl.schema_id)+'.'+#{objectName})
	        AND p.value > ''
		UNION ALL
		SELECT
			'exec sp_addextendedproperty ''MS_Description'', '''
				+ convert(varchar, p.value)
				+ ''', ''schema'', '+schema_name(a.uid)+', ''table'', '''
				+ convert(varchar, a.name)
				+ ''', ''column'', '''
				+ convert(varchar, b.name)
				+ ''' ;'  as comment
		FROM ${databaseName}.sys.sysobjects a INNER JOIN ${databaseName}.sys.syscolumns b ON (a.id = b.id)
			INNER JOIN ${databaseName}.sys.systypes c ON (b.xusertype = c.xusertype)
			LEFT OUTER JOIN ${databaseName}.sys.sysindexkeys d ON (b.id =d.id and b.colid = d.colid and indid =1)
			LEFT JOIN ${databaseName}.sys.extended_properties AS p ON p.major_id = a.id AND p.minor_id = b.colid AND p.class = 1
		WHERE 1=1
			AND a.id = object_id(#{databaseName}+'.'+schema_name(a.uid)+'.'+#{objectName})
			AND p.value > ''
	</select>

	<!--
	 view script 생성  create 문
	 -->
	<select id="viewScript" resultType="string" parameterType="databaseParamInfo">
		select definition from ${databaseName}.sys.sql_modules 
		where object_id = object_id(#{databaseName}+'.dbo.'+#{objectName})
	</select>

	<!--
		object function  , procedure 소스
	 -->
	<select id="objectScriptSource" resultType="string" parameterType="databaseParamInfo">
		select definition from ${databaseName}.sys.sql_modules 
		where object_id = object_id(#{databaseName}+'.dbo.'+#{objectName})
	</select>

	<!--
		create index  Script
	 -->
	<select id="indexScriptSource" resultType="hashmap" parameterType="databaseParamInfo">
		SELECT ' CREATE ' +
		       CASE
		            WHEN I.is_unique = 1 THEN ' UNIQUE '
		            ELSE ''
		       END +
		       I.type_desc COLLATE DATABASE_DEFAULT + ' INDEX ' +
		       I.name + ' ON ' +
		       SCHEMA_NAME(T.schema_id) + '.' + T.name + ' ( ' +
		       KeyColumns + ' )  ' +
		       ISNULL(' INCLUDE (' + IncludedColumns + ' ) ', '') +
		       ISNULL(' WHERE  ' + I.filter_definition, '') + ' WITH ( ' +
		       CASE
		            WHEN I.is_padded = 1 THEN ' PAD_INDEX = ON '
		            ELSE ' PAD_INDEX = OFF '
		       END + ',' +
		       'FILLFACTOR = ' + CONVERT(
		           CHAR(5),
		           CASE
		                WHEN I.fill_factor = 0 THEN 100
		                ELSE I.fill_factor
		           END
		       ) + ',' +
		       'SORT_IN_TEMPDB = OFF ' + ',' +
		       CASE
		            WHEN I.ignore_dup_key = 1 THEN ' IGNORE_DUP_KEY = ON '
		            ELSE ' IGNORE_DUP_KEY = OFF '
		       END + ',' +
		       CASE
		            WHEN ST.no_recompute = 0 THEN ' STATISTICS_NORECOMPUTE = OFF '
		            ELSE ' STATISTICS_NORECOMPUTE = ON '
		       END + ',' +
		       ' ONLINE = OFF ' + ',' +
		       CASE
		            WHEN I.allow_row_locks = 1 THEN ' ALLOW_ROW_LOCKS = ON '
		            ELSE ' ALLOW_ROW_LOCKS = OFF '
		       END + ',' +
		       CASE
		            WHEN I.allow_page_locks = 1 THEN ' ALLOW_PAGE_LOCKS = ON '
		            ELSE ' ALLOW_PAGE_LOCKS = OFF '
		       END + ' ) ON [' +
		       DS.name + ' ] ' +  CHAR(13) + CHAR(10) + ' GO' as SOURCES
		FROM   ${databaseName}.sys.indexes I
		       JOIN ${databaseName}.sys.tables T
		            ON  T.object_id = I.object_id
		       JOIN ${databaseName}.sys.sysindexes SI
		            ON  I.object_id = SI.id
		            AND I.index_id = SI.indid
		       JOIN (
		                SELECT *
		                FROM   (
		                           SELECT IC2.object_id,
		                                  IC2.index_id,
		                                  STUFF(
		                                      (
		                                          SELECT ' , ' + C.name + CASE
		                                                                       WHEN MAX(CONVERT(INT, IC1.is_descending_key))
		                                                                            = 1 THEN
		                                                                            ' DESC '
		                                                                       ELSE
		                                                                            ' ASC '
		                                                                  END
		                                          FROM   ${databaseName}.sys.index_columns IC1
		                                                 JOIN ${databaseName}.sys.columns C
		                                                      ON  C.object_id = IC1.object_id
		                                                      AND C.column_id = IC1.column_id
		                                                      AND IC1.is_included_column =
		                                                          0
		                                          WHERE  IC1.object_id = IC2.object_id
		                                                 AND IC1.index_id = IC2.index_id
		                                          GROUP BY
		                                                 IC1.object_id,
		                                                 C.name,
		                                                 index_id
		                                          ORDER BY
		                                                 MAX(IC1.key_ordinal)
		                                                 FOR XML PATH('')
		                                      ),
		                                      1,
		                                      2,
		                                      ''
		                                  ) KeyColumns
		                           FROM   ${databaseName}.sys.index_columns IC2
		                           GROUP BY
		                                  IC2.object_id,
		                                  IC2.index_id
		                       ) tmp3
		            )tmp4
		            ON  I.object_id = tmp4.object_id
		            AND I.Index_id = tmp4.index_id
		       JOIN ${databaseName}.sys.stats ST ON  ST.object_id = I.object_id AND ST.stats_id = I.index_id
		       JOIN ${databaseName}.sys.data_spaces DS ON  I.data_space_id = DS.data_space_id
		       JOIN ${databaseName}.sys.filegroups FG ON  I.data_space_id = FG.data_space_id
		       LEFT JOIN (
		                SELECT *
		                FROM   (
		                           SELECT IC2.object_id,
		                                  IC2.index_id,
		                                  STUFF(
		                                      (
		                                          SELECT ' , ' + C.name
		                                          FROM   ${databaseName}.sys.index_columns IC1
		                                                 JOIN ${databaseName}.sys.columns C
		                                                      ON  C.object_id = IC1.object_id
		                                                      AND C.column_id = IC1.column_id
		                                                      AND IC1.is_included_column =
		                                                          1
		                                          WHERE  IC1.object_id = IC2.object_id
		                                                 AND IC1.index_id = IC2.index_id
		                                          GROUP BY
		                                                 IC1.object_id,
		                                                 C.name,
		                                                 index_id
		                                                 FOR XML PATH('')
		                                      ),
		                                      1,
		                                      2,
		                                      ''
		                                  ) IncludedColumns
		                           FROM   ${databaseName}.sys.index_columns IC2
		                           GROUP BY
		                                  IC2.object_id,
		                                  IC2.index_id
		                       ) tmp1
		                WHERE  IncludedColumns IS NOT NULL
		            ) tmp2
		            ON  tmp2.object_id = I.object_id
		            AND tmp2.index_id = I.index_id
		WHERE  I.is_primary_key = 0
	       AND I.name =#{objectName}
	</select>

</mapper>
