<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sybase.mata">

	<!-- db 정보보기. -->
	<select id="dbSystemView" parameterType="databaseParamInfo" resultType="hashmap">
		select 'VERSION_NUMBER' as "NAME",  convert(varchar, @@version_number) as "VAL"
	    union all
	    select'VERSION' as "NAME",   @@version as "VAL"
	    union all
	    select'LANG' as "NAME",   @@language as "val"
	    union all
	    select'MAXPAGESIZE' as "NAME",  convert(varchar, @@maxpagesize) as "val"
	</select>

	<select id="getUsers" parameterType="databaseParamInfo" resultType="string">
		select name
		from sysusers o
		order by o.name
	</select>

	<!-- ================= table start ================= -->
	<!--  tableList 목록 보기. -->
	<select id="tableList" parameterType="databaseParamInfo" resultType="tableInfo">
		<!-- object type 설명
			C – computed column
			D – default
			F – SQLJ function
			L – log
			N – partition condition
			P – Transact-SQL or SQLJ procedure
			PR – prepare objects (created by Dynamic SQL)
			R – rule
			RI – referential constraint
			S – system table
			TR – trigger
			U – user table
			V – view
			XP – extended stored procedure
		-->
		select 
			'${schema}' as "SCHEMA" 
			, trim(so.table_name) as "NAME"
			,so.remarks as "REMARKS" 
		from sys.systable so 
		where so.creator = user_id (#{schema})
		and so.table_type = 'BASE'
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				so.table_name  in (${item})
			</foreach>
		</if>
		order by so.table_name
	</select>

	<!-- table adn column info -->
	<select id="tableMetadata" parameterType="databaseParamInfo" resultType="dataMap">
		select trim(so.table_name) as "TABLE_NAME"
			, trim(sc.cname) as  "COLUMN_NAME"
			, trim(sc.coltype) as "DATA_TYPE"
			, sc.prec as "COLUMN_SIZE"
			, sc.prec as "DATA_PRECISION"
			, sc.scale as "DECIMAL_DIGITS"
			, CASE WHEN sc.nulls = 'N' THEN 'YES'	ELSE 'NO' END IS_NULLABLE
			, sc.default_value AS "COLUMN_DEF"
			, sc.colno as  "ORDINAL_POSITION"
			, sc.remarks as "COMMENT"
			, sk.KEYCONST as "CONSTRAINTS"
		from sys.systable so inner join sys.syscolumns sc on so.table_name = sc.tname
			left outer join (
				select t.table_name, c.column_name,  (case WHEN min(ix.index_category) =1  THEN 'PK'
							when min(ix.index_category) =2 then 'FK'
							else ''	end) as  KEYCONST
				from sysidx ix, systable t, sysidxcol ixc , syscolumn c
				where ix.table_id = t.table_id 
				and ixc.table_id = t.table_id 
				and ixc.index_id = ix.index_id 
				and ixc.table_id = c.table_id
				and ixc.column_id = c.column_id 
				and t.creator = user_id (#{schema})
				<if test="custom != null and custom.objectNameList != null">
					and
					<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
						t.table_name in (${item})
					</foreach>
				</if>
				and ix.index_category =1
				group by t.table_name, c.column_name
			) sk on (so.table_name = sk.table_name and sc.cname = sk.column_name)
		where so.creator = user_id (#{schema})
		and sc.creator = #{schema}
		and so.table_type = 'BASE'
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				so.table_name in (${item})
			</foreach>
		</if>
		order by so.table_name , sc.colno
	</select>

	<!-- ================= table end ================= -->

	<!-- ================= view start ================= -->

	<!-- view 목록 보기 -->
	<select id="viewList" parameterType="databaseParamInfo" resultType="tableInfo">
		select 
			'${schema}' as "SCHEMA" 
			, trim(so.table_name) as "NAME"
			,so.remarks as "REMARKS" 
		from sys.systable so 
		where so.creator = user_id (#{schema})
		and so.table_type = 'VIEW'
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				so.table_name  in (${item})
			</foreach>
		</if>
		order by so.table_name
	</select>

	<!-- view and column info -->
	<select id="viewMetadata" parameterType="databaseParamInfo" resultType="dataMap">
		select trim(so.table_name) as "TABLE_NAME"
			, trim(sc.cname) as  "COLUMN_NAME"
			, trim(sc.coltype) as "DATA_TYPE"
			, sc.length as "COLUMN_SIZE"
			, sc.length as "DATA_PRECISION"
			, sc.syslength as "DECIMAL_DIGITS"
			, CASE WHEN sc.nulls = 'N' THEN 'YES'	ELSE 'NO' END IS_NULLABLE
			, sc.default_value AS "COLUMN_DEF"
			, sc.colno as  "ORDINAL_POSITION"
			, sc.remarks as "COMMENT"
			, sk.KEYCONST as "CONSTRAINTS"
		from sys.systable so inner join sys.syscolumns sc on so.table_name = sc.tname
			left outer join (
				select t.table_name, c.column_name,  (case WHEN min(ix.index_category) =1  THEN 'PK'
							when min(ix.index_category) =2 then 'FK'
							else ''	end) as  KEYCONST
				from sysidx ix, systable t, sysidxcol ixc , syscolumn c
				where ix.table_id = t.table_id 
				and ixc.table_id = t.table_id 
				and ixc.index_id = ix.index_id 
				and ixc.table_id = c.table_id
				and ixc.column_id = c.column_id 
				and t.creator = user_id (#{schema})
				<if test="custom != null and custom.objectNameList != null">
					and
					<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
						t.table_name in (${item})
					</foreach>
				</if>
				and ix.index_category =1
				group by t.table_name, c.column_name
			) sk on (so.table_name = sk.table_name and sc.cname = sk.column_name)
		where so.creator = user_id (#{schema})
		and so.table_type = 'VIEW'
		and sc.creator = #{schema}
		<if test="custom != null and custom.objectNameList != null">
			and
			<foreach item="item" index="index" collection="custom.objectNameList" open="(" close=")" separator="or">
				so.table_name in (${item})
			</foreach>
		</if>
		order by so.table_name , sc.colno
	</select>

	<!-- ================= view end ================= -->

	<!-- procedure list -->
	<select id="procedureList" parameterType="databaseParamInfo" resultType="objectInfo">
		select
			*
		from(
			select
				su.name as "SCHEMA_NAME"
				,so.name as "NAME"
				,so.type as "TYPE"
				,so.crdate as "CREATED"
				,so.sysstat2  as  STATUS
			from sysusers su inner join  sysobjects so on su.uid = so.uid
			where so.type in('P','XP')
			and	su.name= #{schema}
		) a
		order by a.SCHEMA_NAME, a.NAME
	</select>

	<!-- object info  info map start  -->
	<resultMap id="objectInfoMap" type="objectInfo">
	    <id property="name" column="OBJECT_NAME" />
	    <result property="type" column="OBJECT_TYPE"/>
	    <result property="created" column="CREATED"/>
	    <result property="status" column="STATUS"/>
	    <result property="returnType" column="RETURN_TYPE"/>
	    <collection property="colList" javaType="java.util.ArrayList" resultMap="objectColInfoMap"/>
	</resultMap>

	<resultMap id="objectColInfoMap" type="objectColumnInfo">
	    <id property="no" column="SEQUENCE" />
	    <result property="name" column="ARGUMENT_NAME"/>
	    <result property="dataType" column="DATA_TYPE"/>
	    <result property="columnType" column="IN_OUT"/>
	</resultMap>
	<!-- object info info map end  -->

	<!-- procedure arguments list -->
	<select id="objectMetadataList" parameterType="databaseParamInfo" resultMap="objectInfoMap">
		select *
		from (
			SELECT
				so.name as "OBJECT_NAME",
				so.sysstat2  as "STATUS",
				so.type as "OBJECT_TYPE",
				so.crdate as "CREATED",
				sc.name as "ARGUMENT_NAME",
				st.name as "DATA_TYPE" ,
				sc.length as "COLUMN_SIZE" ,
				sc.length as "DATA_PRECISION" ,
				sc.scale as "DECIMAL_DIGITS",
				sc.colid as "SEQUENCE",
				'' as "COMMENT",
				(case WHEN sc.status = 1 THEN 'IN'
			    when sc.status = 2 then 'OUT'
			    else convert(varchar, sc.status)
			    end) as "IN_OUT"
			FROM sysobjects so INNER JOIN dbo.syscolumns sc ON (
				so.id = sc.id and
				<choose>
					<when test='"procedure".equalsIgnoreCase(objectType)'>
						 so.type in ('P','PR')
					</when>
					<when test='"function".equalsIgnoreCase(objectType)'>
						so.type in ('SF','F')
					</when>
					<otherwise>
						so.type=#{objectType}
					</otherwise>
				</choose>
			)INNER JOIN systypes st ON (sc.usertype = st.usertype)
			where so.uid = USER_ID(#{schema})
		) a
		ORDER BY a.OBJECT_NAME, a.SEQUENCE
	</select>


	<!-- function list -->
	<select id="functionList" parameterType="databaseParamInfo" resultType="objectInfo">
		select *
		from (
			select
				su.name as "SCHEMA_NAME"
				,so.name as "NAME"
				,so.type as "TYPE"
				,so.crdate as "CREATED"
				,so.sysstat2  as  STATUS
			from sysusers su inner join  sysobjects so on su.uid = so.uid
			where so.type in('SF','F')
			and	su.name= #{schema}
		) a
		order  by a.SCHEMA_NAME, a.NAME
	</select>


	<!-- index list -->
	 <select id="indexList" parameterType="databaseParamInfo" resultType="objectInfo">
		select 
			trim(index_name) as "NAME"
			, '' as "STATUS"
			, '' as "CREATED"
		from sysidx ix, systable t
		where ix.table_id = t.table_id 
		and t.creator = user_id (#{schema})
		and ix.index_category not in (1,2)
		order by t.table_name
	</select>

	<!-- index and column info -->
	 <select id="indexMetadata" parameterType="databaseParamInfo" resultType="dataMap">
		select 
			trim(t.table_name) as  "TABLE_NAME"
			, trim(c.column_name) as "COLUMN_NAME"
			, ixc.sequence as "ORDINAL_POSITION"
			, trim(index_name) as "INDEX_NAME"
			, (case WHEN ix.index_category =1  THEN 'PK'
				when ix.index_category =2 then 'FK'
				when ix.index_category =3 then 'IDX'
				else convert(varchar, ix.index_category) 
				end) as  KEYCONST
			, (case WHEN ixc."order" ='A'  THEN 'ASC'
				else 'DESC' 
				end) as   "ASC_OR_DESC"
		from sysidx ix, systable t, sysidxcol ixc , syscolumn c
		where ix.table_id = t.table_id 
		and ixc.table_id = t.table_id 
		and ixc.index_id = ix.index_id 
		and ixc.table_id = c.table_id
		and ixc.column_id = c.column_id 
		and t.creator = user_id (#{schema})
		and ix.index_category not in (1,2)
		order by t.table_name , index_name, ixc.sequence
	</select>

	<!-- trigger list -->
	<select id="triggerList" parameterType="databaseParamInfo" resultType="objectInfo">
		select
			su.name as "SCHEMA"
			,so.name as "NAME"
			,so.type as "TABLE_TYPE"
			,so.crdate as "CREATED"
			,so.sysstat2  as  STATUS
		from sysusers su inner join  sysobjects so on su.uid = so.uid
		where so.type in('TR')
		and	su.name= #{schema}
		order  by su.name, so.name
	</select>

	<!-- trigger info map -->
	<resultMap id="triggerInfoMap" type="triggerInfo">
	    <result property="name" column="OBJECT_NAME" />
	    <result property="tblName" column="TABLE_NAME"/>
	    <result property="eventType" column="EVENTTYPE"/>
	    <result property="timing" column="TIMING"/>
	    <result property="created" column="CREATED"/>
	    <result property="status" column="STATUS"/>
		<!-- custom field -->
	    <collection property="customField" javaType="hashmap" resultMap="customFieldMap"></collection>
	</resultMap>

	<resultMap type="hashMap" id="customFieldMap">
        <result property="DELETE_TABLE" column="DELETE_TABLE"></result>
        <result property="INSERT_TABLE" column="INSERT_TABLE"></result>
        <result property="UPDATE_TABLE" column="UPDATE_TABLE"></result>
    </resultMap>


	<!-- trigger metadata -->
	<select id="triggerMetadata" parameterType="databaseParamInfo" resultMap="triggerInfoMap">
		select *
		from (
			select
				su.name as "SCHEMA_NAME"
				,so.name as "OBJECT_NAME"
				,so.type as "TABLE_TYPE"
				,'' as "TIMING"
				,so.crdate as "CREATED"
				,so.sysstat2  as  STATUS
				,(CASE WHEN so.deltrig > 0 THEN object_name(so.deltrig)
						when so.instrig > 0 then object_name(so.instrig)
						when so.updtrig > 0 then object_name(so.updtrig)
						when so.seltrig > 0 then object_name(so.seltrig)
						ELSE '' END) AS "TABLE_NAME"
				,object_name(so.deltrig) as "DELETE_TABLE"
				,object_name(so.instrig) as "INSERT_TABLE"
				,object_name(so.updtrig) as "UPDATE_TABLE"
			from sysusers su inner join  sysobjects so on su.uid = so.uid
			where so.type in('TR')
			and	su.name= #{schema}
		) a
		order  by a.SCHEMA_NAME, a.OBJECT_NAME
	</select>

	<!--
		Table DDL Script
	 -->
	<select id="tableScript"  parameterType="databaseParamInfo" resultType="dataMap">
		select trim(so.table_name) as "TABLE_NAME"
			,trim(sc.cname) as  "COLUMN_NAME"
			, trim(sc.coltype) as "DATA_TYPE"
			, sc.length as "COLUMN_SIZE"
			, sc.length as "DATA_PRECISION"
			, sc.syslength as "DECIMAL_DIGITS"
			, CASE WHEN sc.nulls = 'N' THEN 'YES'	ELSE 'NO' END NULLABLE
			, sc.default_value AS "COLUMN_DEF"
			, sc.colno as  "ORDINAL_POSITION"
			, sc.remarks as "COMMENT"
		from sys.systable so inner join sys.syscolumns sc on so.table_name = sc.tname
		where so.creator = user_id (#{schema})
		and so.table_type = 'BASE'
		and so.table_name = #{objectName}
		order by so.table_name , sc.colno
	</select>

	<!--
		Table DDL Script => Primary key list
	 -->
	<select id="tableScriptPk" resultType="hashmap" parameterType="databaseParamInfo">
		select trim(t.table_name) AS "TABLE_NAME"
			, trim(index_name) as "CONSTRAINT_NAME"
			, trim(c.column_name) AS "COLUMN_NAME" 
			, (case WHEN ix.index_category =1  THEN 'PK'
				when ix.index_category =2 then 'FK'
				when ix.index_category =3 then 'IDX'
				else convert(varchar, ix.index_category) 
				end) as  TYPE
		from sysidx ix, systable t, sysidxcol ixc , syscolumn c
		where ix.table_id = t.table_id 
		and ixc.table_id = t.table_id 
		and ixc.index_id = ix.index_id 
		and ixc.table_id = c.table_id
		and ixc.column_id = c.column_id 
		and t.creator = user_id (#{schema})
		and t.table_name = #{objectName}
		and ix.index_category = 1
		order by t.table_name , index_name, ixc.sequence
	</select>

	<!--
		Table DDL Script => Table, Column Comment Script
	 -->
	<select id="tableScriptComments" resultType="hashmap" parameterType="databaseParamInfo">
		select 
			'TBL' as "TYPE"
			,trim(so.table_name) as "NAME"
			,so.remarks AS "COMMENT"
		from sys.systable so 
		where so.creator = user_id (#{schema})
		and so.table_type = 'BASE'
		and so.remarks is not null
		and so.table_name =  #{objectName}
		union all 
		select 
			'COL' as "TYPE"
			,trim(sc.cname) as "NAME"
			,sc.remarks AS "COMMENT"
		from sys.systable so inner join sys.syscolumns sc on so.table_name = sc.tname
		where so.creator = user_id (#{schema})
		and so.table_type = 'BASE'
		and so.remarks is not null
		and so.table_name =  #{objectName}
	</select>

	<!--
		object function  , procedure 소스
	 -->
	<select id="objectScriptSource" parameterType="databaseParamInfo" resultType="hashmap">
		select * from
		(
			select o.name as "OBJECT_NAME", c.text as "SOURCE_TEXT", c.colid as "IDX"
			from syscomments c inner join sysobjects o on o.id=c.id
			where o.uid = user_id (#{schema})
			and
			<choose>
				<when test='"procedure".equalsIgnoreCase(objectType)'>
					o.type in ('P','PR')
				</when>
				<when test='"function".equalsIgnoreCase(objectType)'>
					o.type in ('SF','F')
				</when>
				<when test='"trigger".equalsIgnoreCase(objectType)'>
					o.type in ('TR')
				</when>
				<when test='"view".equalsIgnoreCase(objectType)'>
					o.type in ('V')
				</when>
				<otherwise>
					o.type=#{objectType}
				</otherwise>
			</choose>
			and o.name=#{objectName}
		) a
		order by a.IDX
	</select>

	<!-- create index  Script -->
	<select id="indexScript" parameterType="databaseParamInfo" resultType="hashmap">
		select trim(t.table_name) AS "TABLE_NAME"
			, trim(index_name) as "INDEX_NAME"
			, trim(c.column_name) AS "COLUMN_NAME" 
			, (case WHEN ix.index_category =1  THEN 'PK'
				when ix.index_category =2 then 'FK'
				when ix.index_category =3 then 'IDX'
				else convert(varchar, ix.index_category) 
				end) as  TYPE
		from sysidx ix, systable t, sysidxcol ixc , syscolumn c
		where ix.table_id = t.table_id 
		and ixc.table_id = t.table_id 
		and ixc.index_id = ix.index_id 
		and ixc.table_id = c.table_id
		and ixc.column_id = c.column_id 
		and t.creator = user_id (#{schema})
		and ix.index_name = #{objectName}
		order by t.table_name , index_name, ixc.sequence
	</select>

</mapper>
